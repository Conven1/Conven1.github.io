<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>敏感词过滤</title>
      <link href="/java/util/SensitiveWordFilter/"/>
      <url>/java/util/SensitiveWordFilter/</url>
      
        <content type="html"><![CDATA[<ol><li>依赖引入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ahocorasick<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ahocorasick<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>敏感词方法实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.ahocorasick.trie.Emit;</span><br><span class="line"><span class="keyword">import</span> org.ahocorasick.trie.Trie;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveWordFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Trie trie;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; wordLevelMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveWord</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String word;</span><br><span class="line">        <span class="keyword">private</span> Integer level;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> startIndex;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化AC自动机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initAC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SensitiveWord</span> <span class="variable">sensitiveWord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SensitiveWord</span>();</span><br><span class="line">        sensitiveWord.setWord(<span class="string">&quot;傻子&quot;</span>);</span><br><span class="line">        sensitiveWord.setLevel(<span class="number">2</span>);</span><br><span class="line">        <span class="type">SensitiveWord</span> <span class="variable">sensitiveWord2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SensitiveWord</span>();</span><br><span class="line">        sensitiveWord.setWord(<span class="string">&quot;傻瓜&quot;</span>);</span><br><span class="line">        sensitiveWord.setLevel(<span class="number">1</span>);</span><br><span class="line">        <span class="type">SensitiveWord</span> <span class="variable">sensitiveWord3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SensitiveWord</span>();</span><br><span class="line">        sensitiveWord.setWord(<span class="string">&quot;傻逼&quot;</span>);</span><br><span class="line">        sensitiveWord.setLevel(<span class="number">3</span>);</span><br><span class="line">        List&lt;SensitiveWord&gt; words = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        words.add(sensitiveWord);</span><br><span class="line">        words.add(sensitiveWord2);</span><br><span class="line">        words.add(sensitiveWord3);</span><br><span class="line"></span><br><span class="line">        buildTrie(words);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildTrie</span><span class="params">(List&lt;SensitiveWord&gt; words)</span> &#123;</span><br><span class="line">        Trie.<span class="type">TrieBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Trie.builder();</span><br><span class="line">        words.forEach(word -&gt; &#123;</span><br><span class="line">            builder.addKeyword(word.getWord());</span><br><span class="line">            wordLevelMap.put(word.getWord(), word.getLevel());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.trie = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤敏感词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">filterContent</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="comment">// 本地AC自动机敏感词过滤</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">localResult</span> <span class="operator">=</span> localFilter(text);</span><br><span class="line">        <span class="comment">// 根据本地过滤结果分级处理</span></span><br><span class="line">        <span class="keyword">switch</span> (localResult) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">// 阿里云内容安全API</span></span><br><span class="line">                <span class="keyword">return</span> contentSecurityScan(text, localResult);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;未知的过滤建议类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地AC自动机敏感词过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本地过滤处理敏感等级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">localFilter</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        Set&lt;SensitiveWord&gt; matches = getSensitiveLevel(text);</span><br><span class="line">        Optional&lt;Integer&gt; maxLevel = matches.stream()</span><br><span class="line">            .map(SensitiveWord::getLevel)</span><br><span class="line">            .max(Integer::compareTo);</span><br><span class="line">        <span class="keyword">return</span> maxLevel.orElse(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取敏感词等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 敏感词列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;SensitiveWord&gt; <span class="title function_">getSensitiveLevel</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        Collection&lt;Emit&gt; emits = trie.parseText(text);</span><br><span class="line">        <span class="keyword">return</span> emits.stream()</span><br><span class="line">            .map(emit -&gt; &#123;</span><br><span class="line">                <span class="type">SensitiveWord</span> <span class="variable">match</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SensitiveWord</span>();</span><br><span class="line">                match.setWord(emit.getKeyword());</span><br><span class="line">                match.setLevel(wordLevelMap.getOrDefault(emit.getKeyword(), <span class="number">1</span>));</span><br><span class="line">                match.setStartIndex(emit.getStart());</span><br><span class="line">                match.setEndIndex(emit.getEnd());</span><br><span class="line">                <span class="keyword">return</span> match;</span><br><span class="line">            &#125;)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本阿里云内容安全API敏感词过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localResult 本地处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean <span class="title function_">contentSecurityScan</span><span class="params">(String text, Integer localResult)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">apiResult</span> <span class="operator">=</span> callContentSecurityApi(text);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;ERROR&quot;</span>.equals(apiResult)) &#123;</span><br><span class="line">            <span class="comment">// api调用失败降级处理</span></span><br><span class="line">            <span class="keyword">return</span> degradeHandle(localResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;HIGH&quot;</span>.equals(apiResult)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;MIDDLE&quot;</span>.equals(apiResult)) &#123;</span><br><span class="line">            <span class="comment">// 通知审核，先发布再人工审核</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云内容安全API集成</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> api调用结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">callContentSecurityApi</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(DefaultProfile.getProfile(<span class="string">&quot;$&#123;aliyun.regionId&#125;&quot;</span>, <span class="string">&quot;$&#123;aliyun.accessKeyId&#125;&quot;</span>, <span class="string">&quot;$&#123;aliyun.accessKeySecret&#125;&quot;</span>));</span><br><span class="line">        <span class="comment">// TextScanResponse response = client.getAcsResponse(request);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 降级处理策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localResult 本地过滤结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean <span class="title function_">degradeHandle</span><span class="params">(Integer localResult)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (localResult) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">// 通知审核，先发布再人工审核</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.14软通动力一面</title>
      <link href="/Curriculum%20vitae/%E9%9D%A2%E7%BB%8F/614%E4%B8%8A%E5%8D%88%E4%B8%AD%E8%BD%AF%E5%9B%BD%E9%99%85%E4%B8%80%E9%9D%A2/"/>
      <url>/Curriculum%20vitae/%E9%9D%A2%E7%BB%8F/614%E4%B8%8A%E5%8D%88%E4%B8%AD%E8%BD%AF%E5%9B%BD%E9%99%85%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>自我介绍</p></li><li><p>重写和重载定义和区别</p></li></ol><ul><li>重写：子类重新定义父类的方法，特点是：方法名、参数、返回类型完全相同；访问修饰符不能比父类严格；只能重写非静态方法，可以用<code>@override</code>表明这是重写方法。</li><li>重载：同一类中方法名相同但参数不同的方法，特点是：方法名完全相同，参数列表必须不同，返回类型和访问修饰符可以不同。</li></ul><ol start="3"><li>集合排序的方式有哪些？</li></ol><ul><li>使用Collections工具类排序：<code>Collections.sort</code></li><li>使用List接口的sort方法：<code>list.sort()</code></li><li>Stream API排序：<code>list.stream().sorted().collect(Collectors.toList())</code></li><li>实现Comparable接口：继承Comparable接口重写compareTo方法</li><li>使用Comparator比较器：创建比较器<code>Comparator&lt;Person&gt; ageComparator = (a, b) -&gt; a.getAge() - b.getAge()</code></li><li>大数据集考虑使用并行流排序：<code>parallelStream</code></li></ul><ol start="4"><li>Java8有哪些新特性？</li></ol><ul><li>Lambda表达式：简化匿名内部类的写法</li><li>函数式接口：只有一个抽象方法的接口，可以使用<code>@FunctionalInterface</code>注解标记；<br>四大核心函数式接口：<br><code>Consumer&lt;T&gt;</code>：消费型，void accept(T t)<br><code>Supplier&lt;T&gt;</code>：供给型，T get()<br><code>Function&lt;T,R&gt;</code>：函数型，R apply(T t)<br><code>Predicate&lt;T&gt;</code>：断言型，boolean test(T t)  </li><li>方法引用：用于直接引用已有方法<br>四种形式：<br>静态方法引用：ClassName::staticMethod<br>实例方法引用：instance::method<br>特定类型的任意对象方法引用：ClassName::method<br>构造器引用：ClassName::new  </li><li>Stream API：用于处理集合数据的函数式操作，特点是不存储数据、不改变源数据、延迟执行</li><li>默认方法：允许接口包含具有实现的方法，使用<code>default</code>关键字修饰</li><li>Optional类：用于解决NullPointerException问题，容器类，可能包含或不包含非空值</li><li>新的日期时间API：<code>LocalDate</code>，<code>LocalTime</code>，<code>LocalDateTime</code>等</li><li>并行数组操作：并行排序：<code>Arrays.parallelSort()</code>、并行设置所有元素：<code>Arrays.parallelSetAll()</code>，并行累积操作：<code>Arrays.parallelPrefix()</code></li></ul><ol start="5"><li>函数式接口的应用？</li></ol><ul><li>Stream API：<code>filter</code>，<code>map</code>，<code>foreach</code></li><li>Optional操作的值处理：<code>ifPresent</code>，<code>orElseGet</code></li><li>比较器构造</li><li>多线程编程：<code>Runnable</code>接口：替代匿名内部类，<code>Callable</code>接口：带返回值的任务</li><li>模板方法设计：自定义业务逻辑封装，例如：数据导出、消息通知等</li></ul><ol start="6"><li>线程池的参数有哪些？</li></ol><ul><li><code>corePoolSize</code> (核心线程数)：线程池中保持的最小线程数量</li><li><code>maximumPoolSize</code> (最大线程数)：线程池允许创建的最大线程数量</li><li><code>keepAliveTime</code> (线程空闲时间)：非核心线程空闲时的存活时间</li><li><code>unit</code> (时间单位)：keepAliveTime的时间单位</li><li><code>workQueue</code> (工作队列)：用于保存等待执行的任务的阻塞队列<br><code>ArrayBlockingQueue</code>：有界队列<br><code>LinkedBlockingQueue</code>：无界队列(默认Integer.MAX_VALUE)<br><code>SynchronousQueue</code>：不存储元素的队列<br><code>PriorityBlockingQueue</code>：带优先级的队列  </li><li><code>threadFactory</code> (线程工厂)：用于创建新线程</li><li><code>handler</code> (拒绝策略)：当线程池和队列都饱和时的处理策略<br><code>AbortPolicy</code>(默认)：抛出RejectedExecutionException<br><code>CallerRunsPolicy</code>：由提交任务的线程直接执行<br><code>DiscardPolicy</code>：静默丢弃任务<br><code>DiscardOldestPolicy</code>：丢弃队列中最旧的任务并重试</li></ul><ol start="7"><li>线程的生命周期有哪些？</li></ol><ul><li>新建：<code>new Thread()</code></li><li>运行: <code>start()</code></li><li>阻塞等待：线程被阻塞，分为无限期等待，限期等待<code>wait()</code>，<code>join()</code>，<code>sleep()</code></li><li>终止：<code>run()</code>或<code>main()</code>正常结束，未捕获的异常导致线程终止</li></ul><ol start="8"><li><p>spring aop是什么？应用场景有哪些？<br>面向切面编程，对面向对象的一种补充，抽取与业务无关封装可重用的模块作为切面，在特定的切点做增强处理。<br>动态代理的两种方式：<br>jdk动态代理：只能代理接口方法，核心是<code>InvocationHandle</code>接口和<code>Proxy</code>类<br>cglib动态代理：不能代理final方法&#x2F;类(继承的方式实现)<br>可应用五种类型的通知：前置通知、后置通知、返回通知、异常通知、环绕通知<br>使用场景：日志处理、异常处理、权限控制、缓存处理、数据校验  </p></li><li><p>如何处理前后端校验一致性？校验过哪些东西？如何用注解的方式校验？举一个例子<br>使用相同的校验规则；一般校验：必填、长度、格式、范围、业务校验；<br>Spring Boot内置支持通过validation注解进行校验：<code>@NotNull</code>、<code>@NotBank</code>、<code>@NotEmpty</code>、<code>@Email</code>等<br>自定义注解校验：定义一个注解，用<code>@Constraint</code>标记校验器；实现校验器，实现<code>ConstraintValidator</code>接口，重写<code>isValid</code>方法；在对象属性上使用；<br>以下拉框校验为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个枚举</span></span><br><span class="line"><span class="comment">// 性别选项枚举示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">    MALE(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">    UNKNOWN(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;未知&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String label;</span><br><span class="line"></span><br><span class="line">    Gender(String value, String label) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有合法值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">validValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(values())</span><br><span class="line">                   .map(Gender::getValue)</span><br><span class="line">                   .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查值是否有效</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> validValues().contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建自定义校验注解</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = DropdownValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidDropdown &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;无效的下拉框选项&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定要校验的枚举类</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;?&gt;&gt; enumClass();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取值的方法名（默认为getValue）</span></span><br><span class="line">    String <span class="title function_">valueMethod</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;getValue&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现校验器逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DropdownValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ValidDropdown, String&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; validValues;</span><br><span class="line">    <span class="keyword">private</span> String enumName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ValidDropdown constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取枚举类</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;?&gt;&gt; enumClass = constraintAnnotation.enumClass();</span><br><span class="line">        <span class="built_in">this</span>.enumName = enumClass.getSimpleName();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过反射获取合法值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> constraintAnnotation.valueMethod();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">valueMethod</span> <span class="operator">=</span> enumClass.getMethod(methodName);</span><br><span class="line">            </span><br><span class="line">            Enum&lt;?&gt;[] enumConstants = enumClass.getEnumConstants();</span><br><span class="line">            <span class="built_in">this</span>.validValues = Arrays.stream(enumConstants)</span><br><span class="line">                                    .map(e -&gt; &#123;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            <span class="keyword">return</span> (String) valueMethod.invoke(e);</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;)</span><br><span class="line">                                    .collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;初始化下拉框校验器失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 允许空值（结合@NotNull等注解使用）</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查值是否在合法范围内</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> validValues.contains(value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">            <span class="comment">// 自定义错误消息</span></span><br><span class="line">            context.disableDefaultConstraintViolation();</span><br><span class="line">            context.buildConstraintViolationWithTemplate(</span><br><span class="line">                    String.format(<span class="string">&quot;&#x27;%s&#x27;不是有效的%s选项，合法值为: %s&quot;</span>, </span><br><span class="line">                                value, enumName, validValues))</span><br><span class="line">                   .addConstraintViolation();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在DTO中使用校验注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;性别不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ValidDropdown(enumClass = Gender.class, message = &quot;请选择有效的性别&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spring boot有哪些常用注解？<br>@SpringBootApplication、@Bean、@Component、@Configuration、@RestController、@Service、@Repository、@RequestMapping、@RequestBody、@Autowired、@Resource、@Value、@Table、@Transactional、@Aspect</p></li><li><p>避免循环引入的方式有哪些？</p></li></ol><ul><li>重构代码结构</li><li>技术解决方案<br>Setter&#x2F;Field注入替代构造器注入<br>使用@Lazy延迟加载<br>ApplicationContext主动获取<br>使用@DependsOn控制初始化顺序  </li><li>架构级解决方案<br>事件驱动架构：使用ApplicationEvent发布&#x2F;订阅机制<br>服务定位器模式：将需要引用的依赖放到一个map里</li></ul><ol start="12"><li>redis的作用？</li></ol><ul><li>特点<br>高性能缓存<br>丰富的数据类型：String、Hash、List、Set、Sorted Set、Bitmaps、HyperLog、Geospatial、Stream<br>分布式系统支持<br>持久化功能：RDB(定时快照)&#x2F;AOF(记录所有写操作)  </li><li>应用场景：会话缓存、计数器、消息队列、实时分析、地理位置、限流控制、布隆过滤器、二级索引</li></ul><ol start="13"><li><p>缓存穿透、缓存击穿、缓存雪崩？<br>缓存穿透：缓存和数据库中都没有的数据，导致数据库短时间承受大量请求而崩掉；解决方案：接口层需要做基础校验，查询后若数据库没有数据，缓存一个短有效期的key-null缓存&#x2F;使用布隆过滤器<br>缓存击穿：缓存中没有但数据库中有的数据，导致数据库短时间承受大量请求而崩掉；解决方案：热点key永不过期&#x2F;加互斥锁<br>缓存雪崩：大量缓存失效，导致数据库短时间承受大量请求而崩掉；解决方案：过期时间设置随机&#x2F;Redis高可用  </p></li><li><p>MySQL索引失效的场景有哪些？</p></li></ol><ul><li>复合索引未遵循最左前缀原则：<code>INDEX(a, b, c)；WHERE b = 1 AND c = 2</code></li><li>对索引列进行计算或函数操作：<code>WHERE YEAR(create_time) = 2023</code></li><li>使用不等于(!&#x3D; 或 &lt;&gt;)：<code>WHERE status != 1</code></li><li>使用 IS NULL&#x2F;IS NOT NULL：<code>WHERE name IS NULL</code></li><li>隐式类型转换：user_id是varchar类型，但用数字查询</li><li>字符集不匹配：表字段utf8mb4，连接使用utf8；<code>JOIN ... ON a.name = b.name</code></li><li>使用 OR 条件：<code>WHERE a = 1 OR b = 2</code></li><li>范围查询后的列失效：<code>WHERE a &gt; 1 AND b = 2</code>复合索引(a,b)中b无法使用索引</li><li>使用 NOT IN：<code>WHERE id NOT IN (1, 2, 3) </code></li><li>索引本身问题：索引选择性差&#x2F;索引列数据分布不均</li><li>MySQL优化器选择：全表扫描成本更低</li></ul><ol start="15"><li>有哪些方式可以进行SQL调优？</li></ol><ul><li>索引优化<br>合理设计索引：选择高选择性列 &amp; 复合索引顺序<br>避免索引失效<br>使用覆盖索引  </li><li>SQL优化<br>避免select *<br>Join表查询：小表驱动大表<br>子查询优化</li><li>数据库设计优化<br>合理的数据类型<br>高频查询表增加冗余字段</li><li>执行计划分析-explain<br>type：从优到差 system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL<br>key：实际使用的索引<br>rows：预估扫描行数<br>Extra：Using index(覆盖索引)、Using filesort(需要优化)  </li><li>监控持续优化<br>发现问题：通过监控&#x2F;慢查询日志定位SQL<br>分析原因：explain执行计划分析<br>指定方案：索引优化&#x2F;SQL重写&#x2F;架构调整<br>实施验证：测试环境验证<br>上线监控：灰度发布并持续监控</li></ul><ol start="16"><li>项目中遇到了哪些难点？是如何解决的？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.14软通动力一面</title>
      <link href="/Curriculum%20vitae/%E9%9D%A2%E7%BB%8F/623%E4%B8%8A%E5%8D%88%E4%B8%AD%E8%BD%AF%E5%9B%BD%E9%99%85%E4%B8%80%E9%9D%A2/"/>
      <url>/Curriculum%20vitae/%E9%9D%A2%E7%BB%8F/623%E4%B8%8A%E5%8D%88%E4%B8%AD%E8%BD%AF%E5%9B%BD%E9%99%85%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>自我介绍</p></li><li><p>讲讲HashMap和HashSet？为什么HashMap要引入红黑树？</p></li></ol><ul><li>HashMap 是 Java 中基于哈希表的 Map 接口实现，它存储键值对(key-value pairs)，允许使用 null 键和 null 值，是非同步的、无序的、非线程安全的。底层是：数组+链表+红黑树结构，可以快速访问</li><li>HashSet 是基于 HashMap 实现的 Set 集合，它只存储不重复的元素。</li><li>HashMap 在 JDK 1.8 中引入了红黑树，主要为了解决哈希冲突特别严重时的性能下降问题，因为红黑树是自平衡（黑高一致，一棵有n个节点的红黑树高度最多为2log(n+1)）的二叉查找树，能保证最坏情况下的性能</li></ul><ol start="3"><li>说一说SpringBoot的特点？如何实现自动配置（Auto-configuration）？</li></ol><ul><li>自动配置、简化依赖管理、简化部署、简化API配置</li><li>@SpringBootApplication涵盖了@EnableAutoConfiguration注解，服务启动时扫描AutoConfiguration.imports文件，2.7版本前是spring.factories文件，根据各种@Conditional条件注解过滤出符合条件的配置类，然后加载配置类中定义的Bean，通过@AutoConfigureOrder&#x2F;Before&#x2F;After控制配置顺序；内部工作原理就是：自动配置导入选择器：AutoConfigurationImportSelector处理自动配置类的加载，条件评估器：ConditionEvaluator评估所有条件注解，配置类解析：ConfigurationClassParser解析配置类，最后是Bean定义注册</li></ul><ol start="4"><li>说说SpringCloud的特点？</li></ol><ul><li>服务治理：提供服务注册与发现机制、统一配置：集中化的外部配置管理、服务通信：简化服务间调用方式、负载均衡：客户端负载均衡能力、熔断保护：防止服务雪崩的熔断机制</li></ul><ol start="5"><li>微服务项目中前端请求是怎么请求到服务的？</li></ol><ul><li>DNS解析：浏览器查询本地DNS缓存，若没有就查询DNS解析器递归查询域名服务器，直到定位到IP返回，将结构缓存</li><li>网络传输：建立TCP连接、HTTPS握手</li><li>请求到达入口层：通过负载均衡器决策路由到API网关集群</li><li>服务发现：从注册中心返回实例</li><li>负载均衡：根据负载均衡策略到对应的业务服务pod</li><li>业务服务处理：鉴权、查询等等，返回响应</li><li>响应头传播</li></ul><ol start="6"><li>Kafka的特点？如何高可用？</li></ol><ul><li>高吞吐、低延迟、分布式、高可用</li><li>leader选举机制：当Controller检测到分区Leader不可用时，会从该分区的同步副本集（ISR）中选取第一个存活副本作为新Leader；如果没有可用ISR副本且配置允许，则从所有存活副本中选择。Controller更新ZooKeeper元数据后通知集群各节点，新Leader开始接收请求，其他副本从新Leader同步数据</li><li>故障转移方案：Kafka的故障转移方案通过Controller监控Broker心跳，当检测到节点故障时，自动从受影响分区的ISR（同步副本）中选举新Leader，更新Zookeeper&#x2F;KRaft元数据并通知集群，新Leader立即接管读写请求，其他副本从新Leader同步数据，期间仅故障分区的生产请求会有短暂阻塞</li><li>副本分配策略：采用智能均衡算法，优先将分区副本均匀分布在不同的Broker和机架（若配置）上，确保数据高可用和负载均衡。创建Topic时，副本按轮询方式分配（如3副本的Topic会分布在3台不同Broker），并通过机架感知策略（broker.rack）避免同一机架存放所有副本，同时支持手动调整副本布局以满足特殊需求</li></ul><ol start="7"><li>项目中遇到了哪些难点？是如何解决的？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中读取文件内容并解析</title>
      <link href="/java/io/%E8%A7%A3%E6%9E%90Txt%E7%9A%84json/"/>
      <url>/java/io/%E8%A7%A3%E6%9E%90Txt%E7%9A%84json/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String localCity;</span><br><span class="line">        <span class="keyword">private</span> String localDistrict;</span><br><span class="line">        <span class="keyword">private</span> String localProvince;</span><br><span class="line">        <span class="keyword">private</span> String storeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;C:\\IdeaProject\\lululemon\\ambassador-hub-server\\dz-sweat-lead\\src\\main\\resources\\prodSorte.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取文件内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonContent</span> <span class="operator">=</span> readFileContent(filePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析JSON并获取Store列表</span></span><br><span class="line">            List&lt;Store&gt; storeList = parseJson(jsonContent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成并打印SQL语句</span></span><br><span class="line">            generateAndPrintSql(storeList);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;读取文件时出错: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readFileContent</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                content.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析JSON内容并返回Store列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Store&gt; <span class="title function_">parseJson</span><span class="params">(String jsonContent)</span> &#123;</span><br><span class="line">        List&lt;Store&gt; storeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析JSON</span></span><br><span class="line">        <span class="type">JsonObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JsonParser.parseString(jsonContent).getAsJsonObject();</span><br><span class="line">        <span class="type">JsonObject</span> <span class="variable">dataObject</span> <span class="operator">=</span> jsonObject.getAsJsonObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="type">JsonArray</span> <span class="variable">listArray</span> <span class="operator">=</span> dataObject.getAsJsonArray(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置Gson以处理JSON到Java对象的映射</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表，提取每个store的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listArray.size(); i++) &#123;</span><br><span class="line">            <span class="type">JsonObject</span> <span class="variable">item</span> <span class="operator">=</span> listArray.get(i).getAsJsonObject();</span><br><span class="line">            <span class="type">JsonObject</span> <span class="variable">locationCn</span> <span class="operator">=</span> item.getAsJsonObject(<span class="string">&quot;locationCn&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Store对象并设置属性</span></span><br><span class="line">            <span class="type">Store</span> <span class="variable">store</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Store</span>();</span><br><span class="line">            store.setLocalCity(locationCn.get(<span class="string">&quot;localCity&quot;</span>) != <span class="literal">null</span> ? locationCn.get(<span class="string">&quot;localCity&quot;</span>).getAsString() : <span class="literal">null</span>);</span><br><span class="line">            store.setLocalDistrict(locationCn.get(<span class="string">&quot;localDistrict&quot;</span>) != <span class="literal">null</span> ? locationCn.get(<span class="string">&quot;localDistrict&quot;</span>).getAsString() : <span class="literal">null</span>);</span><br><span class="line">            store.setLocalProvince(locationCn.get(<span class="string">&quot;localProvince&quot;</span>) != <span class="literal">null</span> ? locationCn.get(<span class="string">&quot;localProvince&quot;</span>).getAsString() : <span class="literal">null</span>);</span><br><span class="line">            store.setStoreId(locationCn.get(<span class="string">&quot;storeId&quot;</span>) != <span class="literal">null</span> ? locationCn.get(<span class="string">&quot;storeId&quot;</span>).getAsString() : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            storeList.add(store);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> storeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成并打印SQL更新语句</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateAndPrintSql</span><span class="params">(List&lt;Store&gt; storeList)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Store store : storeList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> String.format(</span><br><span class="line">                    <span class="string">&quot;UPDATE store SET province = %s, city = %s, district = %s WHERE code = %s;&quot;</span>,</span><br><span class="line">                    formatSqlValue(store.getLocalProvince()),</span><br><span class="line">                    formatSqlValue(store.getLocalCity()),</span><br><span class="line">                    formatSqlValue(store.getLocalDistrict()),</span><br><span class="line">                    formatSqlValue(store.getStoreId())</span><br><span class="line">            );</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 格式化SQL值：null值不添加引号，非null值添加引号并转义</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">formatSqlValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#x27;&quot;</span> + escapeSql(value) + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转义SQL特殊字符，防止SQL注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">escapeSql</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.x升级到SpringBoot3.x</title>
      <link href="/java/SpringBoot3.0/%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
      <url>/java/SpringBoot3.0/%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="插件版本层面"><a href="#插件版本层面" class="headerlink" title="插件版本层面"></a>插件版本层面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(&quot;org.springframework.boot&quot;) version &quot;2.7.18&quot;</span><br><span class="line">    id(&quot;io.spring.dependency-management&quot;) version &quot;1.0.15.RELEASE&quot;</span><br><span class="line">    kotlin(&quot;jvm&quot;) version &quot;1.9.0&quot;</span><br><span class="line">    kotlin(&quot;plugin.spring&quot;) version &quot;1.9.0&quot;</span><br><span class="line">    kotlin(&quot;plugin.jpa&quot;) version &quot;1.9.0&quot;</span><br><span class="line">    id(&quot;org.sonarqube&quot;) version &quot;3.3&quot;</span><br><span class="line">&#125;</span><br><span class="line">更新后</span><br><span class="line">plugins &#123;</span><br><span class="line">    id(&quot;org.springframework.boot&quot;) version &quot;3.2.4&quot;</span><br><span class="line">    id(&quot;io.spring.dependency-management&quot;) version &quot;1.1.7&quot;</span><br><span class="line">    kotlin(&quot;jvm&quot;) version &quot;1.9.22&quot;</span><br><span class="line">    kotlin(&quot;plugin.spring&quot;) version &quot;1.9.22&quot;</span><br><span class="line">    kotlin(&quot;plugin.jpa&quot;) version &quot;1.9.22&quot;</span><br><span class="line">    id(&quot;org.sonarqube&quot;) version &quot;3.3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖版本层面"><a href="#依赖版本层面" class="headerlink" title="依赖版本层面"></a>依赖版本层面</h2><ol><li>依赖关系</li></ol><ul><li>com.alibaba:easyexcel:4.0.3 需要 org.projectlombok:lombok：1.18.32+ 支持</li><li>com.github.yulichang:mybatis-plus-join-boot-starter:1.5.1 需要 com.baomidou:mybatis-plus-spring-boot3-starter:3.5.8+ 支持</li><li>com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.5.0 需要 jakarta.servlet:jakarta.servlet-api:6.00+ 支持</li><li>org.springframework.data:spring-data-jpa:3.3+ 需要 com.github.jsqlparser:jsqlparser:4.9+ 支持<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom(&quot;io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.11.0&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">org.springframework.boot 3.3.10</span><br><span class="line">kotlin 1.9.25</span><br><span class="line">implementation(&quot;io.netty:netty-handler:4.1.118.Final&quot;) 4.1.119.Final</span><br><span class="line">implementation(&quot;io.netty:netty-common:4.1.118.Final&quot;) 4.1.119.Final</span><br><span class="line">implementation(&quot;com.google.api.grpc:proto-google-common-protos:2.48.0&quot;) 2.54.1</span><br><span class="line">implementation(&quot;com.fasterxml.jackson.core:jackson-annotations:2.16.1&quot;) 2.18.3</span><br><span class="line">implementation(&quot;io.minio:minio:8.5.10&quot;) 8.5.17</span><br><span class="line">implementation(&quot;com.alibaba:easyexcel:3.3.3&quot;) 4.0.3</span><br><span class="line">implementation(&quot;org.mapstruct:mapstruct:1.5.5.Final&quot;) 1.6.3</span><br><span class="line">implementation(&quot;com.github.yulichang:mybatis-plus-join-boot-starter:1.4.10&quot;) 1.5.1</span><br><span class="line">implementation(&quot;com.baomidou:mybatis-plus-boot-starter:3.5.5&quot;) mybatis-plus-spring-boot3-starter:3.5.85&quot;</span><br><span class="line">implementation(&quot;com.github.xiaoymin:knife4j-openapi3-spring-boot-starter:4.4.0&quot;) 4.5.0</span><br><span class="line">implementation(&quot;cn.hutool:hutool-all:5.8.21&quot;) 5.8.36</span><br><span class="line">implementation(&quot;org.nokogiri:nekohtml:1.9.22.noko2&quot;)</span><br><span class="line">implementation(&quot;org.apache.tomcat.embed:tomcat-embed-websocket:9.0.99&quot;) 10.1.39</span><br><span class="line">implementation(&quot;org.apache.tomcat.embed:tomcat-embed-core:9.0.99&quot;) 10.1.39</span><br><span class="line">implementation(&quot;org.apache.thrift:libthrift:0.14.0&quot;) 0.21.0</span><br><span class="line">implementation(&quot;org.springframework:spring-mock:2.0.8&quot;)</span><br><span class="line">implementation(&quot;org.springframework.security:spring-security-openid&quot;) 5.8.16</span><br><span class="line">implementation(&quot;com.alibaba.nacos:nacos-client:2.4.3&quot;) 2.5.1</span><br><span class="line">implementation(&quot;com.aliyun.oss:aliyun-sdk-oss:3.15.2&quot;) 3.18.1</span><br><span class="line">implementation(&quot;org.codehaus.jettison:jettison:1.5.4&quot;)</span><br><span class="line">implementation(&quot;org.springframework.vault:spring-vault-core:2.3.3&quot;) 3.1.2</span><br><span class="line">implementation(&quot;com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:2021.0.4.0&quot;) 2023.0.3.2</span><br><span class="line">implementation(&quot;org.apache.httpcomponents:httpcore-nio:4.4.15&quot;) 4.4.16</span><br><span class="line">implementation(&quot;org.bitbucket.b_c:jose4j:0.9.4&quot;)</span><br><span class="line">implementation(&quot;com.aliyun:alibabacloud-eiam_developerapi20220225:1.0.5&quot;)</span><br><span class="line">implementation(&quot;xerces:xercesImpl:2.12.2&quot;)</span><br><span class="line">implementation(&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;)</span><br><span class="line">implementation(&quot;com.auth0:java-jwt:4.2.1&quot;) 4.5.0</span><br><span class="line">implementation(&quot;org.apache.poi:poi:5.2.5&quot;) 5.3.0</span><br><span class="line">implementation(&quot;org.apache.poi:poi-ooxml:5.2.5&quot;) 5.3.0</span><br><span class="line">implementation(&quot;org.apache.commons:commons-compress:1.26.0&quot;) 1.26.2</span><br><span class="line">implementation(&quot;io.github.java-diff-utils:java-diff-utils:4.12&quot;)</span><br><span class="line">implementation(&quot;org.yaml:snakeyaml:1.33&quot;) 2.2</span><br><span class="line">implementation(&quot;org.flywaydb:flyway-core&quot;)</span><br><span class="line">implementation(&quot;org.flywaydb:flyway-mysql&quot;)</span><br><span class="line">implementation(&quot;net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.42.0&quot;) 5.13.0</span><br><span class="line">implementation(&quot;net.javacrumbs.shedlock:shedlock-spring:4.42.0&quot;) 5.13.0</span><br><span class="line">implementation(&quot;org.jetbrains.kotlin:kotlin-reflect&quot;)</span><br><span class="line">implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;)</span><br><span class="line">implementation(&quot;com.lululemon.shareservice:share-service-boot:0.0.2.28&quot;) 3.0.2</span><br><span class="line">implementation(&quot;io.github.openfeign:feign-core:11.7&quot;) 13.5</span><br><span class="line">implementation(&quot;net.logstash.logback:logstash-logback-encoder:6.6&quot;) 8.0</span><br><span class="line">implementation(&quot;ch.qos.logback:logback-classic:1.2.13&quot;) 1.5.18</span><br><span class="line">implementation(&quot;ch.qos.logback:logback-core:1.2.13&quot;) 1.5.18</span><br><span class="line">implementation(&quot;io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:3.3.1&quot;)</span><br><span class="line">implementation(&quot;org.springframework.boot:spring-boot-starter-oauth2-client&quot;)</span><br><span class="line">implementation(&quot;org.springframework.security:spring-security-oauth2-client:5.7.5&quot;) 6.3.8</span><br><span class="line">implementation(&quot;com.nimbusds:oauth2-oidc-sdk:9.35&quot;) 11.23.1</span><br><span class="line">implementation(&quot;com.nimbusds:nimbus-jose-jwt:9.37.2&quot;) 10.0.2</span><br><span class="line">implementation(&quot;net.minidev:json-smart:2.4.9&quot;) 2.5.2</span><br><span class="line">implementation(&quot;org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0&quot;) 3.0.3</span><br><span class="line">implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0&quot;) 1.9.0</span><br><span class="line">implementation(&quot;commons-fileupload:commons-fileupload:1.5&quot;)</span><br><span class="line">implementation(&quot;org.jsoup:jsoup:1.16.1&quot;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="包引用层面"><a href="#包引用层面" class="headerlink" title="包引用层面"></a>包引用层面</h2><ol><li><p>部分javax包引用替换成jakarta</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.*;</span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">import</span> jakarta.mail.*;</span><br><span class="line"></span><br><span class="line">implementation(<span class="string">&quot;com.github.xiaoymin:knife4j-openapi3-spring-boot-starter:4.5.0&quot;</span>)</span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"> implementation(<span class="string">&quot;com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.5.0&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>org.springframework.web.multipart.commons.CommonsMultipartFile已被弃用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>hutool的servletUtil使用的仍是 javax.servlet，故不可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ServletUtil.write(response, content, MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line">response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line"><span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    writer = response.getWriter();</span><br><span class="line">    writer.write(content);</span><br><span class="line">    writer.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UtilException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    IoUtil.close(writer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>import org.springdoc.core.GroupedOpenApi; 替换成 import org.springdoc.core.models.GroupedOpenApi;</p></li><li><p>com.baomidou:mybatis-plus-spring-boot3-starter:3.5.9 后 com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor 被删除，<br>因此 com.baomidou:mybatis-plus-spring-boot3-starter 版本控制在3.5.8以内</p></li></ol><h2 id="代码层面"><a href="#代码层面" class="headerlink" title="代码层面"></a>代码层面</h2><ol><li><p>ResponseEntityExceptionHandler的handleMethodArgumentNotValid()方法参数定义的更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title function_">handleMethodArgumentNotValid</span><span class="params">(</span></span><br><span class="line"><span class="params">        MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleExceptionInternal(ex, <span class="literal">null</span>, headers, status, request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title function_">handleMethodArgumentNotValid</span><span class="params">(</span></span><br><span class="line"><span class="params">        MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> handleExceptionInternal(ex, <span class="literal">null</span>, headers, status, request);</span><br><span class="line">&#125;</span><br><span class="line">注意HttpStatus -&gt; HttpStatusCode</span><br></pre></td></tr></table></figure></li><li><p>PagingAndSortingRepository&lt;T, ID&gt; extends CrudRepository&lt;T, ID&gt; 不再继承 CrudRepository&lt;T, ID&gt; 而是直接继承 Repository&lt;T, ID&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>若需直接使用CRUD方法需手动继承 CrudRepository&lt;T, ID&gt; 或继承 ListCrudRepository&lt;T, ID&gt;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">userRepository</span> : PagingAndSortingRepository&lt;User, Int&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">userRepository</span> : PagingAndSortingRepository&lt;User, Int&gt;, CrudRepository&lt;User, Int&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>ResponseErrorHandler的handleError(ClientHttpResponse response)方法已荒废，推荐使用handleError(URI url, HttpMethod method, ClientHttpResponse response)但无实际影响</p></li><li><p>在 Spring Security 6.x 中，antMatchers、authorizeRequests 方法已被弃用，推荐使用 requestMatchers、authorizeHttpRequests 方法替代, 另外链式方法的调用及使用方法也被调整。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">fun <span class="title function_">filterChain</span><span class="params">(http: HttpSecurity, authenticationManager: AuthenticationManager)</span>: SecurityFilterChain &#123;</span><br><span class="line">    http.csrf().disable().cors().configurationSource(corsConfigurationSource()).and()</span><br><span class="line">        .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .antMatchers(</span><br><span class="line">            HttpMethod.GET,</span><br><span class="line">            <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/favicon.ico&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/v3/api-docs/**&quot;</span></span><br><span class="line">        ).permitAll()</span><br><span class="line">        .antMatchers(HttpMethod.GET, <span class="string">&quot;/iam-token&quot;</span>, <span class="string">&quot;/v3/api-docs&quot;</span>)</span><br><span class="line">        .permitAll()</span><br><span class="line">        .antMatchers(HttpMethod.GET, <span class="string">&quot;/actuator/health&quot;</span>)</span><br><span class="line">        .permitAll()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and().addFilter(JwtAuthorizationFilter(authenticationManager, jwtAuthorizationHandler))</span><br><span class="line">    <span class="keyword">return</span> http.build()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">fun <span class="title function_">filterChain</span><span class="params">(http: HttpSecurity, authenticationManager: AuthenticationManager)</span>: SecurityFilterChain &#123;</span><br><span class="line">    http.csrf&#123; it.disable() &#125;.cors&#123; it.configurationSource(corsConfigurationSource())&#125;</span><br><span class="line">        .exceptionHandling&#123; it.authenticationEntryPoint(authenticationEntryPoint).accessDeniedHandler(accessDeniedHandler) &#125;</span><br><span class="line">        .authorizeHttpRequests&#123;</span><br><span class="line">            it.requestMatchers(</span><br><span class="line">                HttpMethod.GET,</span><br><span class="line">                <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/favicon.ico&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/v3/api-docs/**&quot;</span></span><br><span class="line">            ).permitAll()</span><br><span class="line">                .requestMatchers(HttpMethod.GET, <span class="string">&quot;/iam-token&quot;</span>, <span class="string">&quot;/v3/api-docs&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .requestMatchers(HttpMethod.GET, <span class="string">&quot;/actuator/health&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">        &#125;</span><br><span class="line">        .sessionManagement&#123; it.sessionCreationPolicy(SessionCreationPolicy.STATELESS) &#125;</span><br><span class="line">        .addFilter(JwtAuthorizationFilter(authenticationManager, jwtAuthorizationHandler))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> http.build()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spring-web已移除 CommonsMultipartFile 类，可用spring-mock的 MockMultipartFile 替代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">val fileItem: FileItem = createFileItem(inputStream, fileName)</span><br><span class="line"><span class="keyword">return</span> CommonsMultipartFile(fileItem)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> fun <span class="title function_">createFileItem</span><span class="params">(inputStream: InputStream, fileName: String)</span>: FileItem &#123;</span><br><span class="line">    val factory: FileItemFactory = DiskFileItemFactory(<span class="number">16</span>, <span class="literal">null</span>)</span><br><span class="line">    <span class="type">val</span> <span class="variable">textFieldName</span> <span class="operator">=</span> <span class="string">&quot;file&quot;</span></span><br><span class="line">    val item: FileItem = factory.createItem(textFieldName, <span class="string">&quot;application/pdf&quot;</span>, <span class="literal">true</span>, fileName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bytesRead: Int</span><br><span class="line">    <span class="type">val</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteArray(<span class="number">8192</span>)</span><br><span class="line">    <span class="keyword">var</span> os: OutputStream? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        os = item.outputStream</span><br><span class="line">        <span class="title function_">while</span> <span class="params">(inputStream.read(buffer, <span class="number">0</span>, <span class="number">8192</span>)</span>.also &#123; bytesRead = it &#125; != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buffer, <span class="number">0</span>, bytesRead)</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">        <span class="comment">// 处理异常</span></span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Upload file failed&quot;</span>, e)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        os?.close()</span><br><span class="line">        inputStream.close()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line"><span class="type">val</span> <span class="variable">byteArray</span> <span class="operator">=</span> inputStream.readBytes()</span><br><span class="line"><span class="keyword">return</span> MockMultipartFile(</span><br><span class="line">    <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    fileName,</span><br><span class="line">    <span class="string">&quot;application/pdf&quot;</span>,</span><br><span class="line">    byteArray</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>在 JSqlParser 4.6 版本之后，InExpression 类进行了重构，rightItemsList 属性被移除了，改为使用 rightExpression 来替代。同时 ItemsList 接口也被移除了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(InExpression expr)</span> &#123;</span><br><span class="line">    <span class="type">ItemsList</span> <span class="variable">itemsList</span> <span class="operator">=</span> expr.getRightItemsList();</span><br><span class="line">    <span class="keyword">if</span> (itemsList <span class="keyword">instanceof</span> ExpressionList) &#123;</span><br><span class="line">        ((ExpressionList) itemsList).getExpressions().forEach(item -&gt; &#123;</span><br><span class="line">            parameterColumnMappingList.add(<span class="keyword">new</span> <span class="title class_">ParameterColumnMapping</span>(item.toString(), expr.getLeftExpression().toString(), ConditionEnum.IN));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变更为</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(InExpression expr)</span> &#123;</span><br><span class="line">    <span class="type">Expression</span> <span class="variable">rightExpression</span> <span class="operator">=</span> expr.getRightExpression();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rightExpression <span class="keyword">instanceof</span> ExpressionList) &#123;</span><br><span class="line">        <span class="comment">// 处理表达式列表的情况</span></span><br><span class="line">        ((ExpressionList) rightExpression).getExpressions().forEach(item -&gt; &#123;</span><br><span class="line">            parameterColumnMappingList.add(<span class="keyword">new</span> <span class="title class_">ParameterColumnMapping</span>(</span><br><span class="line">                    item.toString(),</span><br><span class="line">                    expr.getLeftExpression().toString(),</span><br><span class="line">                    ConditionEnum.IN</span><br><span class="line">            ));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理其他表达式类型</span></span><br><span class="line">        parameterColumnMappingList.add(<span class="keyword">new</span> <span class="title class_">ParameterColumnMapping</span>(</span><br><span class="line">                rightExpression.toString(),</span><br><span class="line">                expr.getLeftExpression().toString(),</span><br><span class="line">                ConditionEnum.IN</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spring Boot 3.3.10 (Hibernate 6.x) 后对枚举处理更严格，使用字符串存储枚举（推荐）&#x2F; 自定义枚举转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Enumerated(EnumType.STRING)</span> <span class="comment">// 增加注解</span></span><br><span class="line">val type: Type,</span><br></pre></td></tr></table></figure></li></ol><h2 id="注解层面"><a href="#注解层面" class="headerlink" title="注解层面"></a>注解层面</h2><ol><li><p>@Where在SpringBoot3.0被弃用<br>可以使用 @Filter 和 @FilterDef 注解来替代 @Where，@Filter 和 @FilterDef 注解提供了更灵活的方式来定义查询过滤条件。</p></li><li><p>@EnableGlobalMethodSecurity在SpringBoot3.0被弃用<br>可以使用 @EnableMethodSecurity 注解来替代 @EnableGlobalMethodSecurity。@EnableMethodSecurity 提供了更细粒度的控制和更好的扩展性。</p></li></ol><h2 id="集成第三方层面"><a href="#集成第三方层面" class="headerlink" title="集成第三方层面"></a>集成第三方层面</h2><ol><li>Spring Boot 3.0 采用了 Micrometer Tracing 来取代 OpenTracing 作为默认的分布式追踪解决方案。Micrometer Tracing 与 Brave 或者 OpenTelemetry 集成，不再使用 OpenTracing API，需要把依赖从 OpenTracing 迁移到 Micrometer Tracing<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom(<span class="string">&quot;io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.11.0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;io.opentelemetry:opentelemetry-extension-trace-propagators:1.45.0&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenTelemetryConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    fun <span class="title function_">initOpenTelemetry</span><span class="params">()</span>: OpenTelemetry &#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">sdkTracerProvider</span> <span class="operator">=</span> SdkTracerProvider.builder().build()</span><br><span class="line">        <span class="type">val</span> <span class="variable">sdk</span> <span class="operator">=</span> OpenTelemetrySdk.builder()</span><br><span class="line">            .setTracerProvider(sdkTracerProvider)</span><br><span class="line">            <span class="comment">// 如果需要 W3C 传播标准，使用下面这行替代 B3</span></span><br><span class="line">            <span class="comment">// .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance()))</span></span><br><span class="line">            .setPropagators(ContextPropagators.create(B3Propagator.injectingMultiHeaders()))</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(Thread(sdkTracerProvider::close))</span><br><span class="line">        <span class="keyword">return</span> sdk</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 去除OpenTracing相关配置</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project analysis</title>
      <link href="/Curriculum%20vitae/Project%20analysis/"/>
      <url>/Curriculum%20vitae/Project%20analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">项目介绍:</span><br><span class="line">该项目是具备用户前台小程序、后台Web管理端的微服务多模块的社区分享平台（企业小红书）；</span><br><span class="line">用户前台大致可分为：查看首页推荐页、发起帖子、消息板块、个人主页、其他板块等；</span><br><span class="line">后台web管理大致可分为：用户管理、数据统计、内容审核、内容管理、系统参数配置、其他板块等;</span><br><span class="line">主要职能:</span><br><span class="line">分布式内容存储与查询优化：通过MySQL分表策略存储内容，结合索引优化，提升查询性能。</span><br><span class="line">混合推荐策略提升互动率：融合协同过滤与热度衰减模型，实现个性化内容推荐，提升内容互动率。</span><br><span class="line">构建多层次内容审核体系：文本敏感词过滤，结合阿里云内容安全API及人工审核后台，拦截违规内容。</span><br><span class="line">设计高性能交互：包括评论结构优化、点赞/收藏缓存异步落库等，提升接口响应速度。</span><br><span class="line">实现实时通信与通知：通过消息队列解耦通知系统，设计短信防重发与频控策略，降低短信成本。</span><br><span class="line">构建积分激励体系：设计任务积分、勋章等级等成长体系，结合行为奖励机制提升用户留存率。</span><br><span class="line">关键技术：Java/Spring Cloud/Spring Boot/MySQL/ShardingSphere/Redis/Kafka/OSS。</span><br><span class="line">项目硬件架构：</span><br><span class="line">日活估算：5000+；峰值QPS：14QPS</span><br><span class="line">应用层：阿里云ECS服务器 8核32G两台弹性扩容</span><br><span class="line">数据层：阿里云RDS 4核16G</span><br><span class="line">其他服务：OSS、SLS、ARMS应用监控</span><br><span class="line">成本大概在5000/月，可处理约1500-2000并发，简单查询2000+QPS，复杂事务接近1000QPS</span><br><span class="line"></span><br><span class="line">项目介绍:</span><br><span class="line">该项目是供应链与设备全生命周期管理系统；</span><br><span class="line">设计并开发一站式供应链管理平台，集成供应商管理、合同/账单管理、设备资源调度核心模块，实现从设备申领→审批→采购→合同生成→发货的全流程自动化。</span><br><span class="line">主要职能:</span><br><span class="line">构建项目架构：基于Spring Boot + Kotlin快速构建，通过Nacos实现服务发现与动态配置管理。</span><br><span class="line">设计角色鉴权：构建多租户IAM鉴权体系集成RBAC模型与JWT，实现各接口的细粒度权限管控。</span><br><span class="line">数据安全：设计字段级AES-256-GCM加密存储方案结合KMS密钥轮换策略，降低数据泄露风险。</span><br><span class="line">链路追踪：基于OpenTelemetry构建链路追踪，日志、指标、链路三维联动，提升故障定位效率。</span><br><span class="line">核心功能开发：系统业务流程自动化的功能开发，覆盖业务触发、审批流转、数据同步、状态更新等环节。</span><br><span class="line">故障处理：主导线上故障分析与根因定位，通过日志聚合、指标关联、链路追踪等多维度数据定位并解决问题。</span><br><span class="line">关键技术：Kotlin/Spring Boot/ MySQL/Kafka/Nacos/JWT /OpenTelemetry。</span><br></pre></td></tr></table></figure><h1 id="功能解析"><a href="#功能解析" class="headerlink" title="功能解析"></a>功能解析</h1><h2 id="分布式内容存储与查询优化"><a href="#分布式内容存储与查询优化" class="headerlink" title="分布式内容存储与查询优化"></a>分布式内容存储与查询优化</h2><p>通过MySQL分表策略存储内容，结合索引优化，提升查询性能。</p><h3 id="具体实现方式"><a href="#具体实现方式" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><ol><li>MySQL分表存储<br>项目依赖配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ShardingSphere JDBC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MyBatis + Spring Boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 其他必要依赖... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>完整配置（application.yml）<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">database_post</span></span><br><span class="line">      <span class="attr">database_post:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/database_post</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">63456</span></span><br><span class="line">        <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">user_post:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">database_post.user_post_$-&gt;&#123;0..63&#125;_$-&gt;&#123;2023..2025&#125;</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">complex:</span></span><br><span class="line">              <span class="attr">sharding-columns:</span> <span class="string">user_id,create_time</span></span><br><span class="line">              <span class="attr">algorithm-class-name:</span> <span class="string">com.example.sharding.UserPostShardingAlgorithm</span></span><br><span class="line">          <span class="attr">key-generate-strategy:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">            <span class="attr">key-generator-name:</span> <span class="string">snowflake</span></span><br><span class="line">      </span><br><span class="line">      <span class="attr">key-generators:</span></span><br><span class="line">        <span class="attr">snowflake:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql.show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>实体类定义<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPost</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;          <span class="comment">// 分布式ID</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;      <span class="comment">// 分片键(user_id)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;  <span class="comment">// 分片键(create_time)</span></span><br><span class="line">    <span class="keyword">private</span> Integer likeCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>分片算法实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPostShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">ComplexKeysShardingAlgorithm</span>&lt;Date&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, </span></span><br><span class="line"><span class="params">                                       ComplexKeysShardingValue&lt;Date&gt; shardingValue)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取分片值</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> ((List&lt;Long&gt;)shardingValue.getColumnNameAndShardingValuesMap()</span><br><span class="line">                         .get(<span class="string">&quot;user_id&quot;</span>)).get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">createTime</span> <span class="operator">=</span> ((List&lt;Date&gt;)shardingValue.getColumnNameAndShardingValuesMap()</span><br><span class="line">                         .get(<span class="string">&quot;create_time&quot;</span>)).get(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算一级分片（用户ID取模）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">userShard</span> <span class="operator">=</span> Math.abs(userId.hashCode()) % <span class="number">6</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算二级分片（年份）</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.setTime(createTime);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> cal.get(Calendar.YEAR);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 匹配目标表（如：user_post_05_2024）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableSuffix</span> <span class="operator">=</span> String.format(<span class="string">&quot;_%02d_%d&quot;</span>, userShard, year);</span><br><span class="line">        <span class="keyword">return</span> availableTargetNames.stream()</span><br><span class="line">                .filter(name -&gt; name.endsWith(tableSuffix))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>发帖服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserPostMapper postMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">createPost</span><span class="params">(Long userId, String content)</span> &#123;</span><br><span class="line">        <span class="type">UserPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserPost</span>();</span><br><span class="line">        post.setUserId(userId);</span><br><span class="line">        post.setContent(content);</span><br><span class="line">        post.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        post.setLikeCount(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        postMapper.insert(post);  <span class="comment">// ID通过雪花算法自动生成</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 其他业务逻辑...</span></span><br><span class="line">        <span class="keyword">return</span> post.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> PageInfo&lt;UserPost&gt; <span class="title function_">getUserPosts</span><span class="params">(Long userId, <span class="type">int</span> pageNum, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        List&lt;UserPost&gt; posts = postMapper.selectByUser(userId, pageSize);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(posts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Mapper 接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserPostMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 插入会自动路由到正确分表</span></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO user_post(user_id, content, create_time, like_count) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;VALUES(#&#123;userId&#125;, #&#123;content&#125;, #&#123;createTime&#125;, #&#123;likeCount&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(UserPost post)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 精确查询（自动路由到单个分表）</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user_post WHERE user_id = #&#123;userId&#125; AND id = #&#123;postId&#125;&quot;)</span></span><br><span class="line">    UserPost <span class="title function_">selectByUserAndId</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;postId&quot;)</span> Long postId)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用户帖子分页查询（可能跨多个时间分表）</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user_post WHERE user_id = #&#123;userId&#125; ORDER BY create_time DESC LIMIT #&#123;limit&#125;&quot;)</span></span><br><span class="line">    List&lt;UserPost&gt; <span class="title function_">selectByUser</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="type">int</span> limit)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全表统计（会查询所有分表）</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT COUNT(*) FROM user_post&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">countAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>XML 映射文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/main/resources/mapper/UserPostMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.UserPostMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.UserPost&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;like_count&quot;</span> <span class="attr">property</span>=<span class="string">&quot;likeCount&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCreateTimeRange&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user_post </span><br><span class="line">        WHERE user_id = #&#123;userId&#125; </span><br><span class="line">        AND create_time BETWEEN #&#123;start&#125; AND #&#123;end&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>图片&#x2F;视频用OSS+CDN加速<br>前端上传文件,后端生成唯一文件名,调用阿里云OSS SDK，直接上传到OSS，返回访问URL,存储OSS URL到MySQL。<br>用户访问图片&#x2F;视频时，优先走CDN缓存。CDN 未命中时，回源到OSS拉取，并缓存到CDN节点。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 上传文件到OSS</span></span><br><span class="line"><span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;your-access-key&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;your-secret-key&quot;</span>;</span><br><span class="line"><span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKey, secretKey);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;your-bucket&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;images/&quot;</span> + UUID.randomUUID() + <span class="string">&quot;.jpg&quot;</span>;  <span class="comment">// 生成唯一文件名</span></span><br><span class="line">ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;local-file.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 返回CDN加速URL（假设CDN域名是 cdn.example.com）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cdnUrl</span> <span class="operator">=</span> <span class="string">&quot;https://cdn.example.com/&quot;</span> + objectName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 存储CDN URL到数据库</span></span><br><span class="line">articleMapper.updateCoverImage(userId, cdnUrl);</span><br></pre></td></tr></table></figure></li></ol><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><ol><li>为什么要分表，有什么依据？<br>当单表数据超过500w行或单表数据文件超过10G时，b+树索引深度增加，查询性能就会显著下降，也可能造成内存缓存失效，或者像备份恢复时间过长等运维问题。</li><li>如何设计分表的？<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 分析数据指标</span><br><span class="line">关键指标：5w+用户量，普通用户(90%)，活跃用户(10%)、头部用户(1%)，时间跨度3年，3年数据总量约4000w+</span><br><span class="line">2. 分表设计思路</span><br><span class="line">(1) 考虑点：按时间线浏览、查看特定用户主页、防止头部用户数据集中(不考虑)</span><br><span class="line">(2) 分表规划：</span><br><span class="line">  一级分片：按用户ID取模的分片算法分成6个逻辑分片</span><br><span class="line">  二级分片：每个逻辑分片按年分成2个物理表</span><br><span class="line">  总表数量：12个</span><br><span class="line">3. 技术实现细节</span><br><span class="line">  引入ShardingSphere，mybatis，配置yaml</span><br><span class="line">  实现自定义分片算法：实现ShardingSphere的ComplexKeysShardingAlgorithm接口，重写doSharding方法</span><br><span class="line">4. 扩容考虑</span><br><span class="line">  按时间线扩容，每年自动增加6个表，同一年内用户数据始终在同一分片</span><br><span class="line">5. 分布式架构的考虑</span><br><span class="line">  一主多从或多主多从；目的：实现读写分离、冷热数据分离和数据库的高可用。挑战：数据一致性的问题</span><br></pre></td></tr></table></figure></li><li>如何防止热点用户数据集中（热点问题）<br>分片策略优化：建立热点用户专用表，前置过滤器检查用户热点标记，热点用户路由到热点用户专用表，普通用户还是走常规；这种方式的优势是可以独立资源配置，针对性的索引设计<br>定义热点用户：将访问频率、发帖规模、粉丝基数作为基础指标，做分级判断<br>多级缓存架构：热点用户数据同时存入本地缓存和分布式缓存，热点用户的缓存容量更大，过期时间更短<br>监控：定时标记热点用户，统计各用户的请求量，超过一个阈值后将用户标记为热点用户，并将用户数据迁移到热点用户专用表；相对的，流量回落要移出热点组  </li><li>数据迁移时，如何保证数据一致性（最终一致性方案）<br>准备回滚方案<br>数据冻结：标记用户为待迁移状态（查询100%读旧表）<br>增量同步：标记用户为开始迁移状态，开始迁移并捕获变更事件同步到新分片（读旧表，新表校验查询）<br>双写切换：同时写入热点表和常规表，冲突时使用最新时间戳数据（读新表，旧表兜底）<br>流量切换：标记用户为完成迁移状态，逐步将读流量从100%旧库切换到100%新库<br>旧数据清除：验证无误后延迟72小时删除旧表数据  </li><li>如何实现查询和排序<br>精确查询（个人主页）：利用分片键查询，ShardingSphere已实现<br>复杂查询（管理端）：采用集成Elasticsearch搜索引擎双写同步或维护全局索引表<br>推荐页查询：定时维护TOP1000的热帖<br>二次查询：实现一个多线程并行查询的分片查询执行器，根据标签或关键字查询全局索引表获取要查询详情的记录列表(查询总数)，根据分片id分组，并行查询详情数据，合并排序返回</li></ol><h2 id="混合推荐策略提升互动率"><a href="#混合推荐策略提升互动率" class="headerlink" title="混合推荐策略提升互动率"></a>混合推荐策略提升互动率</h2><p>融合协同过滤与热度衰减模型，实现个性化内容推荐，提升内容互动率。</p><h3 id="具体实现方式-1"><a href="#具体实现方式-1" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><ol><li>方案策略：用户行为数据(分表聚合) &amp; 内容关系图(redis图数据库) &amp; 热度衰减模型(将访问频率、点赞量、评论量作为基础指标)</li><li>具体实现：</li></ol><ul><li>用户行为分析：记录用户行为（浏览、点赞、收藏、评论）设置权重，每日定时任务计算用户兴趣标签，保存在redis<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user_behavior_%s (</span><br><span class="line">    id BIGINT PRIMARY KEY,</span><br><span class="line">    user_id BIGINT COMMENT <span class="string">&#x27;行为用户ID&#x27;</span>,</span><br><span class="line">    content_id BIGINT COMMENT <span class="string">&#x27;内容ID&#x27;</span>,</span><br><span class="line">    behavior_type TINYINT COMMENT <span class="string">&#x27;1浏览 2点赞 3收藏 4评论&#x27;</span>,</span><br><span class="line">    behavior_weight <span class="title function_">DECIMAL</span><span class="params">(<span class="number">5</span>,<span class="number">2</span>)</span> COMMENT <span class="string">&#x27;行为权重&#x27;</span>,</span><br><span class="line">    created_time DATETIME,</span><br><span class="line">    INDEX <span class="title function_">idx_user</span> <span class="params">(user_id)</span>,</span><br><span class="line">    INDEX <span class="title function_">idx_content</span> <span class="params">(content_id)</span>,</span><br><span class="line">    INDEX <span class="title function_">idx_time</span> <span class="params">(created_time)</span></span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端埋点，后端记录：停留时间与兴趣度映射模型</span></span><br><span class="line"><span class="comment">// 停留时间分段阈值（秒）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] TIME_THRESHOLDS = &#123;<span class="number">5</span>, <span class="number">15</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">120</span>&#125;;</span><br><span class="line"><span class="comment">// 各分段对应的基础兴趣度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span>[] INTEREST_SCORES = &#123;<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.2</span>, <span class="number">1.5</span>, <span class="number">2.0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Double&gt; <span class="title function_">calculateUserInterest</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取用户近期行为</span></span><br><span class="line">    List&lt;Behavior&gt; behaviors = behaviorDao.getRecentBehaviors(userId, <span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按内容标签聚合权重</span></span><br><span class="line">    Map&lt;String, Double&gt; tagWeights = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Behavior behavior : behaviors) &#123;</span><br><span class="line">        <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> contentDao.getById(behavior.getContentId());</span><br><span class="line">        <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> behavior.getWeight() * timeDecay(behavior.getCreatedTime());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String tag : content.getTags()) &#123;</span><br><span class="line">            tagWeights.merge(tag, weight, Double::sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> normalize(tagWeights);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>内容关系的实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 用户对标签的兴趣度 (Sorted Set)</span><br><span class="line">user:<span class="number">123</span>:tag_weights = &#123;<span class="string">&quot;科技&quot;</span>: <span class="number">8.5</span>, <span class="string">&quot;美食&quot;</span>: <span class="number">5.2</span>&#125;</span><br><span class="line"></span><br><span class="line"># 内容的标签 (Set)</span><br><span class="line">content:<span class="number">456</span>:tags = &#123;<span class="string">&quot;科技&quot;</span>, <span class="string">&quot;编程&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"># 标签下的内容 (Sorted Set)</span><br><span class="line">tag:科技:contents = &#123;(<span class="number">456</span>, <span class="number">0.9</span>), (<span class="number">789</span>, <span class="number">0.7</span>)&#125;</span><br><span class="line"></span><br><span class="line"># 用户关系(Set):</span><br><span class="line">user:<span class="number">123</span>:following = &#123;<span class="number">456</span>, <span class="number">789</span>&#125;  # 关注的人</span><br><span class="line">user:<span class="number">123</span>:followers = &#123;<span class="number">321</span>, <span class="number">654</span>&#125;   # 粉丝</span><br><span class="line"></span><br><span class="line"># 内容-用户关系(Set):</span><br><span class="line">content:<span class="number">456</span>:liked_by = &#123;<span class="number">123</span>, <span class="number">789</span>&#125;  # 点赞用户</span><br><span class="line">content:<span class="number">456</span>:commented_by = &#123;<span class="number">123</span>&#125;   # 评论用户</span><br></pre></td></tr></table></figure></li><li>热度衰减模型：<br>热度计算公式：(点赞量 * 0.7 + 评论量 * 0.3 + 收藏量 * 0.2 + 浏览量 * 0.1) &#x2F; (1 + 衰减系数 * (当前时间 - 发布时间))<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 热度排行榜(Sorted Set + Hash) 内容ID <span class="number">123456</span>，热度<span class="number">95</span> </span><br><span class="line">content:hotness:rank <span class="number">95</span> <span class="number">123456</span></span><br><span class="line">content:hotness:rank <span class="number">94</span> <span class="number">123457</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">LIKE_WEIGHT</span> <span class="operator">=</span> <span class="number">0.7</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">COMMENT_WEIGHT</span> <span class="operator">=</span> <span class="number">0.3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">SHARE_WEIGHT</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">VIEW_WEIGHT</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">DECAY_RATE</span> <span class="operator">=</span> <span class="number">0.06</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateHotScore</span><span class="params">(Content content)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">hours</span> <span class="operator">=</span> Duration.between(content.getPublishTime(), Instant.now()).toHours();</span><br><span class="line">    <span class="type">double</span> <span class="variable">decay</span> <span class="operator">=</span> <span class="number">1</span> + DECAY_RATE * hours;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (content.getLikeCount() * LIKE_WEIGHT </span><br><span class="line">          + content.getCommentCount() * COMMENT_WEIGHT</span><br><span class="line">          + content.getViewCount() * VIEW_WEIGHT</span><br><span class="line">          + content.getShareCount() * SHARE_WEIGHT</span><br><span class="line">        ) / decay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>分级更新策略：热&#x2F;新内容每分钟计算更新；有新互动的内容基于Kafka增量更新(点赞、评论、收藏触发)；每天定时重新计算有热度的内容，30天无互动的内容热度设为0标记为冷数据不再计算<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedDelay = 1, timeUnit = TimeUnit.MINUTES)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduledUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 只更新需要频繁更新的内容(热/新内容)</span></span><br><span class="line">    List&lt;Content&gt; contentList = getNeedUpdateHotContentList()</span><br><span class="line">    contentList.forEach(content -&gt; &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">newScore</span> <span class="operator">=</span> hotScoreCalculator.calculateHotScore(content);</span><br><span class="line">        contentDao.updateHotScore(content.getId(), newScore);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于消息队列的增量更新</span></span><br><span class="line"><span class="meta">@KafkaListener(topics = &quot;content-interactions&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleInteraction</span><span class="params">(InteractionEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 只更新有互动的内容</span></span><br><span class="line">    <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> contentDao.getById(event.getContentId());</span><br><span class="line">    <span class="type">double</span> <span class="variable">newScore</span> <span class="operator">=</span> hotScoreCalculator.calculateHotScore(content);</span><br><span class="line">    contentDao.updateHotScore(content.getId(), newScore);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录最后更新时间</span></span><br><span class="line">    lastUpdateCache.put(content.getId(), System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兜底的全量更新（每天一次）</span></span><br><span class="line"><span class="meta">@Scheduled(fixedRate = 1, timeUnit = TimeUnit.DAYS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dailyFullUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Content&gt; allActive = contentDao.getAllActiveContents();</span><br><span class="line">    allActive.forEach(content -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastUpdateCache.get(content.getId()) &lt; System.currentTimeMillis() - <span class="number">24</span>*<span class="number">3600</span>*<span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">newScore</span> <span class="operator">=</span> hotScoreCalculator.calculate(content);</span><br><span class="line">            contentDao.updateHotScore(content.getId(), newScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>召回排序阶段：依照权重并行多路召回数据（兴趣标签、热门内容、社交关系）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各召回渠道的权重配置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Double&gt; RECALL_WEIGHTS = Map.of(</span><br><span class="line">    <span class="string">&quot;interest&quot;</span>, <span class="number">0.3</span>,   <span class="comment">// 兴趣标签召回</span></span><br><span class="line">    <span class="string">&quot;social&quot;</span>, <span class="number">0.2</span>,     <span class="comment">// 社交关系召回</span></span><br><span class="line">    <span class="string">&quot;hot&quot;</span>, <span class="number">0.5</span>,        <span class="comment">// 热门内容召回</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Content&gt; <span class="title function_">multiChannelRecall</span><span class="params">(Long userId, <span class="type">int</span> recallSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 并行调用各召回渠道</span></span><br><span class="line">    Map&lt;String, List&lt;Content&gt;&gt; recallResults = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    CompletableFuture.allOf(</span><br><span class="line">        CompletableFuture.runAsync(() -&gt; </span><br><span class="line">            recallResults.put(<span class="string">&quot;interest&quot;</span>, interestBasedRecall(userId, (<span class="type">int</span>)(recallSize*<span class="number">0.4</span>)))),</span><br><span class="line">        CompletableFuture.runAsync(() -&gt; </span><br><span class="line">            recallResults.put(<span class="string">&quot;social&quot;</span>, socialBasedRecall(userId, (<span class="type">int</span>)(recallSize*<span class="number">0.3</span>)))),</span><br><span class="line">        CompletableFuture.runAsync(() -&gt; </span><br><span class="line">            recallResults.put(<span class="string">&quot;hot&quot;</span>, hotBasedRecall((<span class="type">int</span>)(recallSize*<span class="number">0.3</span>))))</span><br><span class="line">    ).join();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 合并结果并去重</span></span><br><span class="line">    <span class="keyword">return</span> mergeRecallResults(recallResults, recallSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兴趣标签召回</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Content&gt; <span class="title function_">interestBasedRecall</span><span class="params">(Long userId, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取用户兴趣标签(缓存)</span></span><br><span class="line">    Set&lt;String&gt; userTags = userProfileService.getUserInterestTags(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 从内容图谱查询相关标签的内容</span></span><br><span class="line">    List&lt;Long&gt; contentIds = redisGraphService.queryContentIds(query);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 过滤已查看的数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 获取内容详情</span></span><br><span class="line">    <span class="keyword">return</span> contentService.batchGetContents(contentIds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 社交关系召回</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Content&gt; <span class="title function_">socialBasedRecall</span><span class="params">(Long userId, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取用户关注列表</span></span><br><span class="line">    List&lt;Long&gt; followings = socialService.getUserFollowings(userId);</span><br><span class="line">    <span class="comment">// 2. 收集关注用户最近互动的内容</span></span><br><span class="line">    List&lt;Long&gt; contentIds = redisGraphService.queryContentIds(query);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> contentService.batchGetContents(contentIds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 热门内容召回</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Content&gt; <span class="title function_">hotBasedRecall</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 直接从Redis热度榜获取</span></span><br><span class="line">    Set&lt;String&gt; contentIds = redisTemplate.opsForZSet()</span><br><span class="line">        .reverseRange(<span class="string">&quot;content:hotness:rank&quot;</span>, <span class="number">0</span>, size-<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> contentService.batchGetContents(</span><br><span class="line">        contentIds.stream().map(Long::parseLong).collect(Collectors.toList())</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布隆过滤器过滤已读数据</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;Long, Double&gt; <span class="title function_">filterViewed</span><span class="params">(Long userId, List&lt;Long&gt; contentIds)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (contentIds.isEmpty()) <span class="keyword">return</span> contentIds;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOOM_KEY_PREFIX + userId;</span><br><span class="line">    </span><br><span class="line">    List&lt;Boolean&gt; exists = redis.bfMExists(key, contentIds);</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Map.Entry&lt;Long, Double&gt;&gt; it = contentIds.iterator();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        it.next();</span><br><span class="line">        <span class="keyword">if</span> (exists.get(index++)) &#123;</span><br><span class="line">            it.remove(); <span class="comment">// 可能看过（有误判可能）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="相关问题-1"><a href="#相关问题-1" class="headerlink" title="相关问题"></a>相关问题</h3><ol><li>能详细解释一下你是如何融合协同过滤和热度衰减模型的吗？具体采用了什么融合策略？<br>基于用户社交关系行为推荐、用户兴趣内容推荐、热门内容推荐多路并行召回；<br>每路召回设置基础权重，动态调整权重，新用户增大热门内容权重，老用户增大兴趣内容权重；<br>使用加权混合公式按加权分数排序并对用户已查看数据去重；  </li><li>如何处理数据稀疏性问题的？<br>数据增强：用户行为分析时引入停留时间映射模型，细化用户兴趣度；<br>兴趣聚合降维处理：将用户对帖子的行为矩阵转换为用户对标签的关系矩阵；<br>动态调整召回数据权重，用户行为不同时加重热门内容推荐；  </li><li>热度衰减模型中的PV&#x2F;UV加权是如何确定的？为什么选择这样的权重比例?<br>点赞权重最高(0.7)：明确用户偏好;<br>评论次之(0.3)：反映深度参与但可能包含负面评论;<br>收藏较低(0.2)：存在”收藏不看”现象;<br>浏览最低(0.1)：最普遍但价值最低的行为;<br>衰减系数选择(0.06)：推荐系统的用户行为分析中，近期行为通常比历史行为更重要；项目中帖子中等时效性，内容生命周期大概在3天左右；0.06作为衰减因子1小时几乎无衰减，24小时热度降至40%，三天热度剩余20%；后续可以根据用户行为调参；  </li><li>如何设计并实现这个混合推荐系统的架构的？<br>数据层：Mysql分表存储；redis set存储(内容的标签&#x2F;用户关系&#x2F;内容-用户关系等)；redis Sorted Set存储(用户对标签的兴趣度&#x2F;标签下内容的热度&#x2F;热门内容排行榜等)<br>计算层：更新用户行为分析结果和内容热度-热数据每分钟更新、Kafka实时处理互动事件增量更新、每日兜底的全量更新、标记冷数据后续不再更新<br>服务层：多路并行召回数据，用加权混合公式按加权分数排序并对用户已查看数据去重  </li><li>如何处理冷启动问题？<br>注册时收集用户兴趣标签、新内容的权重更高、新内容互动更高权重、调整热门榜单新内容比例、人工后台干预</li><li>有没有考虑过加入其他推荐算法，如基于内容的推荐或深度学习模型？<br>没有实践过，但是有思考过；比如实现文本相似度判断建立内容联系；引入ai模型分析视频相似度；根据用户停留时间分析用户对内容的时长偏好等等</li><li>后续的优化考虑？<br>根据A&#x2F;B测试调整各指标权重；优化兴趣模型；</li></ol><h2 id="构建多层次内容审核体系"><a href="#构建多层次内容审核体系" class="headerlink" title="构建多层次内容审核体系"></a>构建多层次内容审核体系</h2><p>文本敏感词过滤、阿里云内容安全API识别多媒体违规内容、人工审核后台拦截违规内容</p><h3 id="具体实现方式-2"><a href="#具体实现方式-2" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><ul><li>构建策略：构建三级内容审核体系<br>本地AC自动机敏感词审核过滤 -&gt; 调用阿里云内容安全API审核 -&gt; 人工审核阶段<br>若本地AC自动机敏感词过滤过滤为高等直接拒绝发布<br>若本地AC自动机敏感词过滤为中等及以下 -&gt; 阿里云内容安全API返回为正常内容则直接发布<br>若本地AC自动机敏感词过滤为中等及以下 -&gt; 阿里云内容安全API返回为需要人工审核 -&gt; 内容可发布并通知人工审核<br>若本地AC自动机敏感词过滤为中等及以下 -&gt; 阿里云内容安全API返回为违规内容则先直接拒绝发布  </li><li>核心实现方式：<a href="../java/util/SensitiveWordFilter.md">SensitiveWordFilter.java</a></li></ul><h3 id="相关问题-2"><a href="#相关问题-2" class="headerlink" title="相关问题"></a>相关问题</h3><ol><li>敏感词过滤系统是如何实现的？<br>算法采用的是Tire树和KMP算法，在此基础上还增加了敏感词权重，用于做分级处理，减少api的调用成本<br>Tire树：每个字符是一个节点，节点包含字符、敏感等级、标记是否为单词的结尾；还做了压缩处理，合并只有一个子节点的路径节省空间<br>KMP算法：一种字符串匹配算法，关键在于部分匹配表</li></ol><h2 id="设计高性能交互"><a href="#设计高性能交互" class="headerlink" title="设计高性能交互"></a>设计高性能交互</h2><p>Redis INCR原子操作 + 定时落库，QPS 5000+时响应时间&lt;50ms</p><h3 id="具体实现方式-3"><a href="#具体实现方式-3" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><h3 id="相关问题-3"><a href="#相关问题-3" class="headerlink" title="相关问题"></a>相关问题</h3><h2 id="实现实时通信与通知"><a href="#实现实时通信与通知" class="headerlink" title="实现实时通信与通知"></a>实现实时通信与通知</h2><p>基于WebSocket长连接实现实时私信，结合Redis的Pub&#x2F;Sub解决多实例消息同步问题</p><h3 id="具体实现方式-4"><a href="#具体实现方式-4" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><h3 id="相关问题-4"><a href="#相关问题-4" class="headerlink" title="相关问题"></a>相关问题</h3><h2 id="设计最终一致性方案"><a href="#设计最终一致性方案" class="headerlink" title="设计最终一致性方案"></a>设计最终一致性方案</h2><p>积分流水表(MySQL)与Redis缓存组合方案，保证并发积分兑换业务零差错</p><h3 id="具体实现方式-5"><a href="#具体实现方式-5" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><h3 id="相关问题-5"><a href="#相关问题-5" class="headerlink" title="相关问题"></a>相关问题</h3><h2 id="异步通知队列"><a href="#异步通知队列" class="headerlink" title="异步通知队列"></a>异步通知队列</h2><p>基于Redisson RBlockingQueue实现异步通知队列，解耦通知发送避免主业务阻塞，主业务延迟无感知</p><h3 id="具体实现方式-6"><a href="#具体实现方式-6" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><h3 id="相关问题-6"><a href="#相关问题-6" class="headerlink" title="相关问题"></a>相关问题</h3><h2 id="通知防刷方案"><a href="#通知防刷方案" class="headerlink" title="通知防刷方案"></a>通知防刷方案</h2><p>通过Redis过期键实现短信&#x2F;邮件的防重发控制，结合阿里云短信API(重试+熔断)，降低短信成本</p><h3 id="具体实现方式-7"><a href="#具体实现方式-7" class="headerlink" title="具体实现方式"></a>具体实现方式</h3><h3 id="相关问题-7"><a href="#相关问题-7" class="headerlink" title="相关问题"></a>相关问题</h3>]]></content>
      
      
      <categories>
          
          <category> Curriculum vitae </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Curriculum vitae </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历</title>
      <link href="/Curriculum%20vitae/%E6%8A%80%E8%83%BD/"/>
      <url>/Curriculum%20vitae/%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="1-扎实的基础知识"><a href="#1-扎实的基础知识" class="headerlink" title="1. 扎实的基础知识"></a>1. 扎实的基础知识</h2><ul><li><strong>精通 Java 语法</strong><br>对 Java 的基本语法、数据类型、运算符、控制结构等有深入理解，能准确编写高效代码。例如，熟悉数据类型的取值范围和适用场景，正确使用条件判断、循环等结构。</li><li><strong>深入理解面向对象编程</strong><br>掌握封装、继承、多态等核心概念，能通过合理的类设计和方法封装提高代码的可维护性和扩展性。</li><li><strong>熟练掌握集合框架</strong><br>熟悉 ArrayList、LinkedList、HashMap、HashSet 等集合类的特点、使用场景和性能差异，能根据需求选择合适的数据结构。</li><li><strong>掌握异常处理</strong><br>了解 Java 异常体系，能正确捕获、处理异常，并自定义异常类以提升代码健壮性。</li><li><strong>理解多线程和并发编程</strong><br>熟悉多线程创建、同步机制，掌握线程安全实现（如 synchronized、Lock），了解并发集合类和线程池的使用，应对高并发场景。</li><li><strong>深入了解 JVM</strong><br>掌握 JVM 内存模型、垃圾回收机制、类加载原理，能进行性能调优，解决内存泄漏等问题。</li></ul><h2 id="2-数据库相关技能"><a href="#2-数据库相关技能" class="headerlink" title="2. 数据库相关技能"></a>2. 数据库相关技能</h2><ul><li><strong>熟练使用 SQL 语言</strong><br>能编写复杂 SQL 查询（多表连接、子查询、聚合函数等），优化数据操作效率。</li><li><strong>掌握数据库设计</strong><br>理解范式、索引、约束等原则，设计合理的表结构，并根据业务扩展优化数据库。</li><li><strong>熟悉数据库优化技术</strong><br>掌握索引优化、查询优化、存储过程等技术，分析慢查询并提升数据库性能。</li><li><strong>掌握至少一种 NoSQL 数据库</strong><br>熟悉 Redis、MongoDB 等 NoSQL 数据库的特点和适用场景，用于提升系统性能和扩展性。</li></ul><h2 id="3-框架和工具的使用"><a href="#3-框架和工具的使用" class="headerlink" title="3. 框架和工具的使用"></a>3. 框架和工具的使用</h2><ul><li><strong>Spring 框架</strong><br>深入理解 IoC、AOP 原理，熟练使用 Spring Boot 快速开发，整合 Spring MVC、Spring Data JPA 等模块。</li><li><strong>MyBatis 或其他 ORM 框架</strong><br>熟悉 MyBatis 映射配置、JPA等 ORM 工具。</li><li><strong>分布式框架</strong><br>了解 Dubbo、Spring Cloud 等分布式框架，实现微服务开发与部署，掌握服务注册、负载均衡等功能。</li><li><strong>缓存技术</strong><br>熟练使用 Redis 缓存热点数据，解决缓存穿透、雪崩等问题。</li><li><strong>消息队列</strong><br>掌握 RabbitMQ、Kafka 等消息队列，实现异步通信和解耦，提升系统并发能力。</li></ul><h2 id="4-架构设计能力"><a href="#4-架构设计能力" class="headerlink" title="4. 架构设计能力"></a>4. 架构设计能力</h2><ul><li><strong>系统架构设计</strong><br>根据业务需求设计系统分层、模块划分和接口，选择合适的架构模式（如微服务、事件驱动）。</li><li><strong>高并发、高可用设计</strong><br>掌握负载均衡、集群、分布式锁、分布式事务等技术，设计高性能、高可靠的系统。</li><li><strong>安全设计</strong><br>防范 SQL 注入、XSS、CSRF 等攻击，使用加密算法和访问控制确保系统安全。</li></ul><h2 id="5-运维和部署能力"><a href="#5-运维和部署能力" class="headerlink" title="5. 运维和部署能力"></a>5. 运维和部署能力</h2><ul><li><strong>熟悉 Linux 操作系统</strong><br>掌握常用 Linux 命令，进行项目部署和运维（文件操作、进程管理、网络配置等）。</li><li><strong>掌握容器技术</strong><br>熟悉 Docker 镜像打包与部署，了解 Kubernetes 容器编排，实现自动化管理。</li><li><strong>持续集成和持续部署（CI&#x2F;CD）</strong><br>使用 Jenkins、GitLab CI 等工具搭建 CI&#x2F;CD 环境，实现代码自动化构建、测试和部署。</li></ul><h2 id="6-其他软技能"><a href="#6-其他软技能" class="headerlink" title="6. 其他软技能"></a>6. 其他软技能</h2><ul><li><strong>问题解决能力</strong><br>快速分析复杂问题，定位根源并提出有效解决方案（如性能瓶颈优化）。</li><li><strong>学习能力</strong><br>持续关注 Java 技术趋势，掌握新技术和框架（如Kotlin、云原生技术、AI协作）。</li><li><strong>团队协作能力</strong><br>与团队成员高效沟通，协作完成项目开发与维护。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Curriculum vitae </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Curriculum vitae </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件读取</title>
      <link href="/java/Notification/ReadEmail/"/>
      <url>/java/Notification/ReadEmail/</url>
      
        <content type="html"><![CDATA[<ol><li><p>依赖引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置描述</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">email:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">partner.outlook.cn</span> <span class="comment"># 中国版Microsoft 365/Outlook的IMAP服务器地址</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">993</span> <span class="comment"># IMAPS标准端口，使用SSL加密连接</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">imaps</span> <span class="comment"># 使用IMAP协议并通过SSL加密</span></span><br><span class="line">  <span class="attr">trust:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 接受任何SSL证书(包括自签名证书)，生产环境中建议使用具体证书</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">ambhub@email.lululemon.cn</span> <span class="comment"># 登录邮箱地址</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用 STARTTLS 加密通信</span></span><br><span class="line">  <span class="attr">mechanisms:</span> <span class="string">XOAUTH2</span> <span class="comment"># 使用OAuth 2.0认证机制，而不是传统的用户名/密码</span></span><br><span class="line">  <span class="attr">authUrl:</span> <span class="string">https://login.partner.microsoftonline.cn</span> <span class="comment"># 中国版Azure AD的认证端点</span></span><br><span class="line">  <span class="attr">tenantId:</span> <span class="string">690f6588-dc58-4f68-9495-d564712a54dc</span> <span class="comment"># Azure AD租户ID</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">5b9abb2d-9216-4083-97db-372c54228bee</span> <span class="comment"># 客户端ID</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">u-E.AUb_G-CDxUXhu5b~m59z4Kg5xFy2O1</span> <span class="comment"># 客户端密钥</span></span><br></pre></td></tr></table></figure></li><li><p>读取示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.dz.common.utils.DateUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.mail.*;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;mail.store.protocol&quot;</span>, <span class="string">&quot;imaps&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.imaps.host&quot;</span>, <span class="string">&quot;partner.outlook.cn&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.imaps.port&quot;</span>, <span class="string">&quot;993&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.imaps.ssl.trust&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.imaps.starttls.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.imaps.auth.mechanisms&quot;</span>, <span class="string">&quot;XOAUTH2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SubjectTerm</span> <span class="variable">subjectTerm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectTerm</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">searchDate</span> <span class="operator">=</span> DateUtil.of(LocalDateTime.now(ZoneOffset.UTC).minusDays(<span class="number">2</span>));</span><br><span class="line">        <span class="type">SearchTerm</span> <span class="variable">newerThanTwoDays</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SentDateTerm</span>(ComparisonTerm.GT, searchDate);</span><br><span class="line">        <span class="type">SearchTerm</span> <span class="variable">searchTerm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AndTerm</span>(newerThanTwoDays, subjectTerm);</span><br><span class="line">        searchTerm = <span class="keyword">new</span> <span class="title class_">AndTerm</span>(searchTerm, <span class="keyword">new</span> <span class="title class_">FlagTerm</span>(<span class="keyword">new</span> <span class="title class_">Flags</span>(Flags.Flag.SEEN), <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; formMap = MapUtil.builder(<span class="string">&quot;client_id&quot;</span>, <span class="string">&quot;5b9abb2d-9216-4083-97db-372c54228bee&quot;</span>)</span><br><span class="line">                .put(<span class="string">&quot;client_secret&quot;</span>, <span class="string">&quot;u-E.AUb_G-CDxUXhu5b~m59z4Kg5xFy2O1&quot;</span>)</span><br><span class="line">                .put(<span class="string">&quot;scope&quot;</span>, <span class="string">&quot;https://partner.outlook.cn/.default&quot;</span>)</span><br><span class="line">                .put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;client_credentials&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">String</span> <span class="variable">authUrl</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s/%s/oauth2/v2.0/token&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://login.partner.microsoftonline.cn&quot;</span>, <span class="string">&quot;690f6588-dc58-4f68-9495-d564712a54dc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.post(authUrl, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(formMap));</span><br><span class="line"></span><br><span class="line">        <span class="type">Store</span> <span class="variable">store</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Folder</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 邮箱认证信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">EmailToken</span> <span class="variable">emailToken</span> <span class="operator">=</span> JSONUtil.toBean(response, EmailToken.class);</span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getDefaultInstance(props, <span class="literal">null</span>);</span><br><span class="line">            store = session.getStore(<span class="string">&quot;imaps&quot;</span>);</span><br><span class="line">            store.connect(<span class="string">&quot;ambhub@email.lululemon.cn&quot;</span>, emailToken.getAccessToken());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开收件箱</span></span><br><span class="line">            folder = store.getFolder(ReadEmailConsts.INBOX_FOLDER_KEY);</span><br><span class="line">            folder.open(Folder.READ_WRITE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取邮件列表</span></span><br><span class="line">            Message[] messages = folder.search(searchTerm);</span><br><span class="line">            System.out.println(messages.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (folder != <span class="literal">null</span>) &#123;</span><br><span class="line">                    folder.close(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (store != <span class="literal">null</span>) &#123;</span><br><span class="line">                    store.close();</span><br><span class="line">                &#125;</span><br><span class="line">                folder = <span class="literal">null</span>;</span><br><span class="line">                store = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;读取失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailToken</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;access_token&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Email </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Email </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件发送</title>
      <link href="/java/Notification/SendEmail/"/>
      <url>/java/Notification/SendEmail/</url>
      
        <content type="html"><![CDATA[<ol><li><p>依赖引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置描述</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">email:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">partner.outlook.cn</span> <span class="comment"># 中国版Microsoft 365/Outlook的IMAP服务器地址</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">587</span> <span class="comment"># 使用 SMTP 提交端口</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">smtp</span> <span class="comment"># 使用 SMTP 协议，未加密的明文传输</span></span><br><span class="line">  <span class="attr">trust:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 接受任何SSL证书(包括自签名证书)，生产环境中建议使用具体证书</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">ambhub@email.lululemon.cn</span> <span class="comment"># 登录邮箱地址</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用 STARTTLS 加密通信</span></span><br><span class="line">  <span class="attr">auth:</span> <span class="literal">true</span> <span class="comment"># 启用 SMTP 身份验证</span></span><br><span class="line">  <span class="attr">mechanisms:</span> <span class="string">XOAUTH2</span> <span class="comment"># 使用OAuth 2.0认证机制，而不是传统的用户名/密码</span></span><br><span class="line">  <span class="attr">authUrl:</span> <span class="string">https://login.partner.microsoftonline.cn</span> <span class="comment"># 中国版Azure AD的认证端点</span></span><br><span class="line">  <span class="attr">tenantId:</span> <span class="string">690f6588-dc58-4f68-9495-d564712a54dc</span> <span class="comment"># Azure AD租户ID</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">5b9abb2d-9216-4083-97db-372c54228bee</span> <span class="comment"># 客户端ID</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">u-E.AUb_G-CDxUXhu5b~m59z4Kg5xFy2O1</span> <span class="comment"># 客户端密钥</span></span><br></pre></td></tr></table></figure></li><li><p>发送示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.mail.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> jakarta.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchProviderException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.store.protocol&quot;</span>, <span class="string">&quot;smtp&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.starttls.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth.mechanisms&quot;</span>, <span class="string">&quot;XOAUTH2&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;partner.outlook.cn&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getDefaultInstance(props, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Transport</span> <span class="variable">transport</span> <span class="operator">=</span> session.getTransport();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; formMap = MapUtil.builder(<span class="string">&quot;client_id&quot;</span>, <span class="string">&quot;5b9abb2d-9216-4083-97db-372c54228bee&quot;</span>)</span><br><span class="line">                .put(<span class="string">&quot;client_secret&quot;</span>, <span class="string">&quot;u-E.AUb_G-CDxUXhu5b~m59z4Kg5xFy2O1&quot;</span>)</span><br><span class="line">                .put(<span class="string">&quot;scope&quot;</span>, <span class="string">&quot;https://partner.outlook.cn/.default&quot;</span>)</span><br><span class="line">                .put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;client_credentials&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">String</span> <span class="variable">authUrl</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s/%s/oauth2/v2.0/token&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://login.partner.microsoftonline.cn&quot;</span>, <span class="string">&quot;690f6588-dc58-4f68-9495-d564712a54dc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.post(authUrl, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(formMap));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">EmailToken</span> <span class="variable">emailToken</span> <span class="operator">=</span> JSONUtil.toBean(response, EmailToken.class);</span><br><span class="line">            transport.connect(<span class="string">&quot;ambhub@email.lululemon.cn&quot;</span>, emailToken.getAccessToken());</span><br><span class="line"></span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(session);</span><br><span class="line">            <span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            mimeMessageHelper.setFrom(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;ambhub@email.lululemon.cn&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            mimeMessageHelper.setSubject(<span class="string">&quot;【test】邮件发送测试&quot;</span>);</span><br><span class="line">            mimeMessageHelper.setTo(<span class="string">&quot;ksong6@lululemon.com&quot;</span>);</span><br><span class="line">            mimeMessageHelper.setText(<span class="string">&quot;哈哈哈&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            mimeMessage.saveChanges();</span><br><span class="line">            transport.sendMessage(mimeMessage, mimeMessage.getAllRecipients());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailToken</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;access_token&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Email </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Email </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka面试汇总</title>
      <link href="/kafka/8.%20kafka%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
      <url>/kafka/8.%20kafka%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p>什么是kafka?</p><blockquote><p>Kafka是一个由Scala和Java语言开发的，经典高吞吐量的分布式消息发布和订阅系统。</p></blockquote></li><li><p>kafka有哪些组件？</p><blockquote><ol><li>Topic（主题）：主题是 Kafka 中消息的分类单位。</li><li>Partition（分区）：分区是 Kafka 中存储消息的最小单位。</li><li>Producer（生产者）：生产者是向 Kafka 集群发布消息的客户端。</li><li>Consumer（消费者）：消费者是从 Kafka 集群中读取消息的客户端。</li><li>Consumer Group（消费者组）：消费者组是 Kafka 消费者协调和负载均衡的机制。</li><li>Broker（代理节点）：Broker 是 Kafka 集群中的服务器节点，负责接收和存储消息，并提供消息给消费者。</li><li>Kafka Controller：Controller 是 Kafka 集群中负责管理和协调 Leader 选举、分区迁移等任务的角色。</li><li>ZooKeeper：ZooKeeper 是 Kafka 的协调服务，负责管理和协调 Kafka 集群中的所有节点。</li><li>Replicas（副本）：副本是 Kafka 用于保证数据高可用性和可靠性的机制。</li><li>In-Sync Replicas (ISR)：ISR 是与 Leader 副本保持同步的一组副本。</li></ol></blockquote></li><li><p>kafka的ack的三种机制分别是什么？</p><blockquote><ol><li>0：生产者不会等待任何确认，消息一旦发送就被认为是成功的。</li><li>1：生产者会等待领导者（Leader）副本确认收到消息后才认为消息发送成功。</li><li>all&#x2F;-1：生产者会等待所有同步副本确认收到消息后才认为消息发送成功。</li></ol></blockquote></li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka优化</title>
      <link href="/kafka/7.%20kafka%E4%BC%98%E5%8C%96/"/>
      <url>/kafka/7.%20kafka%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="操作系统的选择"><a href="#操作系统的选择" class="headerlink" title="操作系统的选择"></a>操作系统的选择</h3><table><thead><tr><th>操作系统</th><th>Linux</th><th>Windows</th></tr></thead><tbody><tr><td>文件系统</td><td>高效的文件系统（如 ext4、xfs），以及零拷贝（Zero-Copy）机制</td><td>文件系统（如 NTFS）在处理Kafka的日志文件时可能会有一定的性能开销，且零拷贝支持不完善</td></tr><tr><td>工具支持</td><td>许多企业级的监控、日志和管理工具（如 Prometheus、Grafana、ELK Stack 等）也主要在 Linux 环境下运行</td><td>需要额外的配置，部分功能可能无法正常使用</td></tr><tr><td>系统资源管理</td><td>进程管理和系统资源调优工具（如 systemd、ulimit、vmstat 等），更好地调节 Kafka 的性能，如设置文件句柄限制、调整内存和 I&#x2F;O 优化参数。</td><td>资源管理较为封闭</td></tr><tr><td>兼容性和社区支持</td><td>官方新特性和优化首先发布在Linux，社区环境成熟</td><td>资源和社区支持会相对少</td></tr></tbody></table><ul><li>零拷贝机制<ul><li>传统的数据传输过程：磁盘 -&gt; 内核空间缓冲区 -&gt; 用户空间缓冲区 -&gt; 内核空间的套接字缓冲区 -&gt; 网络</li><li>kafka在数据传输时利用了Linux的<code>sendfile</code>系统调用，直接从磁盘传输到网络</li></ul></li></ul><h3 id="磁盘的选择"><a href="#磁盘的选择" class="headerlink" title="磁盘的选择"></a>磁盘的选择</h3><ul><li>kafka的存储方式为顺序读写，而机械硬盘的劣势只是随机读写慢，因此可以使用机械硬盘。</li><li>磁盘空间估算 ≈ (每日数据量 * 平均数据大小 * 副本数量) * 110% * 保存时长 * 压缩比<blockquote><p>例：日志数据每天向 kafka 发送 1 亿条数据，每条数据有两个副本防止数据丢失，数据保存两周，每条消息平均大小为 1KB，压缩比约在 0.75。<br>(100000000 * 1KB * 2) * 110% * 14 * 0.75 &#x2F; 1024 &#x2F; 1024 ≈ 2.25GB</p></blockquote></li></ul><h3 id="网络带宽"><a href="#网络带宽" class="headerlink" title="网络带宽"></a>网络带宽</h3><ul><li>若网络为万兆带宽，基本不会出现网络瓶颈。</li><li>服务器的数量 &#x3D; 每秒需要处理的数据量&#x2F;每秒服务器能接收的数据量 * 副本数<blockquote><p>例：机房为千兆网络，需要1小时内处理1TB的数据,消息的副本数为2。<br>(1 * 1024 * 1024 * 8 &#x2F; 3600) &#x2F; (1000 * 0.7 &#x2F; 3) * 2 &#x3D; 20台</p></blockquote></li></ul><h3 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h3><ul><li>建议安装Kafka的服务器节点的内存至少大于等于16G。建议CPU核数最少为16核，建议32核以上。</li></ul><h3 id="副本分配策略"><a href="#副本分配策略" class="headerlink" title="副本分配策略"></a>副本分配策略</h3><ul><li>通过副本分区策略合理分配副本分区保证高可用性。</li></ul><h3 id="故障转移方案"><a href="#故障转移方案" class="headerlink" title="故障转移方案"></a>故障转移方案</h3><ul><li>它主要依赖于Kafka的分区副本（Replica）机制和ZooKeeper的协调服务来实现，当Kafka集群中的某个节点（Broker）发生故障时，<br>Kafka能够通过故障转移机制将受影响的分区Leader切换到其他副本上，继续提供服务，从而避免数据丢失和服务中断。故障转移过程：<ol><li>ZooKeeper检测故障：当一个Broker节点无法在Zookeeper中维持心跳时，Zookeeper会将其标为失效。</li><li>选举新的leader：Kafka Controller在ISR中选举一个新的Leader，选举完成后更新集群元数据。</li><li>客户端重新连接：生产者和消费者会自动根据更新的元数据信息，连接到新的Leader副本，继续数据的生产和消费。</li></ol></li><li>通过配置副本数量<code>replication.factor</code>和配置<code>min.insync.replicas</code>在性能和数据安全之间取得平衡。</li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka消费数据</title>
      <link href="/kafka/6.%20kafka%E6%B6%88%E8%B4%B9%E6%95%B0%E6%8D%AE/"/>
      <url>/kafka/6.%20kafka%E6%B6%88%E8%B4%B9%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h3><ul><li>消费数据的方式：由消费者根据自身的消费能力拉取数据。</li><li>消费者组：如果主题分区的数据过多，消费时间就变长，数据需要长时间存储，对资源压力大，<br>因此需要对消费者进行横向伸缩，将多个消费者作为一个消费整体，就称为消费者组。</li><li>组协调器Coordinator：消费者需要加入或从消费者组中脱离，就需要专门的组件处理，这个组件就称为消费者组协调器。</li></ul><h3 id="消费者分配策略"><a href="#消费者分配策略" class="headerlink" title="消费者分配策略"></a>消费者分配策略</h3><ul><li>当消费者组中存在多个消费者，需要消费多个主题分区，消费者如何分配分区就需要消费者分配策略。<br>需要注意：<code>一个消费者可以消费多个主题分区，一个主题分区只能被组中一个消费者消费</code>。</li><li>消费者组中也存在Leader和Follower消费者，第一个加入消费者组的消费者就是Leader，分配策略由消费者Leader决定。</li><li>指定分配策略流程：<ol><li>消费者设定group.id后向负载最小的Broker节点发送FIND_COORDINATOR请求查找消费者组协调器。<br>消费者组协调器定位规则：<code>partition = hash(consumer_group_id) % _consumer_offsets(消费者组元数据的主题分区数量默认50)</code></li><li>消费者向协调器发送JOIN_GROUP请求加入消费者组。如果这是该消费者组加入的第一个消费者，成为Leader消费者。<br>如果组内有其他消费者，则会等待所有消费者都发送JOIN_GROUP请求，从而触发组的再平衡，并从中选出第一个消费者作为Leader。</li><li>协调器响应JOIN_GROUP请求，Leader消费者在接收到响应后，会根据分区分配策略生成分区分配方案，并通过SYNC_GROUP请求将其提交给协调器。</li><li>协调器通知所有成员新的分配方案，消费者成员根据分配方案消费数据。</li></ol></li><li>常用分配策略：<ol><li>RoundRobinAssignor(轮询分配策略)：消费组成员有一个自动生成的UUID作为MemberId,轮询分配策略根据MemberId对消费者成员进行排序，<br>根据主题名称对主题分区排序，将主题分区轮询分配给消费者成员（消费者未订阅主题会跳过）。</li><li>RangeAssignor(范围分配策略)：根据每个主题的分区数计算出每个消费者应平均分配的分区数量，尽可能平均分配到各个消费者，平均后多出的向前补齐，<br>若主题多的情况，仍不能平均，排在前的消费者负载较多。</li><li>StickyAssignor(粘性分区策略)：当有消费者加入或脱离消费者组时，对分区进行重新分配，且尽可能保证消费者原有的分区不变。</li><li>CooperativeStickyAssignor：前三种策略都会让当前所有消费者释放当前分区，关闭连接，资源清理，重新加入组，等待重新分配，<br>CooperativeStickyAssignor在StickyAssignor粘性分配策略的基础上优化分配过程，消费者逐步释放分区，等待其他消费者接收后再释放部分分区，从而减少消费的停顿时间。</li></ol></li></ul><h3 id="消费偏移量Offset"><a href="#消费偏移量Offset" class="headerlink" title="消费偏移量Offset"></a>消费偏移量Offset</h3><p>消费者消费数据时，若未指定消费主体偏移量，会从当前主题最新的数据偏移位置读取，从而无法读取在此之前生产的数据。</p><ul><li>起始偏移量<code>auto.offset.reset</code>:<ul><li>earliest：如果没有指定偏移量消费，从头开始消费数据。</li><li>latest(默认)：如果没有指定偏移量消费，消费到连接topic后，新产生的数据。</li><li>none：如果没有指定偏移量消费，抛出一个异常。</li></ul></li><li>指定偏移量消费：使用<code>seek(分区，offset)</code>方式指定偏移量消费。</li><li>偏移量提交：消费者可以提交偏移量，进行重启后根据提交的偏移量进行消费，此时<code>auto.offset.reset</code>参数无效。<ul><li>自动提交：消费者客户端API周期性的将消费的偏移量提交到Kafka中，周期默认5000ms。单位时间内数据消费过多未提交，消费者重启后会重复消费数据。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">true</span>);</span><br><span class="line">configMap.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li>手动提交：消费者消费完数据后，自行通过 API进行提交。需禁用自动提交。<ul><li>异步提交：发送偏移量提交请求后，可继续消费数据无需等待提交确认，可能提交失败安全性较低，消费性能较高。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line">KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;String, String&gt;(configMap);</span><br><span class="line">consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">consumer.commitAsync();</span><br></pre></td></tr></table></figure></li><li>同步提交：发送偏移量提交请求后，等待提交确认响应后才能继续消费数据，提交失败，会进行重试处理，消费效率较低，安全性高。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line">KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;String, String&gt;(configMap);</span><br><span class="line">consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">consumer.commitSync();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>消费者事务：消费者消费消息时，确保消息的处理和提交偏移量作为一个原子操作完成。确保要么所有操作成功，要么回滚所有操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者配置</span></span><br><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 隔离级别：已提交读，读取已经提交事务成功的数据（默认）</span></span><br><span class="line">configMap.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, <span class="string">&quot;read_committed&quot;</span>);</span><br><span class="line"><span class="comment">// 隔离级别：未提交读，读取已经提交事务成功和未提交事务成功的数据</span></span><br><span class="line"><span class="comment">// configMap.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, &quot;read_uncommitted&quot;);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="消费数据流程"><a href="#消费数据流程" class="headerlink" title="消费数据流程"></a>消费数据流程</h3><ol><li>消费者订阅主题：通过调用subscribe()方法订阅一个或多个主题。</li><li>分区分配：消费者协调器根据消费者组内的消费者数量和主题的分区数量，决定将哪些分区分配给哪个消费者。</li><li>发送JOIN_GROUP请求通知消费者协调器自己已加入该组。</li><li>消费者协调器在所有消费者都发送了JOIN_GROUP请求后，Leader消费者确定分区分配方案，消费者协调器通过SyncGroup请求将分区分配方案发送给各个消费者。</li><li>消费者读取偏移量：首次启动或没有可用的偏移量记录，消费者会根据配置的<code>auto.offset.reset</code>参数读取。如果有已提交的偏移量，消费者将从该偏移量开始读取。</li><li>发送FETCH请求：消费者发送FETCH请求给分区的Broker主节点。</li><li>Broker节点处理FETCH请求：根据请求中的偏移量，从对应的分区日志文件中读取消息封装到Fetch响应中返回给消费者。</li><li>消费者处理Fetch响应后根据配置的<code>enable.auto.commit</code>参数决定是否自动提交偏移量。</li><li>消费者不断地发送Fetch请求拉取数据，形成一个循环流程。在这个过程中，消费者还会定期(默认3s)向协调者发送Heartbeat请求以维持会话。</li><li>消费者再平衡：消费者组中有消费者加入或脱离，消费者协调器会触发再平衡过程（Rebalance），重新分配分区给消费者，消费者需要重新获取新的分区偏移量，继续执行数据拉取流程。</li></ol>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka存储数据</title>
      <link href="/kafka/5.%20kafka%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"/>
      <url>/kafka/5.%20kafka%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="存储数据流程"><a href="#存储数据流程" class="headerlink" title="存储数据流程"></a>存储数据流程</h2><ol><li>ACKS校验</li><li>内部主题校验：Kafka为了管理的需要，创建了2个内部主题，用于事务处理的__transaction_state内部主题和用于处理消费者偏移量的__consumer_offsets内部主题，<br>生产者无法对这两个主题生产数据，在存储数据之前，需要对主题名称进行校验有效性校验。</li><li>ACKS应答及副本数量关系校验：当生产者Producer要求的数据ACKS应答为-1时，需要对ISR列表中的副本数量进行约束，至少不能少于2个。</li><li>日志文件滚动判断：<blockquote><p>副本数据文件并不是一个完整的大的数据文件，而是根据某些条件分成很多的小文件，每个小文件我们称之为文件段。</p></blockquote></li></ol><ul><li><code>log.segment.bytes</code>(默认1G)文件字节分段大小：当日志段剩余容量无法容纳新消息集合，日志文件就会滚动生产新的。</li><li><code>log.roll.ms</code>(默认null),<code>log.roll.hours</code>数据停留时间(默认7天)：时间间隔达到阈值，日志文件就会滚动生产新的。</li><li>索引文件或时间索引文件满了，日志文件就会滚动生产新的。</li></ul><ol start="5"><li>请求数据重复性校验：数据重复问题。</li><li>请求数据序列号校验：数据乱序问题。</li><li>数据存储：数据通过LogSegment中FileChannel对象。将数据写入日志文件，写入完成后，更新当前日志文件的数据偏移量。</li></ol><h2 id="存储文件类型"><a href="#存储文件类型" class="headerlink" title="存储文件类型"></a>存储文件类型</h2><ul><li>.log数据日志文件，文件名称为20位的数字字符串值为当前日志文件起始数据的偏移量。</li><li>.index数据索引文件，保存逻辑偏移量和物理偏移量位置的关系，<code>log.index.interval.bytes</code>(默认4K)记录索引日志数据大小阈值。</li><li>.timeindex数据时间索引文件,保存时间戳和偏移量的关系。</li></ul><h2 id="数据刷写"><a href="#数据刷写" class="headerlink" title="数据刷写"></a>数据刷写</h2><p>Linux系统中，当把数据写入文件系统后，数据在PageCache(页缓冲)中，暂未刷写到磁盘上，操作系统宕机数据就会丢失。</p><ul><li>可以调用fsync强制刷盘</li><li>后台线程定时刷盘</li><li>调整Kafka配置参数(不推荐，可靠性应该通过副本同步来保证)<ul><li><code>log.flush.interval.messages</code>：达到消息数量时，会将数据flush到日志文件中。</li><li><code>log.flush.interval.ms</code>：间隔多少时间(ms)，执行一次强制的flush操作。</li><li><code>flush.scheduler.interval.ms</code>：所有日志刷新到磁盘的频率。</li></ul></li></ul><h2 id="数据定位"><a href="#数据定位" class="headerlink" title="数据定位"></a>数据定位</h2><ol><li>根据数据时间索引文件获取offset偏移量</li><li>根据数据索引文件获取position,索引文件中的offset不一定是连续的，所以也称为稀疏索引</li><li>根据position定位，计算方式 position &#x3D; 上一条的position + 上一条的文件字节大小</li></ol><h2 id="副本同步"><a href="#副本同步" class="headerlink" title="副本同步"></a>副本同步</h2><p>分区副本分为Leader副本和Follower副本，Follower副本主动同步Leader副本中的数据写入自己的本地日志称为副本同步。</p><ul><li>启动数据同步线程：创建主题时，根据副本分配策略向指定的Broker节点发出请求，将副本节点设置为Leader或Follower,<br>Follower节点被设置时启动数据同步线程ReplicaFetcherThread,从Leader副本节点同步数据，线程重复以下两个操作：<ul><li>截断(truncate)：当分区存在Leader Epoch值时，会将副本的本地日志截断到Leader Epoch对应的最新位移处；否则使用高水位机制，将日志截断到高水位值处。</li><li>抓取(fetch)：向Leader同步最新的数据。</li></ul></li><li>生成数据同步请求：要周期地向Leader节点发送FETCH请求同步最新的数据。等待Leader节点的响应的过程中，会阻塞当前同步数据线程。</li><li>处理数据响应：Leader副本返回的响应数据中包含多个分区数据，当前副本会遍历每一个分区，将分区数据写入数据文件中。</li><li>更新数据偏移量：Leader副本返回的响应数据中包含和偏移量相关的数据HW和LSO，副本需要根据场景对Leader副本返回的不同偏移量进行更新。<blockquote><p>Offset：Kafka的每个分区的数据都是有序的，数据偏移量就是Kafka在保存数据时，用于快速定位数据的标识，类似于Java中数组的索引，从0开始。<br>LSO：起始偏移量（Log Start Offset），每个分区副本都有起始偏移量，用于表示副本数据的起始偏移位置，初始值为 0。<br>LEO：日志末端位移（Log End Offset），表示下一条待写入消息的Offset，每个分区副本都会记录自己的LEO。Follower副本可读取到Leader副本LEO值以下的所有消息。<br>HW：高水位值（High Watermark），定义了消息可见性，标识了一个特定的消息偏移量（Offset），消费者只能拉取到这个水位Offset之前的消息，同时HW可以帮助Kafka完成副本同步。</p></blockquote></li></ul><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h2><ul><li>Kafka引入了高水位HW机制，消费者只能拉取到HW之前的消息，即数据最少的那个副本的最后数据位置之前的消息，这样即使Leader副本宕机，消费者消费新的Leader副本消息时仍认为数据一致；<br>同时需要根据当前Leader副本的数据偏移量值对其他副本进行数据截断；</li><li>高水位线的变化：<ol><li>所有副本和偏移量相关的初始值都是0</li><li>Leader副本收到生产者的数据后更新自身偏移量信息</li><li>Follower副本发送同步数据请求，同时将自身的LEO值传递给Leader副本，Leader副本根据所有副本的LEO值更新HW。</li><li>Leader副本将数据发送给Follower副本，同时也会将HW一起发送，Follower副本收到数据后更新自身偏移量信息</li><li>Leader副本收到生产者的数据后更新自身偏移量信息…</li></ol></li><li>ISR（In-Sync Replicas）伸缩：<ul><li>副本管理器组件（ReplicaManager）周期性地查看ISR中的副本集合是否需要收缩，即把ISR副本集合中与Leader差距过大的副本移除的过程。</li><li>副本管理器组件（ReplicaManager）向集群Broker节点传播ISR的变更。每间隔2500毫秒就会根据条件，将ISR变化的结果传递给集群的其他Broker节点。</li></ul></li></ul><h2 id="日志清理策略"><a href="#日志清理策略" class="headerlink" title="日志清理策略"></a>日志清理策略</h2>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka生产数据</title>
      <link href="/kafka/4.%20kafka%E7%94%9F%E4%BA%A7%E6%95%B0%E6%8D%AE/"/>
      <url>/kafka/4.%20kafka%E7%94%9F%E4%BA%A7%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="ProducerRecord生产者数据"><a href="#ProducerRecord生产者数据" class="headerlink" title="ProducerRecord生产者数据"></a>ProducerRecord生产者数据</h3><ul><li>参数<ul><li>topic：记录将附加到的主题</li><li>key：将包含在记录中的密钥</li><li>value：记录内容</li><li>partition：应将记录发送到的分区</li><li>timestamp：记录的时间戳，以毫秒为单位。如果为 null，则生产者将使用 System<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, Integer partition, K key, V value)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, K key, V value)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, V value)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Interceptors拦截器列表"><a href="#Interceptors拦截器列表" class="headerlink" title="Interceptors拦截器列表"></a>Interceptors拦截器列表</h3><p>当客户端将记录发送到 KafkaProducer 时，在键和值被序列化之前，对生产者数据进行拦截处理转换，根据拦截器的声明顺序进行拦截；<br>从第一个拦截器的 onSend（） 返回的 ProducerRecord 被传递给拦截器链中的第二个拦截器 onSend（），依此类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;RecordMetadata&gt; <span class="title function_">send</span><span class="params">(ProducerRecord&lt;K, V&gt; record, Callback callback)</span> &#123;</span><br><span class="line">    ProducerRecord&lt;K, V&gt; interceptedRecord = <span class="built_in">this</span>.interceptors.onSend(record);</span><br><span class="line">    <span class="keyword">return</span> doSend(interceptedRecord, callback);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ProducerRecord&lt;K, V&gt; <span class="title function_">onSend</span><span class="params">(ProducerRecord&lt;K, V&gt; record)</span> &#123;</span><br><span class="line">    ProducerRecord&lt;K, V&gt; interceptRecord = record;</span><br><span class="line">    <span class="keyword">for</span> (ProducerInterceptor&lt;K, V&gt; interceptor : <span class="built_in">this</span>.interceptors) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            interceptRecord = interceptor.onSend(interceptRecord);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 此方法不会引发异常。任何侦听器方法引发的异常都会被捕获并忽略</span></span><br><span class="line">            <span class="keyword">if</span> (record != <span class="literal">null</span>)</span><br><span class="line">                log.warn(<span class="string">&quot;Error executing interceptor onSend callback for topic: &#123;&#125;, partition: &#123;&#125;&quot;</span>, record.topic(), record.partition(), e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                log.warn(<span class="string">&quot;Error executing interceptor onSend callback&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interceptRecord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> * 1. 实现ProducerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2. 定义泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueInterceptorTest</span> <span class="keyword">implements</span> <span class="title class_">ProducerInterceptor</span>&lt;String, String&gt; &#123;</span><br><span class="line">    <span class="comment">// 发送数据时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title function_">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> &#123;<span class="keyword">return</span> record;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据完毕，服务器返回响应时会调用此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者对象关闭时调用此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建生产者对象时调用此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式,在producer配置中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, ValueInterceptorTest.class.getName());</span><br></pre></td></tr></table></figure><h3 id="Serializer序列化"><a href="#Serializer序列化" class="headerlink" title="Serializer序列化"></a>Serializer序列化</h3><ul><li>写操作时，序列化的配置是必需的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">serializedKey = keySerializer.serialize(record.topic(), record.headers(), record.key());</span><br><span class="line">serializedValue = valueSerializer.serialize(record.topic(), record.headers(), record.value());</span><br><span class="line"><span class="keyword">default</span> <span class="type">byte</span>[] serialize(String topic, Headers headers, T data) &#123;</span><br><span class="line">    <span class="keyword">return</span> serialize(topic, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] serialize(String topic, String data) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> data.getBytes(encoding);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(<span class="string">&quot;Error when serializing string to byte[] due to unsupported encoding &quot;</span> + encoding);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>自定义序列化<br>需要实现org.apache.kafka.common.serialization.Serializer接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义序列化</span></span><br><span class="line"><span class="comment"> * 1. 实现Serializer接口</span></span><br><span class="line"><span class="comment"> * 2. 重写方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializerTest</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(String topic, String data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用方式,在producer配置中使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, SerializerTest.class.getName());</span><br><span class="line">        configMap.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, SerializerTest.class.getName());</span><br></pre></td></tr></table></figure></li></ul><h3 id="Partitioner分区器"><a href="#Partitioner分区器" class="headerlink" title="Partitioner分区器"></a>Partitioner分区器</h3><ul><li>通过MetadataCache元数据缓存获取到分区信息</li><li>计算分区<ul><li>如果写入记录有 Partition 直接返回</li><li>是否定义了分区器，若有通过定义的分区器计算</li><li>key是存在且<code>partitioner.ignore.keys</code>为false(默认为false)</li><li>若key不存在，在accumulator数据收集器中追加数据补充，根据当前节点主题的负载情况动态的获取分区编号<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(ProducerRecord&lt;K, V&gt; record, <span class="type">byte</span>[] serializedKey, <span class="type">byte</span>[] serializedValue, Cluster cluster)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (record.partition() != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> record.partition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (partitioner != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">customPartition</span> <span class="operator">=</span> partitioner.partition(</span><br><span class="line">            record.topic(), record.key(), serializedKey, record.value(), serializedValue, cluster);</span><br><span class="line">        <span class="keyword">if</span> (customPartition &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(</span><br><span class="line">                <span class="string">&quot;The partitioner generated an invalid partition number: %d. Partition number should always be non-negative.&quot;</span>, customPartition));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> customPartition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serializedKey != <span class="literal">null</span> &amp;&amp; !partitionerIgnoreKeys) &#123;</span><br><span class="line">        <span class="comment">// hash the keyBytes to choose a partition</span></span><br><span class="line">        <span class="keyword">return</span> BuiltInPartitioner.partitionForKey(serializedKey, cluster.partitionsForTopic(record.topic()).size());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RecordMetadata.UNKNOWN_PARTITION;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MurmurHash2 是一种高效的、非加密的哈希函数</span></span><br><span class="line"><span class="comment">// 用于计算给定消息键的哈希值，然后根据哈希值对分区数取模确定消息应该发送到的分区。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partitionForKey</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] serializedKey, <span class="keyword">final</span> <span class="type">int</span> numPartitions)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Utils.toPositive(Utils.murmur2(serializedKey)) % numPartitions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据收集器追加数据</span></span><br><span class="line">RecordAccumulator.<span class="type">RecordAppendResult</span> <span class="variable">result</span> <span class="operator">=</span> accumulator.append(record.topic(), partition, timestamp, serializedKey, </span><br><span class="line">serializedValue, headers, appendCallbacks, remainingWaitMs, abortOnNewBatch, nowMs, cluster);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RecordAppendResult <span class="title function_">append</span><span class="params">(...)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (partition == RecordMetadata.UNKNOWN_PARTITION) &#123;</span><br><span class="line">        partitionInfo = topicInfo.builtInPartitioner.peekCurrentPartitionInfo(cluster);</span><br><span class="line">        effectivePartition = partitionInfo.partition();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        partitionInfo = <span class="literal">null</span>;</span><br><span class="line">        effectivePartition = partition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据分区负载统计信息计算主题的下一个分区</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">nextPartition</span><span class="params">(Cluster cluster)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> mockRandom != <span class="literal">null</span> ? mockRandom.get() : Utils.toPositive(ThreadLocalRandom.current().nextInt());</span><br><span class="line"></span><br><span class="line">    <span class="type">PartitionLoadStats</span> <span class="variable">partitionLoadStats</span> <span class="operator">=</span> <span class="built_in">this</span>.partitionLoadStats;</span><br><span class="line">    <span class="type">int</span> partition;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若没有分区负载情况，随机选择分区，（粘性分区策略）后续数据会尽可能往改分区添加，直至达到批次阈值batch.size = 16k</span></span><br><span class="line">    <span class="keyword">if</span> (partitionLoadStats == <span class="literal">null</span>) &#123;</span><br><span class="line">        List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            partition = availablePartitions.get(random % availablePartitions.size()).partition();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">            partition = random % partitions.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> partitionLoadStats.length &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] cumulativeFrequencyTable = partitionLoadStats.cumulativeFrequencyTable;</span><br><span class="line">        <span class="comment">// 根据使用频率生成一个权重</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">weightedRandom</span> <span class="operator">=</span> random % cumulativeFrequencyTable[partitionLoadStats.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过二分查找法从当前的负载情况中找到与权重相近的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">searchResult</span> <span class="operator">=</span> Arrays.binarySearch(cumulativeFrequencyTable, <span class="number">0</span>, partitionLoadStats.length, weightedRandom);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据获取的值获取发送的分区</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">partitionIndex</span> <span class="operator">=</span> Math.abs(searchResult + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">assert</span> partitionIndex &lt; partitionLoadStats.length;</span><br><span class="line">        partition = partitionLoadStats.partitionIds[partitionIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;Switching to partition &#123;&#125; in topic &#123;&#125;&quot;</span>, partition, topic);</span><br><span class="line">    <span class="keyword">return</span> partition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>自定义分区器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分区器</span></span><br><span class="line"><span class="comment"> * 1. 实现Partitioner接口</span></span><br><span class="line"><span class="comment"> * 2. 重写方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartitionerTest</span> <span class="keyword">implements</span> <span class="title class_">Partitioner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(String topic, Object key, <span class="type">byte</span>[] keyBytes, Object value, <span class="type">byte</span>[] valueBytes, Cluster cluster)</span> &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用方式,在producer配置中使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, PartitionerTest.class.getName());</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>例如：  </p><ul><li>max.request.size &#x3D; 1m</li><li>buffer.memory &#x3D; 32m<br>若数据校验通过将数据发送到RecordAccumulator数据收集器（数据缓冲区）。</li></ul><h3 id="RecordAccumulator数据收集器（缓冲区）"><a href="#RecordAccumulator数据收集器（缓冲区）" class="headerlink" title="RecordAccumulator数据收集器（缓冲区）"></a>RecordAccumulator数据收集器（缓冲区）</h3><ul><li>消息分配到批次：生产者发送消息时，消息会被添加到RecordAccumulator中的一个批次（batch）中。每个主题的每个分区都有一个独立的批次队列。</li><li>创建新批次：批次数据达到阈值<code>batch.size</code>(默认16k)，kafka底层会将该批次对象锁定关闭，并创建新的批次。</li><li>消息缓存：生产者配置的<code>buffer.memory</code>(默认32m)参数决定了RecordAccumulator可以使用的最大内存。</li><li>批次发送：RecordAccumulator定期检查批次队列，并将已满或超时的批次通过Sender发送线程发送到kafka Broker。<code>linger.ms</code>(默认0ms)配置发送前等待时间。</li><li>重试机制：如果发送失败，RecordAccumulator会将批次重新添加到队列中，并按照生产者配置的<code>retries</code>(默认2147483647)和<code>retry.backoff.ms</code>(默认100ms)参数进行重试。</li></ul><h3 id="Sender发送线程"><a href="#Sender发送线程" class="headerlink" title="Sender发送线程"></a>Sender发送线程</h3><ul><li>获取批次：Sender线程定期从RecordAccumulator中获取已经满或超时的批次，并根据Broker节点重新整合。</li><li>发送批次：Sender线程通过网络将其发送到目标Broker。</li><li>处理响应：成功响应时Sender线程会更新偏移量并从RecordAccumulator中移除已发送的批次，失败响应时Sender线程会根据配置的重试策略将批次重新添加到RecordAccumulator中。</li><li>错误处理和重试：按照生产者配置的<code>retries</code>(默认2147483647)和<code>retry.backoff.ms</code>(默认100ms)参数进行重新尝试发送失败的批次。</li></ul><h3 id="InFlightRequests在途请求"><a href="#InFlightRequests在途请求" class="headerlink" title="InFlightRequests在途请求"></a>InFlightRequests在途请求</h3><ul><li>请求添加：当Sender线程将一个批次发送到kafka Broker时，会将该请求的信息添加到InFlightRequests中。</li><li>请求追踪：InFlightRequests通过内部的数据结构（通常是一个基于主题、分区的映射）来管理和追踪所有在途请求。</li><li>并发控制：InFlightRequests使用<code>max.in.flight.requests.per.connection</code>(默认5)配置参数来限制每个连接上未完成请求的最大数量。<br>如果在途请求数量达到限制，新的请求将被阻止，直到已有请求得到响应。</li><li>处理响应：当kafka Broker响应某个请求时，Sender线程会从InFlightRequests中移除该请求。</li><li>重试机制：如果某个请求在规定时间内未能收到响应，或者收到的响应表明请求失败，InFlightRequests会标记该请求为需要重试。</li></ul><h3 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h3><ul><li>callback<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步发送</span></span><br><span class="line">producer.send(record, <span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步发送</span></span><br><span class="line">Future&lt;RecordMetadata&gt; send = producer.send(record, <span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">send.get();</span><br></pre></td></tr></table></figure></li><li><code>acks</code>：控制消息发送的确认机制，取值可以是 0、1 或 all&#x2F;-1(默认)。all 提供最高的可靠性，0 提供最低的延迟。<ul><li>0：生产者不会等待任何确认，消息一旦发送就被认为是成功的。</li><li>1：生产者会等待领导者（Leader）副本确认收到消息后才认为消息发送成功。</li><li>all&#x2F;-1：生产者会等待所有同步副本确认收到消息后才认为消息发送成功。这些同步副本的数量由主题的<code>min.insync.replicas</code>(默认1)设置决定。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;0&quot;</span>); <span class="comment">// 0, 1, -1/all</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h3><ul><li><code>retries</code>：重试次数，默认2147483647(2^31 -1)。</li><li><code>retry.backoff.ms</code>：重试等待时间，默认100ms。</li><li>若副本数据存储下来后响应丢失或响应失败，仍进行重试，可能会导致数据重复。</li><li>重试机制也可能会导致数据乱序问题。</li><li>幂等性生产者  <ul><li>为了避免数据重复和乱序问题，kafka提供了幂等性生产者，每条消息也只会被写入一次。</li><li>开启幂等性的要求：acks为-1，开启重试机制，<code>max.in.flight.requests.per.connection</code>不能大于5。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">configMap.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li>幂等性生产者只对一个分区起作用。</li><li>幂等性生产者Broker实现方式(基于生产者自动生成的PID和序列号进行判重和重新排序)：<ul><li>接收到消息后，会检查消息的PID（幂等性生产者实例在启动时获取一个唯一的Producer ID）和<br>序列号（消息在发送时，都有一个与之关联的序列号，序列号在每个分区内是递增的，用于跟踪每个分区内消息的顺序）。</li><li>如果消息是新的（即序列号与预期匹配），Broker会处理消息并更新其缓存。</li><li>如果消息是重复的（即序列号与缓存中的记录匹配），Broker会忽略该消息。</li><li>如果序列号与预期不匹配，即乱序，则需要重新发送。</li><li>RecordAccumulator数据收集器（缓冲区），会对需要重试的数据进行排序发送。</li></ul></li></ul></li></ul><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><ul><li>底层流程<ol><li>生产者向任意一个Broker节点发送FIND_COORDINATOR请求，查找事务协调器所在的节点，通过txnId.hashCode % 50计算获得</li><li>生产者向事务协调器（TransactionCoordinator）发送INIT_PRODUCER_ID请求，初始化生产者ID</li><li>生产者向事务协调器（TransactionCoordinator）发送ADD_PARTITIONS_TO_TXN请求，将数据的分区信息添加到事务中</li><li>生产者向Broker(leader)节点发送PRODUCE请求，生产数据</li><li>Broker(leader)节点向事务协调器（TransactionCoordinator）发送ADD_PARTITIONS_TO_TXN请求，提交保存成功的数据分区信息</li><li>Broker(leader)节点根据acks配置返回确认响应</li><li>向事务协调器（TransactionCoordinator）发送END_TXN请求，结束事务</li><li>事务协调器（TransactionCoordinator）修改事务状态为PrepareCommit</li><li>事务协调器（TransactionCoordinator）向Broker(leader)节点发送WRITE_TXN_MARKERS请求，Broker会将事务标记（COMMIT&#x2F;ABORT）写入到分区日志中，标记事务的最终状态</li><li>事务协调器（TransactionCoordinator）修改事务状态为CompleteCommit</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">configMap.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">configMap.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, <span class="literal">true</span>); <span class="comment">// 幂等性是事务性生产者的基础，必须启用。</span></span><br><span class="line">configMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class="string">&quot;txnId&quot;</span>); <span class="comment">// 事务 ID 用于唯一标识生产者的事务性操作。</span></span><br><span class="line">KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(configMap);</span><br><span class="line"><span class="comment">// 初始化事务</span></span><br><span class="line"><span class="comment">// 包含FIND_COORDINATOR、INIT_PRODUCER_ID请求</span></span><br><span class="line">producer.initTransactions();</span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">producer.beginTransaction();</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="comment">// 包含ADD_PARTITIONS_TO_TXN请求</span></span><br><span class="line">producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;topic1&quot;</span>, <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>));</span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line"><span class="comment">// 包含END_TXN请求，此时事务状态会变成PrepareCommit，发送WRITE_TXN_MARKERS请求，WRITE_TXN_MARKERS请求处理完毕后事务状态会变成CompleteCommit</span></span><br><span class="line">producer.commitTransaction();</span><br><span class="line"><span class="comment">// 终止事务</span></span><br><span class="line">producer.abortTransaction();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka主题创建</title>
      <link href="/kafka/3.%20kafka%E4%B8%BB%E9%A2%98%E5%88%9B%E5%BB%BA/"/>
      <url>/kafka/3.%20kafka%E4%B8%BB%E9%A2%98%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="主题创建"><a href="#主题创建" class="headerlink" title="主题创建"></a>主题创建</h2><h3 id="自动创建"><a href="#自动创建" class="headerlink" title="自动创建"></a>自动创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数据</span></span><br><span class="line">ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;key&quot;</span> + i, <span class="string">&quot;value&quot;</span> + i);</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">producer.send(record);</span><br></pre></td></tr></table></figure><p>生产者在向主题发送数据时，若主题不存在则会自动创建，原因是kafka底层的AutoTopicCreationManager,采用的是默认配置<br>可通过<code>auto.create.topics.enable</code>禁用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.autoTopicCreationManager = AutoTopicCreationManager(</span><br><span class="line">    config,</span><br><span class="line">    metadataCache,</span><br><span class="line">    threadNamePrefix,</span><br><span class="line">    autoTopicCreationChannel,</span><br><span class="line">    Some(adminManager),</span><br><span class="line">    Some(kafkaController),</span><br><span class="line">    groupCoordinator,</span><br><span class="line">    transactionCoordinator</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h3><ul><li>默认的主题分区副本分配策略<ul><li>代码示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 配置对象</span></span><br><span class="line">    Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    configMap.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建admin</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> Admin.create(configMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具有指定复制因子(副本数)和分区数的新主题</span></span><br><span class="line">    <span class="type">NewTopic</span> <span class="variable">topic1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;test1&quot;</span>, <span class="number">1</span>, (<span class="type">short</span>) <span class="number">1</span>);</span><br><span class="line">    <span class="type">NewTopic</span> <span class="variable">topic2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;test2&quot;</span>, <span class="number">2</span>, (<span class="type">short</span>) <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建主题</span></span><br><span class="line">    admin.createTopics(</span><br><span class="line">            Arrays.asList(topic1, topic2)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    admin.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>自定义分配策略<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 配置对象</span></span><br><span class="line">    Map&lt;String, Object&gt; configMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    configMap.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建admin</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> Admin.create(configMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义分配策略</span></span><br><span class="line">    <span class="comment">// 参数：name – 主题名称。 </span></span><br><span class="line">    <span class="comment">// replicasAssignments – 从分区 ID 到副本 ID（即代理 ID）的映射。尽管不是强制执行的，但通常最好让所有分区都具有相同数量的副本</span></span><br><span class="line">    Map&lt;Integer, List&lt;Integer&gt;&gt; replicasAssignments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    replicasAssignments.put(<span class="number">0</span>, Arrays.asList(<span class="number">3</span>, <span class="number">1</span>));</span><br><span class="line">    replicasAssignments.put(<span class="number">1</span>, Arrays.asList(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    replicasAssignments.put(<span class="number">2</span>, Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="type">NewTopic</span> <span class="variable">topic3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;test3&quot;</span>, replicasAssignments);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建主题</span></span><br><span class="line">    admin.createTopics(Arrays.asList(topic3));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    admin.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="底层逻辑分析"><a href="#底层逻辑分析" class="headerlink" title="底层逻辑分析"></a>底层逻辑分析</h3><ul><li>Controller接收创建主题请求</li><li>创建主题<ol><li>请求处理器（KafkaApis）校验主题参数</li><li>创建主题时，如果使用<code>replica-assignment</code>参数，那么就按照指定的方案来进行分区副本的创建；否则按照Kafka内部逻辑来分配，<br>内部逻辑按照机架信息分为两种策略：【未指定机架信息】和【指定机架信息】</li><li>通过ZK客户端在ZK端创建节点</li></ol><ul><li>向ZK增加主题配置信息：在&#x2F;config&#x2F;topics节点下，增加当前主题节点，节点类型为持久类型</li><li>向ZK增加主题相关下：在&#x2F;brokers&#x2F;topics节点下，增加当前主题及相关节点，节点类型为持久类型</li></ul><ol start="4"><li>Controller节点启动后，会在&#x2F;brokers&#x2F;topics节点增加监听器，一旦节点发生变化，会触发相应的功能</li></ol><ul><li>获取需要新增的主题信息</li><li>更新当前Controller节点保存的主题状态数据</li><li>更新分区状态机的状态为：NewPartition</li><li>更新副本状态机的状态：NewReplica</li><li>更新分区状态机的状态为：OnlinePartition<blockquote><p>从正常的副本列表中的获取第一个作为分区的Leader副本，所有的副本作为分区的同步副本列表，我们称之为ISR( In-Sync Replica)</p></blockquote></li><li>更新副本状态机的状态：OnlineReplica</li></ul><ol start="5"><li>Controller节点向主题的各个分区副本所属Broker节点发送LeaderAndIsrRequest请求，向所有的Broker节点发送UPDATE_METADATA请求，更新自身的缓存</li></ol><ul><li>Controller节点向分区所属的Broker节点发送请求</li><li>Broker节点接收到请求后，根据分区状态信息，设定当前的副本为Leader或Follower，并创建底层的数据存储文件目录和空的数据文件。<ul><li>文件目录：主题名 + 分区编号</li><li>.log：数据文件，用于存储传输的消息</li><li>.index：索引文件，用于定位数据</li><li>.timeindex：时间索引文件，用于定位数据</li></ul></li></ul></li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>assignReplicasToBrokersRackAware：机架感知的策略能够通过了解集群中各个节点的物理拓扑结构，避免将所有副本都放在同一个物理位置。</li><li>assignReplicasToBrokersRackUnaware：直接在所有Broker之间进行副本分配，而不考虑这些Broker所在的物理机架或数据中心位置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (brokerMetadatas.stream().noneMatch(b -&gt; b.rack.isPresent()))</span><br><span class="line">    <span class="keyword">return</span> assignReplicasToBrokersRackUnaware(nPartitions, replicationFactor, brokerMetadatas.stream().map(b -&gt; b.id).collect(Collectors.toList()), fixedStartIndex,</span><br><span class="line">        startPartitionId);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (brokerMetadatas.stream().anyMatch(b -&gt; !b.rack.isPresent()))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AdminOperationException</span>(<span class="string">&quot;Not all brokers have rack information for replica rack aware assignment.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> assignReplicasToBrokersRackAware(nPartitions, replicationFactor, brokerMetadatas, fixedStartIndex,</span><br><span class="line">        startPartitionId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未指定机架信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, List&lt;Integer&gt;&gt; <span class="title function_">assignReplicasToBrokersRackUnaware</span><span class="params">(<span class="type">int</span> nPartitions,</span></span><br><span class="line"><span class="params">                                                                              <span class="type">int</span> replicationFactor,</span></span><br><span class="line"><span class="params">                                                                              List&lt;Integer&gt; brokerList,</span></span><br><span class="line"><span class="params">                                                                              <span class="type">int</span> fixedStartIndex,</span></span><br><span class="line"><span class="params">                                                                              <span class="type">int</span> startPartitionId)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定机架信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, List&lt;Integer&gt;&gt; <span class="title function_">assignReplicasToBrokersRackAware</span><span class="params">(<span class="type">int</span> nPartitions,</span></span><br><span class="line"><span class="params">                                                                            <span class="type">int</span> replicationFactor,</span></span><br><span class="line"><span class="params">                                                                            Collection&lt;BrokerMetadata&gt; brokerMetadatas,</span></span><br><span class="line"><span class="params">                                                                            <span class="type">int</span> fixedStartIndex,</span></span><br><span class="line"><span class="params">                                                                            <span class="type">int</span> startPartitionId)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka服务启动</title>
      <link href="/kafka/2.%20kafka%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/"/>
      <url>/kafka/2.%20kafka%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化ZooKeeper客户端（KafkaZkClient）"><a href="#初始化ZooKeeper客户端（KafkaZkClient）" class="headerlink" title="初始化ZooKeeper客户端（KafkaZkClient）"></a>初始化ZooKeeper客户端（KafkaZkClient）</h3><p>用于和ZooKeeper进行交互。客户端对象创建完成后，会通过该客户端对象向ZooKeeper发送创建Node的请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">initZkClient(time)</span><br><span class="line"><span class="keyword">private</span> def <span class="title function_">initZkClient</span><span class="params">(time: Time)</span>: Unit = &#123;</span><br><span class="line">  info(s<span class="string">&quot;Connecting to zookeeper on $&#123;config.zkConnect&#125;&quot;</span>)</span><br><span class="line">  _zkClient = KafkaZkClient.createZkClient(<span class="string">&quot;Kafka server&quot;</span>, time, config, zkClientConfig)</span><br><span class="line">  _zkClient.createTopLevelPaths()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动任务调度器（KafkaScheduler）"><a href="#启动任务调度器（KafkaScheduler）" class="headerlink" title="启动任务调度器（KafkaScheduler）"></a>启动任务调度器（KafkaScheduler）</h3><p>用于完成节点内部的工作任务务。底层就是Java中的定时任务线程池ScheduledThreadPoolExecutor。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafkaScheduler = <span class="keyword">new</span> <span class="title class_">KafkaScheduler</span>(config.backgroundThreads)</span><br><span class="line">kafkaScheduler.startup()</span><br></pre></td></tr></table></figure><h3 id="创建数据管理器（LogManager）"><a href="#创建数据管理器（LogManager）" class="headerlink" title="创建数据管理器（LogManager）"></a>创建数据管理器（LogManager）</h3><p>用于接收到消息后，完成后续的数据创建，查询，清理等处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_logManager = LogManager(</span><br><span class="line">  config,</span><br><span class="line">  metaPropsEnsemble.errorLogDirs().asScala.toSeq,</span><br><span class="line">  configRepository,</span><br><span class="line">  kafkaScheduler,</span><br><span class="line">  time,</span><br><span class="line">  brokerTopicStats,</span><br><span class="line">  logDirFailureChannel,</span><br><span class="line">  config.usesTopicId)</span><br><span class="line">_brokerState = BrokerState.RECOVERY</span><br><span class="line">logManager.startup(zkClient.getAllTopicsInCluster())</span><br></pre></td></tr></table></figure><h3 id="创建远程数据管理器（RemoteLogManager）"><a href="#创建远程数据管理器（RemoteLogManager）" class="headerlink" title="创建远程数据管理器（RemoteLogManager）"></a>创建远程数据管理器（RemoteLogManager）</h3><p>用于和其他Broker节点进行数据状态同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remoteLogManagerOpt = createRemoteLogManager()</span><br></pre></td></tr></table></figure><h3 id="创建-ZK-元数据缓存（ZkMetadataCache）"><a href="#创建-ZK-元数据缓存（ZkMetadataCache）" class="headerlink" title="创建 ZK 元数据缓存（ZkMetadataCache）"></a>创建 ZK 元数据缓存（ZkMetadataCache）</h3><p>每一个Broker在启动时会将ZooKeeper的关于Kafka的元数据进行缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">metadataCache = MetadataCache.zkMetadataCache(</span><br><span class="line">  config.brokerId,</span><br><span class="line">  config.interBrokerProtocolVersion,</span><br><span class="line">  brokerFeatures,</span><br><span class="line">  kraftControllerNodes,</span><br><span class="line">  config.migrationEnabled)</span><br><span class="line"><span class="type">val</span> <span class="variable">controllerNodeProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MetadataCacheControllerNodeProvider</span>(metadataCache, config)</span><br></pre></td></tr></table></figure><h3 id="创建Broker通道管理器对象（clientToControllerChannelManager）"><a href="#创建Broker通道管理器对象（clientToControllerChannelManager）" class="headerlink" title="创建Broker通道管理器对象（clientToControllerChannelManager）"></a>创建Broker通道管理器对象（clientToControllerChannelManager）</h3><p>用于管理Broker和Controller之间的通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clientToControllerChannelManager = <span class="keyword">new</span> <span class="title class_">NodeToControllerChannelManagerImpl</span>(</span><br><span class="line">  controllerNodeProvider = controllerNodeProvider,</span><br><span class="line">  time = time,</span><br><span class="line">  metrics = metrics,</span><br><span class="line">  config = config,</span><br><span class="line">  channelName = <span class="string">&quot;forwarding&quot;</span>,</span><br><span class="line">  s<span class="string">&quot;zk-broker-$&#123;config.nodeId&#125;-&quot;</span>,</span><br><span class="line">  retryTimeoutMs = config.requestTimeoutMs.longValue</span><br><span class="line">)</span><br><span class="line">clientToControllerChannelManager.start()</span><br></pre></td></tr></table></figure><h3 id="创建网络通信对象"><a href="#创建网络通信对象" class="headerlink" title="创建网络通信对象"></a>创建网络通信对象</h3><p>用于和其他Broker之间的进行通信，其中包含了Java用于NIO 通信的Channel、Selector 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketServer = <span class="keyword">new</span> <span class="title class_">SocketServer</span>(config, metrics, time, credentialProvider, apiVersionManager)</span><br></pre></td></tr></table></figure><h3 id="创建副本管理器（ReplicaManager）"><a href="#创建副本管理器（ReplicaManager）" class="headerlink" title="创建副本管理器（ReplicaManager）"></a>创建副本管理器（ReplicaManager）</h3><p>用于对主题的副本进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_replicaManager = createReplicaManager(isShuttingDown)</span><br><span class="line">replicaManager.startup()</span><br></pre></td></tr></table></figure><h3 id="注册Broker节点"><a href="#注册Broker节点" class="headerlink" title="注册Broker节点"></a>注册Broker节点</h3><p>通过ZK客户端对象向ZK注册当前的Broker节点ID，注册后创捷的ZK节点为临时节点。<br>如果当前Broker的ZK客户端断开和ZK的连接，注册的节点会被删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">brokerInfo</span> <span class="operator">=</span> createBrokerInfo</span><br><span class="line"><span class="type">val</span> <span class="variable">brokerEpoch</span> <span class="operator">=</span> zkClient.registerBroker(brokerInfo)</span><br></pre></td></tr></table></figure><h3 id="启动控制器（KafkaController）"><a href="#启动控制器（KafkaController）" class="headerlink" title="启动控制器（KafkaController）"></a>启动控制器（KafkaController）</h3><p>用于和ZK之间建立连接并申请自己为整个Kafka集群的Master管理者。<br>如果申请成功：完成管理者的初始化操作，并建立和其他Broker之间的数据通道接收各种事件，进行封装后交给事件管理器，<br>并定义了process方法，用于真正处理各类事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_kafkaController = <span class="keyword">new</span> <span class="title class_">KafkaController</span>(config, zkClient, time, metrics, brokerInfo, brokerEpoch, tokenManager, brokerFeatures, metadataCache, threadNamePrefix)</span><br><span class="line">kafkaController.startup()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka的基本概念</title>
      <link href="/kafka/1.%20kafka%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/kafka/1.%20kafka%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="kafka的相关定义"><a href="#kafka的相关定义" class="headerlink" title="kafka的相关定义"></a>kafka的相关定义</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>Kafka是一个由Scala和Java语言开发的，经典高吞吐量的分布式消息发布和订阅系统。<a href="https://kafka.apache.org/documentation/">官方文档</a></li></ul><h3 id="Broker节点"><a href="#Broker节点" class="headerlink" title="Broker节点"></a>Broker节点</h3><ul><li>使用Kafka时，需要启动Kafka服务进程，这里的Kafka服务进程一般会称之Kafka Broker。</li><li>每一个服务节点都是一个 broker，在Kafka集群中，为了区分不同的服务节点，每一个broker都有一个不重复的全局ID，称之为broker.id</li></ul><h3 id="Controller控制器"><a href="#Controller控制器" class="headerlink" title="Controller控制器"></a>Controller控制器</h3><ul><li>kafka分布式架构采用的是主从架构，多个Broker中存在一个用于管理整个Kafka集群的Master节点，这个节点就是Controller。</li><li>若Controller节点出现了故障，那么Kafka会依托于ZooKeeper选举其他的节点作为新的Controller，让Kafka集群实现高可用。</li><li>ZooKeeper实现选举的相关功能：<ul><li>ZooKeeper中创建节点Node包括持久化创建和临时创建。临时创建的节点在客户端连接断开时会自动删除，称为临时节点。</li><li>ZooKeeper节点不允许重复创建。</li><li>客户端可以在ZooKeeper的节点上增加监听器，用于监听节点的状态变化。</li></ul></li><li>选举实现：<ul><li>启动Kafka集群时，会同时启动多个Broker节点，每一个Broker节点就会连接ZooKeeper，并尝试创建一个临时节点 &#x2F;controller。</li><li>ZooKeeper节点不允许重复创建，创建成功的Broker节点就会自动作为Kafka集群控制器节点，用于管理整个Kafka集群。</li><li>没有选举成功的其他Slave节点会创建Node监听器，用于监听 &#x2F;controller 节点的状态变化。</li><li>Controller节点出现故障或挂掉了，那么对应的ZooKeeper客户端连接就会中断。ZooKeeper中的 &#x2F;controller 节点就会自动被删除，<br>Slave通过监听器监听到 &#x2F;controller 节点被删除会向ZooKeeper发出创建 &#x2F;controller 节点的请求，一旦创建成功，那么该Broker就变成了新的Controller节点了。</li></ul></li></ul><h3 id="Topic主题"><a href="#Topic主题" class="headerlink" title="Topic主题"></a>Topic主题</h3><ul><li>Kafka是分布式消息传输系统，采用的数据传输方式为发布，订阅模式，为了对消费者订阅的消息进行区分，对消息在逻辑上进行了分类，这个分类就是Topic。</li><li>消息的生产者必须将消息数据发送到某一个主题，而消费者必须从某一个主题中获取消息，并且消费者可以同时消费一个或多个主题的数据。</li></ul><h3 id="Partition分区"><a href="#Partition分区" class="headerlink" title="Partition分区"></a>Partition分区</h3><ul><li>生产者必须将数据发送到一个主题，若数据特别多主题所在broker节点可能因为热点问题引起节点故障，因此将主题分成多块分配到不同的broker节点，每一块称为一个Partition。</li><li>每个partition都会用一个编号（从0开始的整数数字）进行标记。</li><li>每个partition都是一个有序的队列</li></ul><h3 id="Offset偏移量"><a href="#Offset偏移量" class="headerlink" title="Offset偏移量"></a>Offset偏移量</h3><ul><li>partition中每条消息都会分配一个有序的ID，称之为偏移量：Offset</li></ul><h3 id="Replication副本"><a href="#Replication副本" class="headerlink" title="Replication副本"></a>Replication副本</h3><ul><li>Topic进行Partition后到了不同的Broker节点，若Broker节点故障，Topic数据不完整，为了防止出现数据丢失的情况，给分区数据设定多个备份，这个备份称为Replication副本。</li><li>多个Replication副本需要放在不同的Broker节点。</li><li>所有的文件都称之为副本，用于读写的作为Leader副本，其他为Follower副本。</li><li>底层存储数据的文件的扩展名就是.log。</li></ul><h2 id="kafka特点"><a href="#kafka特点" class="headerlink" title="kafka特点"></a>kafka特点</h2><h2 id="kafka应用场景"><a href="#kafka应用场景" class="headerlink" title="kafka应用场景"></a>kafka应用场景</h2><h2 id="kafka相关命令"><a href="#kafka相关命令" class="headerlink" title="kafka相关命令"></a>kafka相关命令</h2><ul><li>创建主题<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test_topic</span><br></pre></td></tr></table></figure></li><li>主题列表<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure></li><li>主题详情<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --describe --zookeeper localhost:2181 --topic test_topic</span><br></pre></td></tr></table></figure></li><li>发送消息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic test_topic</span><br></pre></td></tr></table></figure></li><li>消费消息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic test_topic --从头开始</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --offset latest --从尾开始</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --offset latest --partition 0 --从尾开始指定分区</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --offset latest --partition 0 --max-messages 1 --取指定个数</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --partition 0 --offset 100 --指定分区指定偏移量</span><br></pre></td></tr></table></figure></li><li>删除主题<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --delete --zookeeper localhost:2181 --topic test_topic</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过期策略以及内存淘汰机制</title>
      <link href="/redis/5.%20Redis%E7%9A%84%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6/"/>
      <url>/redis/5.%20Redis%E7%9A%84%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存穿透、缓存击穿、缓存雪崩</title>
      <link href="/redis/4.%20%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
      <url>/redis/4.%20%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="缓存击穿（Cache-Breakdown）"><a href="#缓存击穿（Cache-Breakdown）" class="headerlink" title="缓存击穿（Cache Breakdown）"></a>缓存击穿（Cache Breakdown）</h3><ul><li>定义<blockquote><p>缓存击穿是指一个热点数据在缓存过期的瞬间，有大量的请求同时到达缓存，导致这些请求直接访问后端数据库，从而给数据库带来巨大压力，甚至可能导致数据库崩溃。</p></blockquote></li><li>解决方案<ul><li>设置热点数据不过期：对于热点数据，可以设置较长的过期时间或直接设置为永不过期。</li><li>使用互斥锁：在缓存失效时，通过加锁机制（如分布式锁）确保只有一个线程能够查询数据库并更新缓存，其它线程等待锁释放后再读取缓存。</li><li>提前刷新：在缓存即将过期时，提前触发缓存刷新操作，以保证缓存中始终有数据。</li></ul></li><li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;dataCache&quot;, key = &quot;#key&quot;, unless = &quot;#result == null&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟查询数据库的操作</span></span><br><span class="line">        <span class="keyword">return</span> queryFromDatabase(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;dataCache&quot;, key = &quot;#key&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshCache</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 清除缓存，一般用于数据更新时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryFromDatabase</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟实际从数据库中查询数据的操作</span></span><br><span class="line">        <span class="comment">// 此处应该实现真正的数据库查询逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;data for &quot;</span> + key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="缓存穿透（Cache-Penetration）"><a href="#缓存穿透（Cache-Penetration）" class="headerlink" title="缓存穿透（Cache Penetration）"></a>缓存穿透（Cache Penetration）</h3><ul><li>定义<blockquote><p>缓存穿透是指缓存和数据库中都不存在的数据被频繁请求，导致每次请求都要到后端数据库去查询，进而对数据库产生很大的压力。</p></blockquote></li><li>解决方案<ul><li>缓存空结果：对于查询不到的数据，缓存一个空结果（如 NULL），并设置一个较短的过期时间，防止频繁访问数据库。</li><li>布隆过滤器：在请求到达缓存之前，通过布隆过滤器快速判断数据是否存在，避免不存在的数据请求直接到达缓存和数据库。</li><li>参数校验：对请求参数进行严格校验，防止恶意请求绕过缓存直接攻击数据库。</li></ul></li><li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataService dataService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BloomFilter&lt;String&gt; bloomFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建布隆过滤器，预计元素个数10000，误判率0.01</span></span><br><span class="line">        <span class="built_in">this</span>.bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charset.defaultCharset()), <span class="number">10000</span>, <span class="number">0.01</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 先通过布隆过滤器检查key是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!bloomFilter.mightContain(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// key不存在，直接返回null，避免请求直接击穿缓存</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> dataService.getData(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果缓存中为空，更新布隆过滤器</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            bloomFilter.put(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="缓存雪崩（Cache-Avalanche）"><a href="#缓存雪崩（Cache-Avalanche）" class="headerlink" title="缓存雪崩（Cache Avalanche）"></a>缓存雪崩（Cache Avalanche）</h3><ul><li>定义<blockquote><p>缓存雪崩是指在某一个时间点，缓存中大量的数据同时过期，导致大量请求直接到达后端数据库，瞬间对数据库造成巨大压力，可能导致数据库崩溃。</p></blockquote></li><li>解决方案<ul><li>缓存数据的过期时间分散：为缓存中的不同数据设置不同的过期时间，防止大量数据在同一时间过期。</li><li>双层缓存：在一级缓存失效时，使用二级缓存作为保护层，缓解数据库压力。</li><li>限流降级：在缓存失效时，采取限流措施，保护后端数据库，或采用降级策略，只提供部分数据或功能。</li><li>缓存预热：在系统启动或缓存数据即将过期前，提前加载热点数据到缓存中，防止缓存过期时的大量请求直接打到数据库。</li></ul></li><li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;dataCache&quot;, key = &quot;#key&quot;, unless = &quot;#result == null&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟查询数据库的操作</span></span><br><span class="line">        <span class="keyword">return</span> queryFromDatabase(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryFromDatabase</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟实际从数据库中查询数据的操作</span></span><br><span class="line">        <span class="comment">// 此处应该实现真正的数据库查询逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;data for &quot;</span> + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 清除缓存，一般用于数据更新时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simulateCacheExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟缓存失效</span></span><br><span class="line">        clearCache(key);</span><br><span class="line">        <span class="comment">// 重新查询并设置缓存，加上随机的过期时间</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">randomExpireTime</span> <span class="operator">=</span> ThreadLocalRandom.current().nextInt(<span class="number">60</span>, <span class="number">180</span>); <span class="comment">// 随机过期时间为60-180秒</span></span><br><span class="line">        <span class="comment">// 这里重新查询数据库并设置缓存，省略具体逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现redis的高可用</title>
      <link href="/redis/3.%20Redis%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/redis/3.%20Redis%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="主从复制（Master-Slave-Replication）"><a href="#主从复制（Master-Slave-Replication）" class="headerlink" title="主从复制（Master-Slave Replication）"></a>主从复制（Master-Slave Replication）</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>主节点（Master）：负责处理所有的写操作（包括写入、删除、更新等），并将数据同步到从节点。</li><li>从节点（Slave）：负责处理读操作，可以有多个从节点从一个主节点同步数据。从节点不会直接接受写操作，而是通过主节点进行数据同步。</li></ul><h3 id="复制过程"><a href="#复制过程" class="headerlink" title="复制过程"></a>复制过程</h3><ul><li>初始同步<ul><li>SLAVEOF 命令：从节点通过执行 SLAVEOF <master-ip> <master-port> 命令来开始同步。</li><li>RDB 文件传输：主节点生成一个 RDB 快照文件并发送给从节点，从节点加载 RDB 文件以获取初始数据副本。</li><li>增量同步：在 RDB 文件传输期间，主节点会将新写入的操作记录在内存缓冲区中，RDB 文件加载完成后，从节点会继续应用这些缓冲区中的操作。</li></ul></li><li>增量同步<ul><li>命令传播：主节点将所有写操作通过命令传播的方式同步到从节点。从节点接收并执行这些命令，以保持与主节点的数据一致性。</li></ul></li></ul><h3 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h3><ul><li>主节点配置<ul><li>主节点不需要特别的配置，只需要正常启动即可。</li></ul></li><li>从节点配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicaof &lt;master-ip&gt; &lt;master-port&gt;</span><br><span class="line">replicaof 127.0.0.1 6379</span><br></pre></td></tr></table></figure></li></ul><h3 id="复制延迟"><a href="#复制延迟" class="headerlink" title="复制延迟"></a>复制延迟</h3><p>复制延迟是指从节点与主节点之间的同步延迟。影响复制延迟的因素包括:</p><ul><li>网络延迟</li><li>从节点的处理能力</li><li>主节点的负载</li></ul><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>在主从复制模式下，通常将写操作发送到主节点，读操作发送到从节点，从而实现读写分离。</p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><ul><li>手动故障转移: 当主节点故障时，可以手动将从节点提升为主节点，通过执行<code>SLAVEOF NO ONE</code>命令。</li><li>自动故障转移：通过 Redis Sentinel 或 Redis Cluster 实现，当检测到主节点故障时，自动选举新的主节点并完成故障转移。</li></ul><h2 id="哨兵模式（Sentinel-Mode）"><a href="#哨兵模式（Sentinel-Mode）" class="headerlink" title="哨兵模式（Sentinel Mode）"></a>哨兵模式（Sentinel Mode）</h2><h3 id="哨兵功能描述"><a href="#哨兵功能描述" class="headerlink" title="哨兵功能描述"></a>哨兵功能描述</h3><p>哨兵的核心功能就是主节点的故障转移<br>Redis官方对哨兵的功能描述:</p><blockquote><p>监控（Monitoring）：哨兵会不断地检查主节点和从节点是否运作正常。<br>自动故障转移（Automatic failover）：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。<br>配置提供者（Configuration provider）：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。<br>通知（Notification）：哨兵可以将故障转移的结果发送给客户端。<br>其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移；而配置提供者和通知功能，则需要在与客户端的交互中才能体现；哨兵之间也会进行相互监控，多个哨兵不仅监控各个 Redis 服务器，而且哨兵之间互相监控，看看哨兵们是否还“活”着。</p></blockquote><h3 id="哨兵模式架构"><a href="#哨兵模式架构" class="headerlink" title="哨兵模式架构"></a>哨兵模式架构</h3><p>下图是一个典型的哨兵模式架构:<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20220718105550.png"><br>它由两部分组成，哨兵节点和数据节点:<br>哨兵节点：哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的redis节点，不存储数据。<br>数据节点：主节点和从节点都是数据节点。</p><h3 id="部署哨兵模式"><a href="#部署哨兵模式" class="headerlink" title="部署哨兵模式"></a>部署哨兵模式</h3><p>下面部署一个简单的哨兵模式,包含一个主节点,两个从节点和三个哨兵节点,这些节点都部署到一台机器上,使用端口号进行区分</p><ul><li>部署主节点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redis-6379.conf</span></span><br><span class="line">port 6379</span><br><span class="line">logfile &quot;6379.log&quot;</span><br><span class="line">dbfilename &quot;dump-6379.rdb&quot;</span><br></pre></td></tr></table></figure></li><li>部署从节点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redis-6380.conf</span></span><br><span class="line">port 6380</span><br><span class="line">logfile &quot;6380.log&quot;</span><br><span class="line">dbfilename &quot;dump-6380.rdb&quot;</span><br><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redis-6381.conf</span></span><br><span class="line">port 6381</span><br><span class="line">logfile &quot;6381.log&quot;</span><br><span class="line">dbfilename &quot;dump-6381.rdb&quot;</span><br><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure></li><li>依次启动主节点和从节点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis-6379.conf</span><br><span class="line">redis-server redis-6380.conf</span><br><span class="line">redis-server redis-6381.conf</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/f47c8ae34e633aee9d59490779860be.png"><br>在redis-cli中使用命令<code>info Replication</code>查看主从结构是否部署成功，使用set命令向主服务器存入一个key,查看从服务器中是否成功复制。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/71936e32b038cf85e5e283db6b2df19.png"><br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/4b6a8f2431d4bfa44a351d9ebfc35d9.png">  </li><li>部署哨兵节点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sentinel-26379.conf</span></span><br><span class="line">port 26379</span><br><span class="line">logfile &quot;26379.log&quot;</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure>（26379、26382、26381的部署同上只需改变端口号即可）<br>意思是监控127.0.0.1 6379这个主节点，2代表的意思是至少需要两个以上的哨兵同意才能判定为主节点故障并进行故障转移。注意：要保证所有哨兵实例的配置是一致的，否则导致哨兵集群一直没有对有故障的主节点形成共识，也就没有及时切换主节点，最终的结果就是集群服务不稳定。</li><li>启动哨兵节点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server sentinel-26379.conf --sentinel</span><br><span class="line">redis-server sentinel-26380.conf --sentinel</span><br><span class="line">redis-server sentinel-26381.conf --sentinel</span><br></pre></td></tr></table></figure>使用命令<code>redis-cli.exe -p 26379 -h 127.0.0.1</code>启动哨兵的cli执行命令<code>info Sentinel</code>查看哨兵节点是否部署成功。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/083d7ff4609b1a7148c68aa3487cc7d.png"><br>如图所示：可以看出26379哨兵节点已经在监控主节点(即127.0.0.1:6379)，并发现了其2个从节点和另外2个哨兵节点。</li></ul><h3 id="演示故障转移"><a href="#演示故障转移" class="headerlink" title="演示故障转移"></a>演示故障转移</h3><ul><li>关闭主节点6379的服务模拟服务宕机，此时立刻去26379的cli下使用<code>info Sentinel</code>查看发现此时主节点仍然还是6379，这是因为服务故障转移需要一定时间，一段时间后再次使用命令查看，就会发现主节点变换成了6380或6381其中一个原从节点。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/ae200d32645b241144470998ac7d380.png"></li><li>从查看结果中我们可以发现，主节点6381下依然是两个从节点，这是因为将6381切换为主节点的同时将6379切换成了从节点，6379即使已经挂了，但是哨兵只是认为是主观下线，不会进行客观下线，因此认为该节点会一直存在。<blockquote><p>假设主节点宕机，哨兵1先检测到这个结果，系统并不会马上进行故障转移(failover) 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<code>主观下线</code>。<br>当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<code>客观下线</code>。这样对于客户端而言，一切都是透明的。</p></blockquote></li><li>重启6379服务，就可以看到6379成为了6381的从节点并且执行了复制。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/8bbb05b6b2c943162184c11fac89db1.png"></li><li>在故障转移阶段，哨兵和主从节点的配置文件都会被改写。 对于主从节点，主要是slaveof配置的变化：新的主节点没有了slaveof配置，其从节点则slaveof新的主节点。</li></ul><h3 id="哨兵leader的选举流程"><a href="#哨兵leader的选举流程" class="headerlink" title="哨兵leader的选举流程"></a>哨兵leader的选举流程</h3><ol><li>判断客观下线</li></ol><ul><li>任何一个哨兵实例只要判断主节点主观下线，就会给其他哨兵实例发送<code>is-master-down-by-addr</code>命令  。</li><li>收到 is-master-down-by-addr 命令的实例会根据自己和主节点的连接情况，做出 Y 或 N 的响应（Y 赞成，N 反对）。</li><li>哨兵获得了仲裁所需的赞成票数后，就可以标记主节点为客观下线，这个所需赞成票通过 quorum 配置项决定,如 quorum 配置为 3，则该哨兵判断主库客观下线需要 3 票赞成（包括了自己的1票。</li></ul><ol start="2"><li>leader选举</li></ol><ul><li>哨兵拿到赞成主节点下线的票数大于等于 quorum，就确定了主节点客观下线。</li><li>哨兵就可以再给其他哨兵发送命令，表明希望由自己担任执行主从切换的 Leader。</li><li>在投票过程中，任何一个想成为 Leader 的哨兵，要满足两个条件：拿到半数以上的赞成票和拿到的票数同时还需要大于等于哨兵配置文件中的 quorum值。</li></ul><ol start="3"><li>选举实例<br>现有三个哨兵ABC,quorum值为2。</li></ol><ul><li>哨兵A判断主节点为客观下线，他认为自己有功劳，就和哨兵B、哨兵C说他想当leader，并为自己投了一票。</li><li>哨兵C也判断主节点为客观下线，他也认为自己有功劳，就和哨兵A、哨兵B说他想当leader，并为自己投了一票。</li><li>哨兵A收到了C的请求，但是他已经给自己投了，所以他投了N表示不同意，同一时间哨兵B也受到了哨兵C的请求，可能因为网络阻塞，这是他收到的的第一份请求所以他同意了哨兵C的请求。</li><li>哨兵B收到了哨兵A的请求，但是已经投了给哨兵C了，所以就只能回了N给哨兵A。</li><li>至此哨兵A得了1票，哨兵C得了2票，也达到预设的 quorum 值，哨兵C成为了哨兵的leader,接着，哨兵C会开始执行选主节点的操作，而且在选定新主节点后，会给其他从节点和客户端通知新节点的信息。</li></ul><h3 id="哨兵工作模式"><a href="#哨兵工作模式" class="headerlink" title="哨兵工作模式"></a>哨兵工作模式</h3><p><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/d27afd4959c6281807db38ad20e9e24.png"></p><ul><li>每个哨兵以每秒钟一次的频率向它所知的主节点，从节点以及其他哨兵实例发送一个 PING命令。</li><li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds（默认是180000ms,即3分钟）选项所指定的值， 则这个实例会被哨兵标记为主观下线。</li><li>如果一个主节点被标记为主观下线，则正在监视这个主节点的所有哨兵要以每秒一次的频率确认主节点的确进入了主观下线状态。</li><li>当有足够数量的哨兵（大于等于配置文件指定的值）在指定的时间范围内确认主节点确实进入了主观下线状态， 则主节点会被标记为客观下线。</li><li>在一般情况下， 每个哨兵会以每10秒一次的频率向它已知的所有主节点，从节点发送 INFO 命令。</li><li>当主节点被哨兵标记为客观下线时，哨兵向下线的主节点的所有从节点发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</li><li>若没有足够数量的哨兵同意主节点已经下线，主节点的客观下线状态就会被移除；若主节点重新向哨兵的 PING 命令返回有效回复，主节点的主观下线状态就会被移除。</li></ul><h3 id="哨兵节点支持的命令"><a href="#哨兵节点支持的命令" class="headerlink" title="哨兵节点支持的命令"></a>哨兵节点支持的命令</h3><ol><li>基础查询：通过这些命令，可以查询哨兵系统的拓扑结构、节点信息、配置信息等<blockquote><p>info sentinel：获取监控的所有主节点的基本信息<br>sentinel masters：获取监控的所有主节点的详细信息<br>sentinel master mymaster：获取监控的主节点mymaster的详细信息<br>sentinel slaves mymaster：获取监控的主节点mymaster的从节点的详细信息<br>sentinel sentinels mymaster：获取监控的主节点mymaster的哨兵节点的详细信息<br>sentinel get-master-addr-by-name mymaster：获取监控的主节点mymaster的地址信息，前文已有介绍<br>sentinel is-master-down-by-addr：哨兵节点之间可以通过该命令询问主节点是否下线，从而对是否客观下线做出判断</p></blockquote></li><li>增加&#x2F;移除对主节点的监控<blockquote><p>sentinel monitor mymaster 127.0.0.1 26379 2：与部署哨兵节点时配置文件中的sentinel monitor功能完全一样，不再详述<br>sentinel remove mymaster：取消当前哨兵节点对主节点mymaster的监控</p></blockquote></li><li>强制故障转移<blockquote><p>sentinel failover mymaster：该命令可以强制对mymaster执行故障转移，即便当前的主节点运行完好</p></blockquote></li></ol><h2 id="集群模式（Redis-Cluster）"><a href="#集群模式（Redis-Cluster）" class="headerlink" title="集群模式（Redis Cluster）"></a>集群模式（Redis Cluster）</h2><h3 id="Redis-集群架构"><a href="#Redis-集群架构" class="headerlink" title="Redis 集群架构"></a>Redis 集群架构</h3><p>Redis 集群通过将数据分布在多个节点上来实现高可用性和水平扩展。集群中的节点分为两类：</p><ul><li>主节点（Master）：负责处理读写请求和数据存储，每个主节点负责一个或多个哈希槽（Hash Slot）。</li><li>从节点（Slave）：负责复制主节点的数据，提供故障转移和读操作支持。</li></ul><h3 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h3><p>Redis 集群使用哈希槽来分片数据，共有 16384 个哈希槽（从 0 到 16383）。每个键根据其 CRC16 校验和取模 16384 的结果分配到一个特定的哈希槽，然后将这些哈希槽分配给不同的主节点。这样可以实现数据的均匀分布。</p><ul><li>哈希槽机制<ul><li>Redis 集群将所有可能的键分成 16384 个哈希槽（编号从 0 到 16383）。</li><li>每个键根据其哈希值被映射到一个特定的哈希槽上。具体地，Redis 使用 CRC16 算法对键进行哈希计算，然后对 16384 取模来确定哈希槽编号。</li><li>每个哈希槽由一个主节点负责，当集群启动或扩展时，哈希槽在各个主节点之间均匀分布。</li></ul></li><li>哈希槽分配示例<br>假设有 3 个主节点，那么哈希槽的分配可能如下：<ul><li>节点 A：负责哈希槽 0-5460</li><li>节点 B：负责哈希槽 5461-10922</li><li>节点 C：负责哈希槽 10923-16383</li></ul></li><li>数据分片过程<ul><li>键的哈希计算：对每个键进行 CRC16 哈希计算。</li><li>哈希槽确定：将 CRC16 哈希值对 16384 取模，确定该键属于哪个哈希槽。</li><li>哈希槽分配：根据哈希槽所属的主节点，将键存储到对应的主节点上。</li></ul></li><li>数据读写流程<ul><li>写操作：客户端将键值对写入集群时，首先计算键的哈希槽编号，然后将写请求发送到对应的主节点。</li><li>读操作：客户端读取键时，也会计算键的哈希槽编号，然后将读请求发送到对应的主节点。</li></ul></li></ul><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ul><li>查看集群状态<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7000 cluster nodes</span><br></pre></td></tr></table></figure></li><li>手动分配哈希槽<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7000 cluster addslots &#123;slot-number&#125;</span><br></pre></td></tr></table></figure></li><li>迁移哈希槽<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:7000</span><br></pre></td></tr></table></figure></li><li>增加节点<br>当需要扩展集群时，可以添加新节点，并重新分配哈希槽<ul><li>启动新节点。</li><li>使用 redis-cli 将新节点添加到集群。</li><li>迁移部分哈希槽到新节点。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node 127.0.0.1:7006 127.0.0.1:7000</span><br><span class="line">redis-cli --cluster reshard 127.0.0.1:7000</span><br></pre></td></tr></table></figure></li></ul></li><li>删除节点<br>当需要缩减集群时，可以移除节点，并重新分配哈希槽<ul><li>将节点上的哈希槽迁移到其他节点</li><li>使用 redis-cli 将节点从集群中移除<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:7000</span><br><span class="line">redis-cli --cluster del-node 127.0.0.1:7000 &lt;node-id&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h3><ul><li>节点间通信：<ul><li>集群中的每个节点都会通过 Gossip 协议相互通信，定期发送 PING 和 PONG 消息，以检查其他节点的状态。</li><li>当某个主节点发现另一个主节点不可达时，会向集群中的其他节点发送消息，报告该节点的状态。</li></ul></li><li>故障检测：<ul><li>如果一个主节点被大多数节点报告为不可达，该节点会被标记为下线（FAIL）。</li></ul></li><li>选举新主节点：<ul><li>在主节点下线后，集群中的从节点会进行选举，选择一个从节点提升为新的主节点。</li><li>选举过程由 Redis 集群中的节点协作完成，确保在尽可能短的时间内完成主从切换。</li></ul></li><li>数据同步：<ul><li>提升为新主节点的从节点会接管下线主节点的哈希槽，并开始接受客户端的请求。</li><li>集群中的其他节点会更新元数据，识别新的主从关系。</li></ul></li></ul><h2 id="哨兵模式和集群模式对比"><a href="#哨兵模式和集群模式对比" class="headerlink" title="哨兵模式和集群模式对比"></a>哨兵模式和集群模式对比</h2><table><thead><tr><th>特性</th><th>Redis 集群</th><th>Redis 哨兵模式</th></tr></thead><tbody><tr><td>架构</td><td>分布式集群，数据分片</td><td>主从复制架构，专注高可用性</td></tr><tr><td>数据分片</td><td>支持，通过哈希槽分片</td><td>不支持</td></tr><tr><td>自动故障转移</td><td>基于 Gossip 协议和节点选举</td><td>基于哨兵监控和选举领导者</td></tr><tr><td>复杂性</td><td>较高，需要管理多个节点和哈希槽</td><td>较低，主要管理主从复制</td></tr><tr><td>故障检测</td><td>节点间相互监控，基于 Gossip 协议</td><td>哨兵节点监控主从节点</td></tr><tr><td>节点选举</td><td>多个从节点参与选举，集群自动完成</td><td>哨兵节点选举领导者，领导者选新主节点</td></tr><tr><td>适用场景</td><td>需要高扩展性和高可用性的分布式场景</td><td>需要高可用性但不需要数据分片的小规模应用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的持久化机制——RDB和AOF</title>
      <link href="/redis/2.%20Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
      <url>/redis/2.%20Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Redis RDB (Redis Database) 是 Redis 数据库的一种持久化机制，用于将内存中的数据保存到磁盘上，以便在服务器重启或故障时能够恢复数据。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>RDB 通过创建快照（snapshot）的方式，将某一时刻的数据保存到磁盘上的二进制文件中。这个文件通常以 .rdb 为扩展名。RDB 持久化的过程可以由用户手动触发，也可以按照配置的规则自动执行。</p><blockquote><p>什么是快照?可以这样理解，给当前时刻的数据，拍一张照片，然后保存下来。</p></blockquote><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><p>RDB持久化会在指定目录下会生成一个dump.rdb文件，Redis 重启的时候，通过加载dump.rdb文件来恢复数据。RDB触发机制主要有以下几种：</p><ol><li>手动触发<ul><li><code>SAVE</code> 命令：会阻塞 Redis 服务器，直到 RDB 文件创建完成为止。这会导致服务器在保存过程中无法处理其他请求。</li><li><code>BGSAVE</code> 命令：在后台执行保存操作，Redis 服务器可以继续处理请求。BGSAVE 创建一个子进程，该子进程负责将数据写入 RDB 文件。</li></ul></li><li>自动触发<ul><li>通过配置文件中的 save 选项进行设置。例如，配置文件中可以包含以下内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 //如果 900 秒内至少有 1 个 key 被修改，执行 RDB 快照。</span><br><span class="line">save 300 10 //如果 300 秒内至少有 10 个 key 被修改，执行 RDB 快照。</span><br><span class="line">save 60 10000 //如果 60 秒内至少有 10000 个 key 被修改，执行 RDB 快照。</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20220718105455.png"></li></ul></li></ol><h3 id="RDB-文件的恢复"><a href="#RDB-文件的恢复" class="headerlink" title="RDB 文件的恢复"></a>RDB 文件的恢复</h3><p>当 Redis 启动时，如果检测到 RDB 文件存在，它将自动加载该文件中的数据到内存中，从而恢复到保存快照时的状态。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>性能高：RDB 的持久化是通过快照方式完成的，适合不频繁写入但需要快速加载的场景。</li><li>恢复速度快：RDB 文件是紧凑的二进制文件，加载速度快，适合大数据量的快速恢复。</li><li>减少写操作频率：RDB 通过间隔时间的快照减少了频繁的磁盘写操作。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>数据丢失风险：由于 RDB 是周期性持久化，服务器故障时可能会丢失最近一次快照后的数据。</li><li>性能开销：虽然 BGSAVE 可以在后台进行，但创建快照的大数据操作可能影响性能。</li></ul><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Redis AOF（Append-Only File）是 Redis 提供的另一种持久化机制，通过记录每个写操作来实现数据持久化，并在服务器启动时，通过重新执行这些命令来还原数据集。</p><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote><p>AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20220718105427.png"></p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendfsync参数，三个取值：</span><br><span class="line"></span><br><span class="line">always: 每个事件周期都同步刷新一次</span><br><span class="line">everysec: 每一秒都同步刷新一次(默认推荐)</span><br><span class="line">no: 操作系统自己决定什么时候真正写入</span><br></pre></td></tr></table></figure></li><li>AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。</li><li>AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-check-aof --fix</span></span><br></pre></td></tr></table></figure></li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20220718105324.png"></li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基本数据结构类型</title>
      <link href="/redis/1.%20Redis%E4%BB%8B%E7%BB%8D/"/>
      <url>/redis/1.%20Redis%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="redis概念"><a href="#redis概念" class="headerlink" title="redis概念"></a>redis概念</h3><blockquote><p>Redis，英文全称是Remote Dictionary Server（远程字典服务），是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p></blockquote><h3 id="为什么使用Redis"><a href="#为什么使用Redis" class="headerlink" title="为什么使用Redis"></a>为什么使用Redis</h3><blockquote><p>高性能<br>高并发</p></blockquote><h3 id="Redis为什么快"><a href="#Redis为什么快" class="headerlink" title="Redis为什么快"></a>Redis为什么快</h3><blockquote><p>绝大部分请求是内存操作<br>数据结构简单<br>采用单线程，避免竞争<br>使用多路 I&#x2F;O 复用模型，非阻塞 IO</p></blockquote><h3 id="数据类型，五种基本数据类型和三种特殊数据类型"><a href="#数据类型，五种基本数据类型和三种特殊数据类型" class="headerlink" title="数据类型，五种基本数据类型和三种特殊数据类型"></a>数据类型，五种基本数据类型和三种特殊数据类型</h3><blockquote><ul><li>String是Redis最基础的数据结构类型，它是二进制安全的，可以存储图片或者序列化的对象，值最大存储为512M。</li><li>在Redis中，哈希类型是指v（值）本身又是一个键值对（k-v）结构。</li><li>列表（list）类型是用来存储多个有序的字符串，一个列表最多可以存储2^32-1个元素。</li><li>集合（set）类型也是用来保存多个的字符串元素，但是不允许重复元素。</li><li>zset,已排序的字符串集合，同时元素不能重复</li><li>Geo：Redis3.2推出的，地理位置定位，用于存储地理位置信息，并对存储的信息进行操作。</li><li>HyperLogLog：用来做基数统计算法的数据结构，如统计网站的UV。</li><li>Bitmaps ：用一个比特位来映射某个元素的状态，在Redis中，它的底层是基于字符串类型实现的，可以把bitmaps成作一个以比特位为单位的数组。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP与以太网包的收发操作</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP%E4%B8%8E%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8C%85%E7%9A%84%E6%94%B6%E5%8F%91%E6%93%8D%E4%BD%9C/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP%E4%B8%8E%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8C%85%E7%9A%84%E6%94%B6%E5%8F%91%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221208135815.png" alt="IP与以太网包的收发操作基本流程"></p><h2 id="TCP模块再数据前加上TCP头部，传递给IP模块"><a href="#TCP模块再数据前加上TCP头部，传递给IP模块" class="headerlink" title="TCP模块再数据前加上TCP头部，传递给IP模块"></a>TCP模块再数据前加上TCP头部，传递给IP模块</h2><h2 id="IP模块会添加IP头部和MAC头部，封装成一个包"><a href="#IP模块会添加IP头部和MAC头部，封装成一个包" class="headerlink" title="IP模块会添加IP头部和MAC头部，封装成一个包"></a>IP模块会添加IP头部和MAC头部，封装成一个包</h2><h3 id="生成包含接收方IP地址的IP头部"><a href="#生成包含接收方IP地址的IP头部" class="headerlink" title="生成包含接收方IP地址的IP头部"></a>生成包含接收方IP地址的IP头部</h3><p>IP模块接受TCP模块的委托进行包的收发操作，生成IP头部并加在TCP头部前面，IP头部中主要包含接收方的IP地址、发送方的IP地址</p><ul><li>IP 头部的“接收方 IP 地址”填写通信对象的 IP 地址。</li><li>发送方 IP 地址需要判断发送所使用的网卡，并填写该网卡的 IP 地址。</li></ul><h3 id="生成以太网用的MAC头部"><a href="#生成以太网用的MAC头部" class="headerlink" title="生成以太网用的MAC头部"></a>生成以太网用的MAC头部</h3><p>IP头部生成后，需要在IP头部前加上MAC头部，主要包含接收方和发送方的MAC地址以及以太类型</p><ul><li>IP 模块根据路由表 Gateway 栏的内容判断应该把包发送给谁</li><li>根据接收方IP地址查询MAC地址（通过ARP查询），会将查询结果记录到ARP缓存中<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221208140822.png" alt="ARP 查询 MAC 地址"></li></ul><h2 id="IP模块将封装好的包发送到网络硬件（网卡）"><a href="#IP模块将封装好的包发送到网络硬件（网卡）" class="headerlink" title="IP模块将封装好的包发送到网络硬件（网卡）"></a>IP模块将封装好的包发送到网络硬件（网卡）</h2><h2 id="网卡将这些数字信息转换成电信号或光信号通过集线器、路由器等转发设备传递给接收方"><a href="#网卡将这些数字信息转换成电信号或光信号通过集线器、路由器等转发设备传递给接收方" class="headerlink" title="网卡将这些数字信息转换成电信号或光信号通过集线器、路由器等转发设备传递给接收方"></a>网卡将这些数字信息转换成电信号或光信号通过集线器、路由器等转发设备传递给接收方</h2><p><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221208141143.png" alt="网卡结构概念图"></p><h3 id="网卡驱动对硬件进行初始化"><a href="#网卡驱动对硬件进行初始化" class="headerlink" title="网卡驱动对硬件进行初始化"></a>网卡驱动对硬件进行初始化</h3><ul><li>网卡的 ROM 中保存着全世界唯一的 MAC 地址，这是在生产网卡时写入的。</li><li>网卡中保存的 MAC 地址会由网卡驱动程序读取并分配给MAC模块。</li></ul><h3 id="将IP包转换成电或光信号"><a href="#将IP包转换成电或光信号" class="headerlink" title="将IP包转换成电或光信号"></a>将IP包转换成电或光信号</h3><ul><li>MAC 模块会将包从缓冲区中取出，并在开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221208141800.png"></li><li>通过电信号读取数据<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221208142455.png"></li></ul><ol><li>通过测量信号中的电压和电流变化，还原出 0 和 1 两种比特的值。<br>但当出现连续相同信号时不知道何时进行切分</li><li>在数据信号之外再发送一组用来区分比特间隔的时钟信号，时钟信号从下往上变化时读取电压和电流的值。<br>但当距离较远时可能出现时钟偏移</li><li>采用将数据信号和时钟信号叠加在一起的方法。</li></ol><h3 id="向集线器发送网络包"><a href="#向集线器发送网络包" class="headerlink" title="向集线器发送网络包"></a>向集线器发送网络包</h3><p>发送信号的操作分为两种，一种是使用集线器的半双工模式，另一种是使用交换机的全双工模式，发送和接收同时并行的方式叫作“全双工”，相对地，某一时刻只能进行发送或接收其中一种操作的叫作“半双工”。</p><ul><li>使用集线器的半双工模式</li></ul><ol><li>为了避免信号碰撞，某一时刻只能进行发送或接收其中一种</li><li>MAC 模块从报头开始将数字信息按每个比特转换成电信号，然后由 PHY，或者叫 MAU 的信号收发模块发送出去</li><li>PHY（MAU）模块会将信号转换为可在网线上传输的格式，并通过网线发送出去</li><li>当网络拥塞时，信号碰撞可能性提高，发生操作冲突时，会将等待时间延长一倍，再次重试</li></ol><ul><li>使用交换机的全双工模式</li></ul><h2 id="接收方接收后做出响应，以电信号或光信号的方式传输"><a href="#接收方接收后做出响应，以电信号或光信号的方式传输" class="headerlink" title="接收方接收后做出响应，以电信号或光信号的方式传输"></a>接收方接收后做出响应，以电信号或光信号的方式传输</h2><h2 id="网卡将这些信号转换成数字信息传递回给IP模块"><a href="#网卡将这些信号转换成数字信息传递回给IP模块" class="headerlink" title="网卡将这些信号转换成数字信息传递回给IP模块"></a>网卡将这些信号转换成数字信息传递回给IP模块</h2><h2 id="IP模块将TCP头部和数据块传递给TCP模块"><a href="#IP模块将TCP头部和数据块传递给TCP模块" class="headerlink" title="IP模块将TCP头部和数据块传递给TCP模块"></a>IP模块将TCP头部和数据块传递给TCP模块</h2><ol><li>检查 IP 头部，确认格式是否正确</li><li>查看接收方 IP 地址，若接收方 IP 地址不是自己的地址，会通过 ICMP 消息将错误告知发送方</li><li>收到所有分片后，进行分片重组，将包交给TCP模块</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何根据域名获取IP地址</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/DNS%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/DNS%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本流程图"><a href="#基本流程图" class="headerlink" title="基本流程图"></a>基本流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221129142440.png"></p><ol><li>用户主机会首先在自己的DNS高速缓存中查找该域名所应的IP地址。</li><li>如果浏览器缓存没有，那么就检查操作系统的hosts文件。</li><li>上述两步骤都不满足的情况下向DNS服务器查询WEB服务器的IP地址。</li></ol><h2 id="向DNS服务器查询IP地址"><a href="#向DNS服务器查询IP地址" class="headerlink" title="向DNS服务器查询IP地址"></a>向DNS服务器查询IP地址</h2><blockquote><p>在了解如何向DNS查询IP地址之前，我们先了解一下几个基本的东西：</p></blockquote><h3 id="Socket库和解析器"><a href="#Socket库和解析器" class="headerlink" title="Socket库和解析器"></a>Socket库和解析器</h3><ul><li>Socket 库是用于调用网络功能的程序组件集合。</li><li>解析器就是Socket 库中的其中一种程序组件，根据域名查询 IP 地址时，浏览器会使用 Socket 库中的解析器。</li><li>解析器的调用方法<br>在应用程序中编写上gethostbyname方法后就能够调用解析器，调用解析器后，解析器会向 DNS 服务器发送查询消息，然后 DNS 服务器会返回响应消息。响应消息中包含查询到的 IP 地址，解析器会取出 IP 地址，并将其写入浏览器指定的内存地址中，接下来，浏览器在向 Web 服务器发送消息时，只要从该内存地址取出 IP 地址，并将它与 HTTP 请求消息一起交给操作系统就可以了。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221129143832.png" alt="解析器的调用方法"></li><li>解析器的工作原理</li></ul><ol><li>调用解析器</li><li>解析器开始运行</li><li>解析器向 DNS 服务器发送查询消息</li><li>发送消息的操作委托于协议栈完成，协议栈会执行发送消息的操作，然后通过网卡将消息发送给 DNS 服务器</li><li>DNS 服务器收到查询消息后，它会根据消息中的查询内容进行查询（具体如何查询稍后再说），查询到的 IP 地址会被写入响应消息并返回给客户端</li><li>消息经过网络到达客户端，再经过协议栈被传递给解析器</li><li>解析器读取出消息取出 IP 地址，并将 IP 地址传递给应用程序<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221129144248.png" alt="调用解析器时计算机内部的工作流程"></li></ol><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><ul><li>DNS服务器的基本工作<br>DNS 服务器会从域名与 IP 地址的对照表中根据（域名、Class、记录类型）查找相应的记录，并返回 IP 地址。<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221129152347.png" alt="DNS服务器的基本工作"></li></ul><h3 id="向DNS服务器查询IP地址-1"><a href="#向DNS服务器查询IP地址-1" class="headerlink" title="向DNS服务器查询IP地址"></a>向DNS服务器查询IP地址</h3><ol><li>客户端首先会访问最近的一台 DNS 服务器（也就是客户端的 TCP&#x2F;IP 设置中填写的 DNS 服务器地址）进行查找</li><li>如果本地区DNS域名服务器（LDNS）不能解析，那么就直接到根域名服务器请求解析</li><li>根域名服务器会给本地域名服务器（LDNS）一个所查询的主域名服务器（gTLD）地址，gTLD是国际顶级域名服务器，比如.com,.cn,.org等</li><li>本地域名服务器（LDNS）再向上一步返回的主域名服务器（gLTD）服务器发送请求</li><li>主域名服务器（gLTD）服务器查询并返回域名对应的Name Server域名服务器的地址</li><li>Name Server域名服务器会查询存储的域名和ip的映射关系表，将ip连同一个TTL值返回给DNS Server域名服务器</li><li>本地域名服务器（LDNS）拿到ip和TTL会缓存起来，缓存时间由TTL值控制</li><li>把解析的结果返回给用户，用户根据TTL值缓存在本地系统缓存中，域名解析过程结束<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221129153858.png" alt="DNS 服务器之间的查询操作"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络是怎样连接的读书笔记</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>输入url<br>浏览器对url进行解析<br>生成HTTP请求消息<br>DNS解析域名查询IP地址<br>浏览器委托协议栈发送消息</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器委托协议栈发送消息流程</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A7%94%E6%89%98%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A7%94%E6%89%98%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="协议栈发送消息基本流程"><a href="#协议栈发送消息基本流程" class="headerlink" title="协议栈发送消息基本流程"></a>协议栈发送消息基本流程</h2><ol><li>创建套接字</li><li>将管道连接到服务端的套接字上</li><li>收发数据</li><li>断开管道并删除套接字<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/1669883880192.png" alt="协议栈发送消息基本流程"></li></ol><h2 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h2><h3 id="协议栈的内部结构"><a href="#协议栈的内部结构" class="headerlink" title="协议栈的内部结构"></a>协议栈的内部结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/20221201161742.png" alt="TCP/IP软件的分成结构"></p><ul><li>协议栈的上半部分有两块，分别是负责用 TCP 协议收发数据的部分和负责用 UDP 协议收发数据的部分，它们会接受应用程序的委托执行收发数据的操作。<ol><li>浏览器、邮件等一般应用程序收发数据时用 TCP</li><li>DNS 查询等收发较短的控制数据时用UDP</li></ol></li><li>下面一半是用 IP 协议控制网络包收发操作的部分。在互联网上传送数据时，数据会被切分成一个一个的网络包，而将网络包发送给通信对象的操作就是由 IP 来负责的。此外，IP 中还包括 ICMP 协议和 ARP 协议。 ICMP 用于告知网络包传送过程中产生的错误以及各种控制消息，ARP 用于根据 IP 地址查询相应的以太网 MAC 地址。</li></ul><h3 id="套接字的实体就是通信控制信息"><a href="#套接字的实体就是通信控制信息" class="headerlink" title="套接字的实体就是通信控制信息"></a>套接字的实体就是通信控制信息</h3><ul><li>协议栈内部有一块用于存放控制信息的内存空间，这里记录了用于控制通信操作的控制信息，例如通信对象的 IP 地址、端口号、通信操作的进行状态等,可以说这些控制信息就是套接字的实体。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano // 显示套接字内容，具体内容代表的意义不做阐述</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建套接字过程"><a href="#创建套接字过程" class="headerlink" title="创建套接字过程"></a>创建套接字过程</h3><ul><li>创建套接字时，首先分配一个套接字所需的内存空间，然后向其中写入初始状态。将表示这个套接字的描述符告知应用程序。</li><li>收到描述符之后，应用程序在向协议栈进行收发数据委托时就需要提供这个描述符，协议栈就能得知应该和谁进行通信了。</li></ul><h2 id="将管道连接到服务器端的套接字上"><a href="#将管道连接到服务器端的套接字上" class="headerlink" title="将管道连接到服务器端的套接字上"></a>将管道连接到服务器端的套接字上</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol><li>套接字创建完成后，协议栈不知道通信的对象是谁，也不知道数据应该发送给谁，我们需要把服务器的 IP 地址和端口号等信息告知协议栈。</li><li>客户端需要向服务器传达开始通信的请求</li><li>为数据收发做准备</li></ol><h3 id="通信操作中的两种控制信息"><a href="#通信操作中的两种控制信息" class="headerlink" title="通信操作中的两种控制信息"></a>通信操作中的两种控制信息</h3><ol><li>头部中记录的信息，例如TCP头部、以太网头部、IP头部…</li><li>套接字（协议栈中的内存空间）中记录的信息,用来控制协议栈操作的信息</li></ol><h3 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h3><ol><li>客户端先创建一个包含表示开始数据收发操作的控制信息的头部</li><li>将头部中的控制位的 SYN 比特设置为 1，设置适当的序号和窗口大小</li><li>TCP 模块将信息传递给 IP 模块并委托它进行发送</li><li>IP 模块会将接收到的数据传递给服务器的 TCP 模块，TCP 模块可以根据 TCP 头部中的信息找到端口号对应的套接字，并将状态改为正在连接</li><li>服务器的 TCP 模块会返回响应，在 TCP 头部中设置发送方和接收方端口号以及 SYN 比特，并将 ACK 控制位设为 1</li><li>服务器 TCP 模块会将 TCP 头部传递给 IP 模块，并委托 IP 模块向客户端返回响应</li><li>IP 模块会将接收到的数据传递给客户端的 TCP 模块，TCP 模块可以根据 TCP 头部中的信息确认连接服务器的操作是否成功，SYN 为 1 则表示连接成功，这时会向套接字中写入服务器的 IP 地址、端口号等信息，同时还会将状态改为连接完毕</li><li>客户端将 ACK 控制位设置为 1 并发回服务器，告诉服务器刚才的响应包已经收到</li></ol><h2 id="收发数据"><a href="#收发数据" class="headerlink" title="收发数据"></a>收发数据</h2><h3 id="将HTTP请求消息交给协议栈"><a href="#将HTTP请求消息交给协议栈" class="headerlink" title="将HTTP请求消息交给协议栈"></a>将HTTP请求消息交给协议栈</h3><ul><li>协议栈不关心数据内容，收到数据后会先将数据放在发送缓冲区中，等待应用程序下一段数据，防止发送大量小包降低网络效率，判断要素主要根据MTU参数以及应用程序发送数据频率</li></ul><h3 id="对较大数据进行拆分"><a href="#对较大数据进行拆分" class="headerlink" title="对较大数据进行拆分"></a>对较大数据进行拆分</h3><ul><li>当HTTP请求消息过长时，数据会被以MSS长度为单位进行拆分，在发送数据时在每一块拆分的数据前加上TCP头部</li></ul><h3 id="使用ACK号确认网络包已收到"><a href="#使用ACK号确认网络包已收到" class="headerlink" title="使用ACK号确认网络包已收到"></a>使用ACK号确认网络包已收到</h3><ul><li>在发送网络包后需要进行确认操作，拆分数据时会记录数据为头部开始的第几个字节，同样地接受数据也会判断是接收数据的第几个字节，检测是否有遗漏，将接收到的数据长度写入TCP头部中的ACK号，并将ACK控制位设为1，通过“序号”和“ACK 号”可以确认接收方是否收到了网络包，服务端传给客户端原理相同</li><li>实际操作流程<br><img src="https://cdn.jsdelivr.net/gh/Conven1/picode/img/1669946813514.png" alt="序号与ACK号的交互"></li></ul><ol><li>客户端在连接时需要计算出与从客户端到服务器方向通信相关的序号初始值，并将这个值发送给服务器</li><li>服务器通过这个初始值计算出 ACK 号并返回给客户端，服务器也需要计算出与从服务器到客户端方向通信相关的序号初始值，并将这个值发送给客户端</li><li>客户端也需要根据服务器发来的初始值计算出 ACK 号并返回给服务器</li><li>进入数据收发阶段，序号会跟随数据一起发送，服务器收到数据后再返回 ACK 号，反之亦然</li></ol><h3 id="根据网络包平均往返时间调整ACK号等待时间"><a href="#根据网络包平均往返时间调整ACK号等待时间" class="headerlink" title="根据网络包平均往返时间调整ACK号等待时间"></a>根据网络包平均往返时间调整ACK号等待时间</h3><h3 id="使用窗口有效管理ACK号"><a href="#使用窗口有效管理ACK号" class="headerlink" title="使用窗口有效管理ACK号"></a>使用窗口有效管理ACK号</h3><ul><li>使用滑动窗口的方式发送数据，不等待ACK号的返回直接发送后续包，接收方将数据暂存在接收缓冲区，接收数据完成后会将缓冲区的数据释放并通过头部的窗口字段告知发送方能继续接收的数据量</li><li>接收方在发送ACK号与窗口时会等待一段时间，将需要返回的数据合并为一个包，仅告知最后的ACK号与最后的窗口更新即可</li></ul><h3 id="接收HTTP响应消息"><a href="#接收HTTP响应消息" class="headerlink" title="接收HTTP响应消息"></a>接收HTTP响应消息</h3><ul><li>协议栈会检查收到的数据块和TCP头部内容，数据未发生异常返回ACK号，协议栈将数据暂存于接收缓冲区，将数据块还原成原始数据复制到应用程序指定的内存地址中，将控制流程交回给应用程序</li></ul><h2 id="断开管道并删除套接字"><a href="#断开管道并删除套接字" class="headerlink" title="断开管道并删除套接字"></a>断开管道并删除套接字</h2><ul><li>在数据收发操作完成后，客户端与服务端都可以发起断开过程，以客户端断开为例：</li></ul><ol><li>客户端发送 FIN</li><li>服务器返回 ACK 号</li><li>服务器发送 FIN</li><li>客户端返回 ACK 号</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的名词定义</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>URL：Uniform Resource Locator，统一资源定位符。</p><p>FTP：File Transfer Protocol，文件传送协议。</p><p>域名：就是像 <a href="http://www.baidu.com/">www.baidu.com</a> 这样以句点（.）分隔的名称。</p><p>HTTP：Hypertext Transfer Protocol，超文本传送协议。</p><p>协议：通信操作的规则定义称为协议（protocol）。</p><p>URI：Uniform Resource Identifier，统一资源标识符。</p><p>CGI 程序：对 Web 服务器程序调用其他程序的规则所做的定义就是 CGI，而按照 CGI 规范来工作的程序就称为 CGI 程序。</p><p>路由器：一种按照以太网规则对包进行转发的设备。</p><p>集线器：一种按照 IP 规则对包进行转发的设备。</p><p>TCP&#x2F;IP 的结构：就是由一些小的子网，通过路由器 连接起来组成一个大的网络。这里的子网可以理解为用集线器连接起来的几台计算机 ，我们将它看作一个单位，称为子网。将子网通过路由器连接起来，就形成了一个网络。</p><p>IP：TCP&#x2F;IP 网络是通过 IP 地址来确定通信对象的，IP 地址是一串 32 比特的数字，按照 8 比特（1 字节）为一组分成 4 组，由网络号和主机号组成，但这两部分的具体结构是不固定的，需要子网掩码来表示IP地址的内部结构。主机号全0表示整个子网，全1表示向子网所有设备广播。</p><p>子网掩码：用来判断 IP 地址中网络号与主机号分界线的值，是一串与 IP 地址长度相同的 32 比特数字，其左边一半都是 1，右边一半都是 0。1 的部分表示网络号，0 的部分表示主机号。</p><p>DNS：Domain Name System，域名服务系统。将服务器名称和 IP 地址进行关联是 DNS 最常见的用法，但 DNS 的功能并不仅限于此，它还可以将邮件地址和邮件服务器进行关联，以及为各种信息关联相应的名称。</p><p>TTL：（Time To Live）IP包被路由器丢弃之前允许通过的最大网段数量，作用是限制IP数据包在计算机网络中的存在的时间。</p><p>Socket库：是网络开发中的一种标准库，DNS解析器就是这个库中的其中一种程序组件。</p><p>协议栈：操作系统内部的网络控制软件，也叫“协议驱动”“TCP&#x2F;IP 驱动”等。</p><p>缓存：指的是将使用过的数据存放在离使用该数据的地方较近的高速存储装置中，以便提高后续访问速度的技术。</p><p>套接字：TCP 协议收发数据的过程中数据通道两端的数据出入口。</p><p>描述符：应用程序用来识别套接字的机制。</p><p>IP 地址和端口号：客户端和服务器之间用来识别对方套接字的机制。</p><p>TCP：传输控制协议（Transmission Control Protocol），浏览器、邮件等一般应用程序收发数据时用 TCP。</p><p>UDP：用户数据报协议（User Datagram Protocol），DNS 查询等收发较短的控制数据时用UDP。</p><p>ICMP：Internet控制报文协议（Internet Control Message Protocol），用于告知网络包传送过程中产生的错误以及各种控制消息。</p><p>ARP：地址解析协议（Address Resolution Protocol），用于根据 IP 地址查询相应的以太网 MAC 地址。</p><p>网络包：网络中的数据会被切分成几十字节到几千字节的小块，每一个小数据块被称为一个包。</p><p>MAC：媒体访问控制（Media Access Control）。</p><p>MAC 地址：符合 IEEE 规格的局域网设备都使用同一格式的地址，这种地址被称为 MAC 地址。</p><p>PID：进程标识符（Process ID），操作系统为了标识程序而分配的编号，使用任务管理器可以查询所对应的程序名称。</p><p>MTU：最大传输单元（Maximum Transmission Unit），以太网中一般为 1500 字节。</p><p>MSS：最大分段大小（Maximum Segment Size）。 TCP 和 IP 的头部加起来一般是 40 字节，因此 MTU 减去这个长度就是 MSS。</p><p>SFD：起始帧分界符（Start Frame Delimiter）。</p><p>FCS：帧校验序列（Frame Check Sequence）。</p><p>Gateway：网关，在 TCP&#x2F;IP 的世界里就是路由器的意思。</p><p>以太网：是一种为多台计算机能够彼此自由和廉价地相互通信而设计的通信技术，普遍使用交换式集线器（交换机）这一结构。</p><p>CRC：循环冗余校验（Cyclic Redundancy Check）。</p><p>MAU：介质连接单元（Medium Attachment Unit）。</p><p>PHY：物理层装置（Physical Layer Device）。</p><p>阻塞信号：以太网中发生碰撞时，为了告知所有设备而发送的一种特殊信号。</p><p>MDI：媒体相关接口（Media Dependent Interface）。</p><p>ADSL: 非对称数字用户线路（Asymmetric Digital Subscriber Line）。</p><p>FTTH：光纤到户（Fibre To The Home）。</p><p>ICMP：Internet 控制报文协议（Internet Control Message Protocol）。</p><p>BAS：宽带接入服务器（Broadband Access Server）。</p><p>PPP：点到点协议（Point-to-Point Protocol）。</p><p>ATM：异步传输（Asynchronous Transfer Mode）。</p><p>ASK：振幅调制。</p><p>PSK：相位调制。</p><p>QAM：正交振幅调制。</p><p>IDF：中间配线盘（Intermediate Distribution Frame）。</p><p>MDF：主配线盘（总配线架）（Main Distribution Frame）。</p><h2 id="HTTP主要头字段"><a href="#HTTP主要头字段" class="headerlink" title="HTTP主要头字段"></a>HTTP主要头字段</h2><h3 id="通用头：适用于请求和响应消息的头字段。"><a href="#通用头：适用于请求和响应消息的头字段。" class="headerlink" title="通用头：适用于请求和响应消息的头字段。"></a>通用头：适用于请求和响应消息的头字段。</h3><p>Date：表示请求和响应生成的日期。<br>Pragma：表示数据是否允许缓存的通信选项。<br>Cache-Control：控制缓存的相关信息。<br>Connection：设置发送响应之后 TCP 连接是否继续保持的通信选项。<br>Transfer-Encoding：表示消息主体的编码格式。<br>Via：记录途中经过的代理和网关。</p><h3 id="请求头：用于表示请求消息的附加信息的头字段"><a href="#请求头：用于表示请求消息的附加信息的头字段" class="headerlink" title="请求头：用于表示请求消息的附加信息的头字段"></a>请求头：用于表示请求消息的附加信息的头字段</h3><p>Authorization：身份认证数据。<br>From：请求发送者的邮件地址<br>If-Modified-Since：如果希望仅当数据在某个日期之后有更新时才执行请求，可以在这个字段指定希望的日期。一般来说，<br>这个功能的用途在于判断客户端缓存的数据是否已经过期，如果已经过期则获取新的数据。<br>Referer：当通过点击超级链接进入下一个页面时，在这里会记录下上一个页面的 URI。<br>User-Agent：客户端软件的名称和版本号等相关信息。<br>Accept：客户端可支持的数据类型（Content-Type），以 MIME 类型来表示。<br>Accept-Charset：客户端可支持的字符集。<br>Accept-Encoding：客户端可支持的编码格式（Content-Encoding），一般来说表示数据的压缩格式。<br>Accept-Language：客户端可支持的语言，汉语为 zh，英语为 en。<br>Host：接收请求的服务器 IP 地址和端口号。<br>If-Unmodified-Since：当指定日期之后数据未更新时执行请求。<br>Range：当需要只获取部分数据而不是全部数据时，可通过这个字段指定要获取的数据范围。</p><h3 id="响应头：用于表示响应消息的附加信息的头字段"><a href="#响应头：用于表示响应消息的附加信息的头字段" class="headerlink" title="响应头：用于表示响应消息的附加信息的头字段"></a>响应头：用于表示响应消息的附加信息的头字段</h3><p>Location：表示信息的准确位置。当请求的 URI 为相对路径时，这个字段用来返回绝对路径。<br>Server：服务器程序的名称和版本号等相关信息。<br>WWW-Authenticate：当请求的信息存在访问控制时，返回身份认证用的数据。<br>Accept-Ranges：当希望仅请求部分数据（使用 Range 来指定范围）时，服务器会告知客户端是否支持这一功能。</p><h3 id="实体头：用于表示实体（消息体）的附加信息的头字段"><a href="#实体头：用于表示实体（消息体）的附加信息的头字段" class="headerlink" title="实体头：用于表示实体（消息体）的附加信息的头字段"></a>实体头：用于表示实体（消息体）的附加信息的头字段</h3><p>Allow：表示指定的 URI 支持的方法。<br>Content-Encoding：当消息体经过压缩等编码处理时，表示其编码格式。<br>Content-Length：表示消息体的长度。<br>Content-Type：表示消息体的数据类型，以 MIME 规格定义的数据类型来表示。<br>Expires：表示消息体的有效期。<br>Content-Language：表示消息体的语言。汉语为 zh，英语为 en。<br>Content-Location：表示消息体在服务器上的位置（URI）。<br>Content-Range：当仅请求部分数据时，表示消息体包含的数据范围。</p><h2 id="TCP头部-20Byte-格式"><a href="#TCP头部-20Byte-格式" class="headerlink" title="TCP头部(20Byte)格式"></a>TCP头部(20Byte)格式</h2><table><thead><tr><th>字段名称</th><th>长度（Bit）</th><th>含义</th></tr></thead><tbody><tr><td>发送方端口号</td><td>16</td><td>发送网络包的程序的端口号</td></tr><tr><td>接收方端口号</td><td>16</td><td>网络包的接收方程序的端口号</td></tr><tr><td>序号（发送数据的顺序编号）</td><td>32</td><td>发送方告知接收方该网络包发送的数据相当于所有发送数据的第几个字节</td></tr><tr><td>ACK 号（接收数据的顺序编号）</td><td>32</td><td>接收方告知发送方接收方已经收到了所有数据的第几个字节。其中，ACK 是 acknowledge 的缩写</td></tr><tr><td>数据偏移量</td><td>4</td><td>表示数据部分的起始位置，也可以认为表示头部的长度保留 6 该字段为保留，现在未使用</td></tr><tr><td>控制位</td><td>6</td><td>该字段中的每个比特分别表示以下通信控制含义<br/>URG：表示紧急指针字段有效<br/>ACK：表示接收数据序号字段有效，一般表示数据已被接收方收到<br/>PSH：表示通过 flush 操作发送的数据<br/>RST：强制断开连接，用于异常中断的情况<br/>SYN：发送方和接收方相互确认序号，表示连接操作<br/>FIN：表示断开连接</td></tr><tr><td>窗口</td><td>16</td><td>接收方告知发送方窗口大小（即无需等待确认可一起发送的数据量）</td></tr><tr><td>校验和</td><td>16</td><td>用来检查是否出现错误</td></tr><tr><td>紧急指针</td><td>16</td><td>表示应紧急处理的数据位置</td></tr></tbody></table><h2 id="IP头部格式"><a href="#IP头部格式" class="headerlink" title="IP头部格式"></a>IP头部格式</h2><table><thead><tr><th>字段名称</th><th>长度（Bit）</th><th>含义</th></tr></thead><tbody><tr><td>版本号</td><td>4</td><td>IP 协议版本号，目前使用的是版本 4</td></tr><tr><td>头部长度（IHL）</td><td>4</td><td>IP 头部的长度。可选字段可导致头部长度变化，因此这里需要指定头部的长度</td></tr><tr><td>服务类型（ToS）</td><td>8</td><td>表示包传输优先级。最初的协议规格里对这个参数的规定很模糊，最近 DiffServ 规格重新定义了这个字段的用法</td></tr><tr><td>总长度</td><td>16</td><td>表示 IP 消息的总长度</td></tr><tr><td>ID 号</td><td>16</td><td>用于识别包的编号，一般为包的序列号。如果一个包被 IP 分片，则所有分片都拥有相同的ID</td></tr><tr><td>标志（Flag）</td><td>3</td><td>该字段有 3 个比特，其中 2 个比特有效，分别代表是否允许分片，以及当前包是否为分片包</td></tr><tr><td>分片偏移量</td><td>13</td><td>表示当前包的内容为整个 IP 消息的第几个字节开始的内容</td></tr><tr><td>生存时间（TTL）</td><td>8</td><td>表示包的生存时间，这是为了避免网络出现回环时一个包永远在网络中打转。每经过一个路由器，这个值就会减 1，减到 0 时这个包就会被丢弃</td></tr><tr><td>协议号</td><td>8</td><td>协议号表示协议的类型（以下均为十六进制）。<br/>TCP: 06<br/>UDP: 11<br/>ICMP: 01</td></tr><tr><td>头部校验和</td><td>16</td><td>用于检查错误，现在已不使用</td></tr><tr><td>发送方 IP地址</td><td>32</td><td>网络包发送方的 IP 地址</td></tr><tr><td>接收方 IP地址</td><td>32</td><td>网络包接收方的 IP 地址</td></tr></tbody></table><h2 id="MAC头部格式"><a href="#MAC头部格式" class="headerlink" title="MAC头部格式"></a>MAC头部格式</h2><table><thead><tr><th>字段名称</th><th>长度（Bit）</th><th>含义</th></tr></thead><tbody><tr><td>接收方MAC地址</td><td>48</td><td>网络包接收方的 MAC 地址，在局域网中使用这一地址来传输网络包</td></tr><tr><td>发送方MAC地址</td><td>48</td><td>网络包发送方的 MAC 地址，接收方通过它来判断是谁发送了这个包</td></tr><tr><td>以太类型</td><td>16</td><td>使用的协议类型。下面是一些常见的类型，一般在 TCP&#x2F;IP 通信中只使用 0800和 0806 这两种。<br/>0000-05DC：IEEE 802.3<br/>0800 ：IP 协议<br/>0806 ：ARP 协议<br/>86DD ：IPv6</td></tr></tbody></table><h2 id="ICMP消息"><a href="#ICMP消息" class="headerlink" title="ICMP消息"></a>ICMP消息</h2><table><thead><tr><th>消息</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>Echo reply</td><td>0</td><td>响应 Echo 消息</td></tr><tr><td>Destination unreachable</td><td>3</td><td>出于某些原因包没有到达目的地而是被丢弃，则通过此消息通知发送方。可能的原因包括目标 IP 地址在路由表中不存在；目标端口号不存在对应的套接字；需要分片，但分片被禁用</td></tr><tr><td>Source quench</td><td>4</td><td>当发送的包数量超过路由器的转发能力时，超过的部分会被丢弃，这时会通过这一消息通知发送方。但是，并不是说遇到这种情况一定会发送这一消息。当路由器的性能不足时，可能连这条消息都不发送，就直接把多余的包丢弃了。当发送方收到这条消息时，必须降低发送速率</td></tr><tr><td>Redirect</td><td>5</td><td>当查询路由表后判断该包的入口和出口为同一个网络接口时，则表示这个包不需要该路由器转发，可以由发送方直接发送给下一个路由器。遇到这种情况时，路由器会发送这条消息，给出下一个路由器的 IP 地址，指示发送方直接发送过去</td></tr><tr><td>Echo</td><td>8</td><td>ping 命令发送的消息。收到这条消息的设备需返回一个 Echo reply 消息，以便确认通信对象是否存在</td></tr><tr><td>Time exceeded</td><td>11</td><td>由于超过了 IP 头部中的 TTL 字段表示的存活时间而被路由器丢弃，此时路由器会向发送方发送这条消息</td></tr><tr><td>Parameter problem</td><td>12</td><td>由于 IP 头部字段存在错误而被丢弃，此时会向发送方发送这条消息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>blog维护</title>
      <link href="/blog%E7%BB%B4%E6%8A%A4/"/>
      <url>/blog%E7%BB%B4%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="GitHub-ipAddress"><a href="#GitHub-ipAddress" class="headerlink" title="GitHub ipAddress"></a>GitHub ipAddress</h3><blockquote><p>github无法访问时</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.ipaddress.com/site/github.com </span><br></pre></td></tr></table></figure><h3 id="cdn-jsdelivr-net-ipAddress"><a href="#cdn-jsdelivr-net-ipAddress" class="headerlink" title="cdn.jsdelivr.net ipAddress"></a>cdn.jsdelivr.net ipAddress</h3><blockquote><p>图片无法加载时</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://seo.chinaz.com/raw.githubusercontent.com</span><br></pre></td></tr></table></figure><h3 id="DNS刷新"><a href="#DNS刷新" class="headerlink" title="DNS刷新"></a>DNS刷新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><h3 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo c  --清除缓存</span><br><span class="line">hexo g  --生成静态文件</span><br><span class="line">hexo s  --部署服务</span><br><span class="line">hexo d  --部署到环境</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>el-upload上传视频记录视频时长</title>
      <link href="/vue/Element/%E8%A7%86%E9%A2%91%E4%B8%8A%E4%BC%A0%E8%AE%A1%E7%AE%97%E8%A7%86%E9%A2%91%E6%97%B6%E9%95%BF/"/>
      <url>/vue/Element/%E8%A7%86%E9%A2%91%E4%B8%8A%E4%BC%A0%E8%AE%A1%E7%AE%97%E8%A7%86%E9%A2%91%E6%97%B6%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-change</span>=<span class="string">&quot;handleVideoChange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;video/*&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleVideoChange</span>(<span class="params">file, List</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file || !file.<span class="property">raw</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> getVideoInfo = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> videoElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">        videoElement.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(file.<span class="property">raw</span>);</span><br><span class="line">        videoElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;loadedmetadata&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(&#123;</span><br><span class="line">            <span class="attr">duration</span>: videoElement.<span class="property">duration</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      getVideoInfo.<span class="title function_">then</span>(<span class="function">(<span class="params">videoInfo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(videoInfo.<span class="property">duration</span>.<span class="title function_">toFixed</span>(<span class="number">0</span>));</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Host is not allowed to connect to this MySQL server, MySQL设置允许外部服务器连接</title>
      <link href="/mysql/mysql%E8%AE%BE%E7%BD%AE%E5%85%81%E8%AE%B8%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5/"/>
      <url>/mysql/mysql%E8%AE%BE%E7%BD%AE%E5%85%81%E8%AE%B8%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>报错信息：Host is not allowed to connect to this MySQL server</p></blockquote><ul><li>查询用户访问权限<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select t.host from user t where t.user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li><li>修改并更新权限<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vue中进行PDF预览</title>
      <link href="/vue/%E5%B7%A5%E5%85%B7/PDF%E9%A2%84%E8%A7%88/"/>
      <url>/vue/%E5%B7%A5%E5%85%B7/PDF%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h2 id="pdf-js"><a href="#pdf-js" class="headerlink" title="pdf.js"></a>pdf.js</h2><blockquote><p><a href="http://mozilla.github.io/pdf.js/getting_started/">下载引入pdf.js</a></p></blockquote><blockquote><p>在页面中使用pdf.js</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">&quot;fd-jspdf&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fd-jspdf&quot;</span> @<span class="attr">load</span>=<span class="string">&quot;getPage&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;`static/pdf/web/viewer.html?file=$&#123;sourceUrl&#125;&amp;page=$&#123;pageNumber&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注释掉viewer.js的跨域配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if (fileOrigin !== viewerOrigin) &#123;</span></span><br><span class="line"><span class="comment">//   throw new Error(&quot;file origin does not match viewer&#x27;s&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>获取当前页与总页数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fd-jspdf&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (iframe.<span class="property">contentDocument</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> root = iframe.<span class="property">contentDocument</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;viewerContainer&#x27;</span>);</span><br><span class="line">        root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentPage</span> = iframe.<span class="property">contentDocument</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pageNumber&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">numPages</span> = iframe.<span class="property">contentDocument</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;numPages&#x27;</span>).<span class="property">innerText</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>调转到指定页<br> 在viewer.js中的setInitialView(storedHash)方法中添加以下代码，在PDFurl中使用参数page</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c_url=<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line"><span class="keyword">if</span>(c_url.<span class="title function_">indexOf</span>(<span class="string">&quot;&amp;&quot;</span>)&amp;&amp;c_url.<span class="title function_">indexOf</span>(<span class="string">&quot;=&quot;</span>))&#123;<span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">var</span> c_urlArray=&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> c_val=c_url.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> c_valArray=c_val.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;c_valArray.<span class="property">length</span>;i++)&#123;<span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">let</span> c_key=c_valArray[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> c_value=c_valArray[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">        c_urlArray[c_key]=c_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转至指定页码</span></span><br><span class="line">    <span class="keyword">if</span>(c_urlArray[<span class="string">&#x27;page&#x27;</span>])&#123;<span class="literal">undefined</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pageNumber&#x27;</span>).<span class="property">value</span> = c_urlArray[<span class="string">&#x27;page&#x27;</span>]*<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pdfViewer</span>.<span class="property">currentPageNumber</span> = c_urlArray[<span class="string">&#x27;page&#x27;</span>]*<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">pdfViewer</span>.<span class="property">currentPageNumber</span>,<span class="string">&#x27;this.pdfViewer.currentPageNumber==&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现分片加载按需加载</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web/viewer.<span class="property">js</span></span><br><span class="line">  <span class="attr">disableAutoFetch</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="literal">true</span>,<span class="comment">//false,</span></span><br><span class="line">    <span class="attr">kind</span>: <span class="title class_">OptionKind</span>.<span class="property">API</span> + <span class="title class_">OptionKind</span>.<span class="property">PREFERENCE</span></span><br><span class="line">  &#125;,</span><br><span class="line">build/pdf.<span class="property">js</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DEFAULT_RANGE_CHUNK_SIZE</span> = <span class="number">65536</span>*<span class="number">16</span>;<span class="comment">//*16即分片为1M</span></span><br></pre></td></tr></table></figure><blockquote><p>放大、缩小</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">narrow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fd-jspdf&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iframe.<span class="property">contentDocument</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> zoomOut = iframe.<span class="property">contentDocument</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zoomOut&#x27;</span>);</span><br><span class="line">      zoomOut.<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">magnify</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fd-jspdf&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iframe.<span class="property">contentDocument</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> zoomIn = iframe.<span class="property">contentDocument</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zoomIn&#x27;</span>);</span><br><span class="line">      zoomIn.<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="vue-pdf"><a href="#vue-pdf" class="headerlink" title="vue-pdf"></a>vue-pdf</h2><blockquote><p>引人vue-pdf</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i pdfjs-dist@2.5.207</span><br><span class="line"></span><br><span class="line">npm i vue-pdf@4.2.0</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdf <span class="keyword">from</span> <span class="string">&#x27;vue-pdf&#x27;</span>;</span><br><span class="line"><span class="comment">//使用组件</span></span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">  pdf,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>页面中使用vue-pdf</p></blockquote><ol><li>整页模式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pdf</span> <span class="attr">class</span>=<span class="string">&quot;pdf-page&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;page in numPages&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;page&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;sourceUrl&quot;</span> <span class="attr">:page</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>单页模式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pdf</span> <span class="attr">ref</span>=<span class="string">&quot;pdf&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;pdfUrl&quot;</span> <span class="attr">:page</span>=<span class="string">&quot;pageNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>获取总页数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getNumPages</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loadingTask = pdf.<span class="title function_">createLoadingTask</span>(<span class="variable language_">this</span>.<span class="property">sourceUrl</span>);</span><br><span class="line">  loadingTask.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">pdf</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numPages</span> = pdf.<span class="property">numPages</span>;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;pdf加载失败&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>整页模式中需通过计算获取当前页</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.root&#x27;</span>);</span><br><span class="line">  root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pdfDOM = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pdf-page&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentPage</span> = ((root.<span class="property">scrollTop</span> + root.<span class="property">offsetHeight</span>) / pdfDOM.<span class="property">offsetHeight</span>).<span class="title function_">toFixed</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>放大缩小</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">narrow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scale</span> += -<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content&#x27;</span>);</span><br><span class="line">  dom.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="variable language_">this</span>.scale, <span class="number">10</span>)&#125;</span>%`</span>;</span><br><span class="line">  <span class="comment">//重新计算当前页</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">computeCurrentPage</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">magnify</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scale</span> += <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content&#x27;</span>);</span><br><span class="line">  dom.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="variable language_">this</span>.scale, <span class="number">10</span>)&#125;</span>%`</span>;</span><br><span class="line">  <span class="comment">//重新计算当前页</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">computeCurrentPage</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">computeCurrentPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.root&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> pdfDOM = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pdf-page&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">currentPage</span> = ((root.<span class="property">scrollTop</span> + root.<span class="property">offsetHeight</span>) / pdfDOM.<span class="property">offsetHeight</span>).<span class="title function_">toFixed</span>(<span class="number">0</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断当前使用的浏览器的版本</title>
      <link href="/js/%E5%89%8D%E7%AB%AF%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%89%88%E6%9C%AC/"/>
      <url>/js/%E5%89%8D%E7%AB%AF%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开发过程中，我们常常需要判断当前浏览器的使用版本来执行不同操作，我们可以使用<code>window.navigator.userAgent.toLowerCase()</code>方法来获取当前浏览器版本。  </p></blockquote><blockquote><p>如何判断是否为微信内置浏览器</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isWxLLQ  = <span class="regexp">/micromessenger/i</span>.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点击或切换页面后回到原页面的顶部</title>
      <link href="/js/%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8/"/>
      <url>/js/%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>绑定点击事件或执行以下方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scrollToTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pageNode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;top&#x27;</span>);</span><br><span class="line">    pageNode.<span class="title function_">scrollIntoView</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios键盘更改回车为搜索按钮</title>
      <link href="/css/bug/ios%E9%94%AE%E7%9B%98%E6%90%9C%E7%B4%A2%E6%8C%89%E9%92%AE/"/>
      <url>/css/bug/ios%E9%94%AE%E7%9B%98%E6%90%9C%E7%B4%A2%E6%8C%89%E9%92%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;activity.common.searchTrain&#x27;)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;search&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;onAfterInputSearch&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span> &#123;</span><br><span class="line">  -webkit-appearance:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>::-webkit-search-cancel-button &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icon无法显示的问题</title>
      <link href="/css/bug/icon%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/css/bug/icon%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目中出现了icon无法显示的问题</p></blockquote><blockquote><p>可能出现该问题的原因：<br>某个icon中具有<code>&lt;clipPath&gt;</code>标签导致的，<code>&lt;clipPath&gt;</code>标记的作用相当于一个蒙版，它能限制哪些地方可见，哪些地方不可见。<code>&lt;clipPath&gt;</code>标记指定的区域之外的所有内容都不会被显示(图像不会被绘制出来)。 </p></blockquote><blockquote><p>解决办法:<br>替换该icon文件或者根据需求修改该标签下的值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器样式清除</title>
      <link href="/css/%E5%B1%9E%E6%80%A7/reset.css/"/>
      <url>/css/%E5%B1%9E%E6%80%A7/reset.css/</url>
      
        <content type="html"><![CDATA[<h1 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">span</span>,applet,<span class="selector-tag">object</span>,<span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,pre,<span class="selector-tag">a</span>,<span class="selector-tag">abbr</span>,acronym,</span><br><span class="line"><span class="selector-tag">address</span>,big,<span class="selector-tag">cite</span>,<span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>,<span class="selector-tag">dfn</span>,<span class="selector-tag">em</span>,<span class="selector-tag">img</span>,<span class="selector-tag">ins</span>,<span class="selector-tag">kbd</span>,</span><br><span class="line"><span class="selector-tag">q</span>,s,<span class="selector-tag">samp</span>,small,strike,<span class="selector-tag">strong</span>,</span><br><span class="line">sub,<span class="selector-tag">sup</span>,tt,<span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>,u,<span class="selector-tag">i</span>,center,</span><br><span class="line"><span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,<span class="selector-tag">form</span>,<span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,<span class="selector-tag">table</span>,<span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">tbody</span>,<span class="selector-tag">tfoot</span>,<span class="selector-tag">thead</span>,</span><br><span class="line"><span class="selector-tag">tr</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">canvas</span>,<span class="selector-tag">details</span>,embed,</span><br><span class="line"><span class="selector-tag">figure</span>,<span class="selector-tag">figcaption</span>,<span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,<span class="selector-tag">hgroup</span>,<span class="selector-tag">menu</span>,<span class="selector-tag">nav</span>,output,ruby,</span><br><span class="line"><span class="selector-tag">section</span>,<span class="selector-tag">summary</span>,<span class="selector-tag">time</span>,<span class="selector-tag">mark</span>,<span class="selector-tag">audio</span>,<span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font</span>: inherit;</span><br><span class="line">    <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">details</span>,<span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">header</span>,<span class="selector-tag">hgroup</span>,</span><br><span class="line"><span class="selector-tag">menu</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span>,<span class="selector-tag">q</span> &#123;</span><br><span class="line">    <span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS隐藏文本</title>
      <link href="/css/%E5%B1%9E%E6%80%A7/%E6%96%87%E6%9C%AC%E9%9A%90%E8%97%8F/"/>
      <url>/css/%E5%B1%9E%E6%80%A7/%E6%96%87%E6%9C%AC%E9%9A%90%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="在文本的显示中，经常会遇到文本过长导致文本溢出，这时可以用到以下方法，将超出长度的文本隐藏并显示为…"><a href="#在文本的显示中，经常会遇到文本过长导致文本溢出，这时可以用到以下方法，将超出长度的文本隐藏并显示为…" class="headerlink" title="在文本的显示中，经常会遇到文本过长导致文本溢出，这时可以用到以下方法，将超出长度的文本隐藏并显示为…"></a>在文本的显示中，经常会遇到文本过长导致文本溢出，这时可以用到以下方法，将超出长度的文本隐藏并显示为…</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden; /*超出隐藏*/</span><br><span class="line">text-overflow: ellipsis; /*隐藏后添加省略号*/</span><br><span class="line">// word-wrap: break-word; /*强制换行*/</span><br><span class="line">// white-space: nowrap; /*强制不换行*/</span><br><span class="line">// display:-webkit-box;         //将对象作为弹性伸缩盒子模型显示。</span><br><span class="line">// -webkit-box-orient:vertical; //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）</span><br><span class="line">// -webkit-line-clamp:2;</span><br><span class="line">//取消文本超长自动换行</span><br><span class="line">word-break:break-all;</span><br><span class="line">word-wrap:break-word;</span><br></pre></td></tr></table></figure><blockquote><p>同时,可以使用<code>max-width: xx;</code>控制最大长度超出多少时隐藏<br>注意：如果是在带有选项框的情况下需要控制文本高度</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line-height: xx;</span><br></pre></td></tr></table></figure><blockquote><p>注意：需要鼠标悬浮至文本位置显示文本值时，在对应的文本标签中添加<code>:title</code>为文本内容即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS设置样式为水平居中对齐</title>
      <link href="/css/%E5%B1%9E%E6%80%A7/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
      <url>/css/%E5%B1%9E%E6%80%A7/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>我们想让内容水平居中对齐展示，我常用的有以下几种方法<code>（不全可以帮忙在评论区补充，谢谢!）</code></p><blockquote><p>方法1：margin: 0 auto;</p></blockquote><blockquote><p>方法2：<br>父元素：<br>text-align: center;<br>子元素：<br>display: inline-block&#x2F;display: inline;(行内块级&#x2F;行内元素)</p></blockquote><blockquote><p>方法3：<br>父元素：<br>position: relative;(相对定位&#x2F;绝对定位)<br>子元素：<br>position: absolute;(绝对定位)<br>transforn: translateX(-50%)&#x2F;margin-left: -width&#x2F;2;</p></blockquote><blockquote><p>方法4：<br>父元素：<br>display: flex;<br>flex-direction: column;<br>子元素：<br>align-self: center;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS弹性布局(&#39;display flex&#39;)</title>
      <link href="/css/%E5%B1%9E%E6%80%A7/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80(flex)/"/>
      <url>/css/%E5%B1%9E%E6%80%A7/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80(flex)/</url>
      
        <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><ul><li>任何一个元素都可以开启flex布局，开启flex布局后,子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>flex容器<br><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="flex容器"><br>容器默认存在两根轴：水平的主轴<code>main axis</code>和垂直的交叉轴<code>cross axis</code>。主轴的开始位置（与边框的交叉点）<code>main start</code>，结束位置<code>main end</code>；交叉轴的开始位置<code>cross start</code>，结束位置<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间<code>main size</code>，占据的交叉轴空间<code>cross size</code>。</li></ul><h2 id="父容器属性"><a href="#父容器属性" class="headerlink" title="父容器属性"></a>父容器属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h3><ul><li><blockquote><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex-direction</span>: row; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性值<ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/flex-direction.svg"></p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a><code>flex-wrap</code></h3><ul><li><blockquote><p>flex-wrap属性决定如果一条轴线排不下，如何换行。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性值<ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/flex-wrap.svg"></p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><code>flex-flow</code></h3><ul><li><blockquote><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex-flow</span>: column wrap; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex-flow</span>: column wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h3><ul><li><blockquote><p>justify-content属性决定了项目在主轴上的对齐方式，这也是最常使用的一个属性。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">justify-content</span>: flex-start; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性值<ul><li>flex-start（默认值）：左对齐。</li><li>flex-end：右对齐。</li><li>center： 居中。</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li><li>space-evenly: 每个元素之间和元素距离边距的距离都相等(iphoneSE或许不兼容)。</li></ul></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/justify-content.svg"></p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a><code>align-items</code></h3><ul><li><blockquote><p>align-items属性决定项目在交叉轴上如何对齐。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">align-items</span>: stretch; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性值<ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/align-items.svg"></p><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><code>align-content</code></h3><ul><li><blockquote><p>align-content属性决定了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">align-content</span>: stretch; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>属性值<ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/align-content.svg"></p><h3 id="gap"><a href="#gap" class="headerlink" title="gap"></a><code>gap</code></h3><ul><li><blockquote><p>gap属性决定项目间的间隙，是row-gap属性和column-gap属性的简写形式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2021/09/gap-1.svg"></p><h2 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h3><ul><li><blockquote><p>order属性决定项目的排列顺序。数值越小，排列越靠前，默认为0。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">order</span>: <span class="number">5</span>; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">order</span>: <span class="number">5</span>; <span class="comment">/* default is 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/order.svg"></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h3><ul><li><blockquote><p>flex-grow属性决定项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/flex-grow.svg"></p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h3><ul><li><blockquote><p>flex-shrink属性决定了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>  如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h3><ul><li><blockquote><p>flex-basis属性决定了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex-basis</span>: auto; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;<span class="string">&#x27;length&#x27;</span>&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h3><ul><li><blockquote><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> auto; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h3><ul><li><blockquote><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。<br>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">align-self</span>: auto; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://css-tricks.com/wp-content/uploads/2018/10/align-self.svg"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-内存模型</title>
      <link href="/jvm/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/jvm/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM简介"><a href="#JVM简介" class="headerlink" title="JVM简介"></a>JVM简介</h3><ol><li>什么是JVM？<br>JVM是Java Virtual Machine（Java虚拟机）的简称，是一种用于计算设备的规范，是一个虚构出来的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。</li><li>JVM的优点</li></ol><ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收机制</li><li>数组下标越界检查</li><li>多态</li></ul><ol start="3"><li>JVM、JRE、JDK之间的关系</li></ol><ul><li>JRE简介<br>JRE是Java Runtime Environment的简称，是Java运行环境，是让操作系统运行Java应用程序的环境，其内部包含JVM，也就是说JRE只负责对已经存在的Java源程序进行运行的操作，它不包含开发工具JDK，对JDK内部的编译器、调试器和其它工具均不包含。</li><li>JDK简介<br>JDK是Java Development Kit的简称，是Java开发工具包，是整个Java程序开发的核心。其主要包含了JRE、Java的系统类库以及对Java程序进行编译以及运行的工具。</li></ul><h3 id="JVM的组成部分"><a href="#JVM的组成部分" class="headerlink" title="JVM的组成部分"></a>JVM的组成部分</h3><ol><li>类加载器（Class Loader）<br>作用：会把Java代码转换成字节码。</li><li>运行时数据区（Runtime Data Area）<br>作用：把字节码加载到内存中。</li><li>执行引擎（Execution Engine）<br>作用：从运行时数据区获取数据，将字节码翻译成底层系统指令，交由底层操作系统执行。</li><li>本地库接口（Native Interface）<br>作用：以上的过程中需要调用其他语言的本地库接口来实现整个程序的功能。</li></ol><h3 id="类加载及双亲委派"><a href="#类加载及双亲委派" class="headerlink" title="类加载及双亲委派"></a>类加载及双亲委派</h3><ol><li>类加载过程</li></ol><ul><li>加载<br>JVM读取class文件，根据一个类的名字（全限定名）在内存中创建java.lang.class对象的过程。</li><li>连接-验证<br>确保class文件的字节流中包含的信息符合当前虚拟机要求，通过验证才能被加载  。<br>验证阶段大致完成 4 个阶段的检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</li><li>连接-准备<br>在方法区为类变量分配内存空间并设置类中变量的初始值（是指类的初值而不是代码中初始化的值）。</li><li>连接-解析<br>JVM将常量池中的符号引用替换为直接引用。<br>符号引用：只包含语义信息，不涉及具体实现，以一组符号来描述引用目标，是字面量。<br>直接引用：与具体实现息息相关，是直接指向目标的指针。</li><li>初始化<br>对类变量初始化，执行类构造器，执行静态代码块。</li></ul><ol start="2"><li>类加载器</li></ol><ul><li>启动类加载器（Bootstrap ClassLoader）<br>用c++编写，是JVM自带的类加载器，负责java平台核心库，用来装载核心类库，该加载器无法直接获取。</li><li>扩展类加载器（Extension ClassLoader）<br>负责jre&#x2F;lib&#x2F;ext目录下的jar包或java.ext.dirs 指定下的jar包装入工作库。</li><li>应用程序类加载器（Application ClassLoader）<br>负责加载用户类路径（ClassPath）上所指定的类库。</li><li>自定义类加载器（Custom ClassLoader）<br>用户自定义的类加载器,可加载指定路径的class文件。</li></ul><ol start="3"><li>双亲委派模型</li></ol><ul><li>工作原理<br>当某个类加载器需要加载某个类加载的请求时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类，如果找不到该类会抛出ClassNotFound异常。</li><li>优点<br>（1）避免类被重复加载。<br>（2）避免核心类被不同的类加载器加载到内存中造成冲突和混乱，从而保证了Java核心库的安全。</li><li>破坏双亲委派模型<br>原因：子加载器可以使用父加载器加载的类，而父加载器不能使用子加载器加载的类。<br>举例： 使用JDBC连接数据库，需要用到 com.mysql.jdbc.Driver和DriverManager类。然而DriverManager被引导类加载器所加载，而com.mysql.jdbc.Driver被当前调用者的加载器加载，使用引导类加载器加载不到，所以要打破双亲委派机制。<br>方式：<br>（1）自定义类加载器，重写loadClass()方法。<br>（2）逆向使用类加载器，引入线程上下文类加载器(ServiceLoader：使父加载器可以加载子加载器的类)。</li><li>源码及场景<br>（1）核心源码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 检查类是否已经被加载</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果parent classLoader存在，则委托父类加载器加载</span></span><br><span class="line">                        c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 根Bootstrap ClassLoader加载 Extension ClassLoader的parent为null</span></span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// 如果找不到该类会抛出ClassNotFoundException，实际没做任何操作</span></span><br><span class="line">                    <span class="comment">// 从非空的父类加载</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果仍未找到，则调用findClass以找到该类。</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 是否进行解析</span></span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>（2）热加载的应用<br>在开发项目的时候，我们需要频繁的重启应用进行程序调试，但是java项目的启动少则几十秒，多则几分钟。如此慢的启动速度极大地影响了程序开发的效率，通过classLoader我们可以完成对变更内容的加载，然后快速的启动。<br>我们可以将业务代码单独通过一个自定义的加载器Custom ClassLoader来进行加载，当监控发现业务代码发生改变后，我们重新加载启动，老的业务代码的相关类则由虚拟机的垃圾回收机制来自动回收。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoaderFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.updatedFiles.getFile(path);</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">null</span> &amp; file.getKind() == Kind.DELETED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 检查类是否已经被加载</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 优先从自己加载（编译生成的target/classes目录）</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// 如果没有加载到则从父类加载</span></span><br><span class="line">                    c = Class.forName(name, <span class="literal">false</span>, getParent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 是否进行解析</span></span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>（3）热部署的应用<br>热部署除了与热加载具有发布更快之外，还有更多的更大的优势就是具有更细的发布粒度。可以通过类加载机制，将每个业务通过一个classLoader来加载。基于类的隔离机制，可以保障各个业务的代码不会相互影响，同时也可以做到各个业务进行独立的发布。<br>（4）jar包的加密保护<br>基于java开发编译产生的jar包是由.class字节码组成，由于字节码的文件格式是有明确规范的。因此对于字节码进行反编译，就很容易知道其源码实现了。我们向别人提供三方包实现的时候，不希望别人知道核心代码实现，我们可以考虑对jar包进行加密，jar包加密的本质，还是对字节码文件进行操作。<br>我们可以在打包的时候对class进行正向的加密操作，然后，在加载class文件之前通过自定义classLoader先进行反向的解密操作，然后再按照标准的class文件标准进行加载，这样就完成了class文件正常的加载。因此这个加密的jar包只有能够实现解密方法的classLoader才能正常加载。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 检查类是否已经被加载</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 提前对class文件进行解密</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 读取经过加密的类文件</span></span><br><span class="line">                <span class="type">byte</span> classData[] = Util.readFile(name + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(classData != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">byte</span> decryptedClassData[] = cipher.doFinal(classData); <span class="comment">// 解密</span></span><br><span class="line">                    c = defineClass(name, decryptedClassData, <span class="number">0</span>, decryptedClassData.length); <span class="comment">// 再把它转换成一个类</span></span><br><span class="line">                &#125;</span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果上面的没有成功则尝试使用默认的classLoader加载它</span></span><br><span class="line">            <span class="keyword">if</span> (resolve &amp;&amp; c != <span class="literal">null</span>) &#123;</span><br><span class="line">                c = findSystemClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 是否进行解析</span></span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><ol><li>堆（Heap）（线程共享）</li></ol><ul><li>存放类实例和数组。</li><li>从结构上可以划分为新生代（New Generation）（占1&#x2F;3）和老年代（Old Generation）（占2&#x2F;3），新生代又可以分为Eden 空间、From Survivor 空间（s0）、To Survivor 空间（s1）。</li></ul><ol start="2"><li>方法区（Method Area）（JVM1.8为元数据区）（线程共享）</li></ol><ul><li>存放虚拟机加载的：类型信息，域（Field）信息，方法（Method）信息，常量，静态变量，即时编译器编译后的代码缓存等。</li><li>无法申请到内存时，抛出OutOfMemoryError。</li><li>方法区中存在运行时常量池，用于存放字面量、符号引用等。</li><li>永久代：<br>（1）Java6之前：方法区存在永久代，保存有静态变量。<br>（2）Java7：仍保留永久代，但静态常量池，如字符串常量池，已经移动到堆中。<br>（3）Java8：移除永久代，类型信息、域（Field）信息、方法（Method）信息存放在元数据区；字符串常量池、静态变量存放在堆区。</li></ul><ol start="3"><li>虚拟机栈（VM Stack）（线程独享）</li></ol><ul><li>保存每一次方法调用的信息。</li><li>每个Java线程创建时，都会创建对应的虚拟机栈 ，每一次方法调用，都会往栈中压入一个栈帧。</li><li>栈帧<br>（1）局部变量表：保存函数（即方法）的局部变量。<br>（2）操作数栈：保存计算过程中的结果，即临时变量.<br>（3）动态链接：指向方法区的运行时常量池。<br>（4）方法的返回地址。</li></ul><ol start="4"><li>本地方法栈（Naive Method Stack）（线程独享）<br>本地方法栈与虚拟机栈类似的，其区别只是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（native）方法服务。</li><li>程序计数器（Program Counter Register）（PC寄存器）（线程独享）</li></ol><ul><li>程序计数器记录线程执行的字节码行号，如果当前线程正在运行native方法则为空。</li><li>字节码解释器在工作时，通过改变计数器的值来选取下一跳需要执行的字节码指令，分支、循环跳转、异常处理、线程恢复等基本功能都需要依赖计数器来完成。</li><li>一个处理器只会处理一个线程中的指令。为了正确地处理线程切换后的任务恢复，每一个线程都具有自身的程序计数器。</li></ul><h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><ol><li>JIT即时编译器（Just In Time Compiler）</li></ol><ul><li>负责编译热点代码<br>使用热点探测技术确定一个方法被调用多少次，或循环体执行多少次后，JIT编译器才会将这些代码视为热点代码：<br>（1）方法调用计数器(Invocation Counter)：统计方法调用次数。<br>（2）回边计数器(Edge Back Counter)：统计循环体执行的循环次数。</li></ul><ol start="2"><li>解释器（Interpreter）<br>字节码采用逐行解释的方法执行。</li><li>垃圾回收（Garbage Collection）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-垃圾回收机制</title>
      <link href="/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾标记阶段"><a href="#垃圾标记阶段" class="headerlink" title="垃圾标记阶段"></a>垃圾标记阶段</h3><ol><li>引用计数算法</li></ol><ul><li>实现原理：在为一个对象添加引用时，引用计数 +1，为对象删除一个引用时引用计数 -1，当引用计数为 0 时，表示对象不被使用，可标记为垃圾对象。</li><li>缺点：无法处理循环引用的情况，当两个对象互相引用时引用计数一直为 1 无法被回收。</li></ul><ol start="2"><li>可达性分析算法</li></ol><ul><li>实现原理：定义一些GCRoots对象，以这些对象作为起点向下搜索，搜索所走过的路径称为引用链，如果在GCRoots和一个对象之间没有任何引用链直接或间接相连，则称该对象不可达，可标记为垃圾对象。</li><li>可作为GC Root的元素：<br>（1）虚拟机栈中引用的对象，例如：各个线程被调用的方法中使用到的参数、局部变量等。<br>（2）本地方法栈内JNI（通常说的本地方法）引用的对象。<br>（3）方法区中类静态属性引用的对象，例如：Java类的引用类型静态变量。<br>（4）方法区中常量引用的对象，例如：字符串常量池（String Table）里的引用。<br>（5）所有被同步锁synchronized持有的对象。<br>（6）Java虚拟机内部的引用。<br>（7）基本数据类型对应的Class对象，一些常驻的异常对象（例如：NullPointerException、OutOfMemoryError），系统类加载器。<br>（8）除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前收集的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。例如：分代收集和局部收集（PartialGC）。</li></ul><h3 id="垃圾清除阶段"><a href="#垃圾清除阶段" class="headerlink" title="垃圾清除阶段"></a>垃圾清除阶段</h3><ol><li>标记清除算法</li></ol><ul><li>实现原理：收集器从GC Root开始遍历，标记所有被引用的可达对象，再对堆内存进行线性遍历，若某个对象未被标记为可达对象则进行垃圾回收。<em>垃圾回收并不是指对对象完全清除置空，而是把垃圾对象的内存地址记录在空闲地址中，下次有新对象加载时判断地址空间是否足够，若是足够则覆盖原有的地址存放</em>。</li><li>缺点：<br>（1）需要进行两次遍历，即使时间复杂度为O(n)，但是加载的类比较多，GC时停止用户线程较久。<br>（2）清理出的内存不是连续的，会引起内存碎片化的问题，导致大对象没有连续的可用内存空间。</li></ul><ol start="2"><li>复制算法</li></ol><ul><li>实现原理：将内存空间分成两块，每次只使用其中一块，垃圾回收时将存活对象复制到另一块内存空间，之后清除原先使用的内存块内的所有对象，弥补了标记清除法的两个弊端。</li><li>缺点：可用内存缩小为了原来的一半，若存活对象较多，复制效率也会大大降低。</li></ul><ol start="3"><li>标记整理算法</li></ol><ul><li>实现原理：标记阶段和标记清除法一致，遍历GC Root，标记存活对象，整理阶段移动所有存活对象，按照内存地址依次排序，将末端以后的内存地址全部回收。</li><li>缺点：因为需要依次整理存活对象从而导致效率低，且在多线程情况下，当需要为一个新对象分配内存时，可能出现指针碰撞的情况。</li></ul><ol start="4"><li>分代收集算法</li></ol><ul><li>实现原理：根据对象存活周期的不同将内存分为几块，根据每块内存呢不同的特点使用不同的回收算法以提高回收效率。<br>（1）新生代<br>新生代采用复制算法实现垃圾回收，新对象在Eden区创建（大对象直接进入老年代），当Eden区满时，就会触发一次Minor GC,将存活的对象复制到Form Survivor（S0）区，Eden区都是未被使用的空间，可供继续创建对象。<br>下一次触发Minor GC时，将Eden区的存活对象复制到TO Survivor（S1）区，S0区的存活对象会根据年龄判断去向，年龄大于15（ 参数-XX:MaxTenuringThreshold决定）的就会进入老年代，未达年龄的存活对象会被复制到S1区（若不能容纳，多余部分进入老年代），清除所有的Eden区和S0区，S0区和S1区身份互换（保证To Survivor为空），存活对象的年龄 +1。<br>（2）老年代<br>老年代采用标记清除算法和标记整理算法混合实现垃圾回收，大对象或长期存活对象会进入老年代，当老年代满时，会触发Full GC,Full GC会同时回收新生代、老年代（整堆回收），<em>CMS收集器当老年代满时会触发Major GC单独回收老年代</em>。</li></ul><h3 id="空间分配担保机制"><a href="#空间分配担保机制" class="headerlink" title="空间分配担保机制"></a>空间分配担保机制</h3><ul><li>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果大于，则此次Minor GC是安全的如果小于，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果HandlePromotionFailure&#x3D;true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小，如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；如果小于或者HandlePromotionFailure&#x3D;false，则改为进行一次Full GC。</li><li>进行空间担保的原因是因为新生代采用复制收集算法，假如大量对象在Minor GC后仍然存活（最极端情况为内存回收后新生代中所有对象均存活），而Survivor空间是比较小的，这时就需要老年代进行分配担保，把Survivor无法容纳的对象放到老年代。老年代要进行空间分配担保，前提是老年代得有足够空间来容纳这些对象，但一共有多少对象在内存回收后存活下来是不可预知的，因此只好取之前每次垃圾回收后晋升到老年代的对象大小的平均值作为参考。使用这个平均值与老年代剩余空间进行比较，来决定是否进行Full GC来让老年代腾出更多空间。</li></ul><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><ul><li>针对新生代提供的垃圾收集器有：Serial、ParNew、Parallel Scavenge<br>（1）Serial：基于复制算法的单线程收集器。<br>（2）ParNew：基于复制算法的多线程收集器。<br>（3）Parallel Scavenge：基于复制算法的多线程收集器，通过自适应调节策略提高了系统吞吐量（最大垃圾收集停顿时间、吞吐量大小、自适应调节策略是否开启）。</li><li>针对老生代提供的垃圾收集器有：CMS、Serial Old、Parallel Old<br>（1）Serial Old：基于标记整理算法的单线程收集器。<br>（2）Parallel Old：基于标记清除算法的多线程收集器。<br>（3）CMS：基于标记清除算法的多线程收集器（初始标记-并发标记-重新标记-并发清除）。</li></ul><h3 id="finalization机制"><a href="#finalization机制" class="headerlink" title="finalization机制"></a>finalization机制</h3><p>Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。<br>对象终止机制在Object类中定义finalize() ，同时默认是空。finalize() 方法允许在子类中被重写，用于在对象被收集时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>当标记阶段发现此对象是垃圾后，在清除之前，总会先调用这个对象的finalize()方法，由于该机制的存在，JVM中的对象分为以下三种状态：<br>（1）可达的：从GC Root开始，可以到达这个对象。<br>（2）可复活的：对象的所有引用都被释放，但是对象有可能在finalize()中复活。<br>（3）不可达的： 对象的finalize()被调用，并且没有复活，那么就会进入不可达状态。不可达的对象不可能被复活，因为finalize()只会被调用一次。</li><li>具体过程：<br>（1）如果对象到GC Roots没有引用链，则进行第一次标记。<br>（2）进行筛选，判断此对象是否有必要执行finalize()方法。<br>如果对象没有重写finalize()方法，或者finalize()方法已经被虚拟机调用过，则虚拟机视为没有必要执行，对象被判定为不可达。<br>如果对象重写了finalize()方法且还未执行过，会被插入到F-Queue队列中，由虚拟机自动创建的、低优先级的Finalizer线程触发其finalize()方法执行。<br>finalize()方法是对象逃亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。<br>如果对象在finalize()方法中与引用链上的任何一个对象建立联系，那么在第二次标记时该对象会被移除”即将回收”集合。<br>之后对象会再次出现没有引用存在的情况，在这个情况下，finalize()方法不会再次被调用，对象会直接变成不可达的状态。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Obj obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;=======gc======&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;survive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======gc=======&quot;</span>);</span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;survive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;重写了finalize()&quot;</span>);</span><br><span class="line">        obj = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中使用stream流进行数组去重</title>
      <link href="/java/collection/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>/java/collection/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Obj&gt; targetList = originalList.stream().collect(Collectors</span><br><span class="line">            .collectingAndThen(</span><br><span class="line">                Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(o -&gt; o.getId() + o.getName()))),</span><br><span class="line">                ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个list合并为一个map</title>
      <link href="/java/collection/%E4%B8%A4%E4%B8%AAlist%E5%90%88%E5%B9%B6%E6%88%90map/"/>
      <url>/java/collection/%E4%B8%A4%E4%B8%AAlist%E5%90%88%E5%B9%B6%E6%88%90map/</url>
      
        <content type="html"><![CDATA[<blockquote><p>普通方法(为null时不报错)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list1.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list2.size(); i++) &#123;</span><br><span class="line">    map.put(list2.get(i), i &lt; size ? list1.get(i) : <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用stream流(为null时报错)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = list1.stream().collect(Collectors.toMap(key-&gt;key, key-&gt;list2.get(list1.indexOf(key))))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现定时任务</title>
      <link href="/java/%E7%BB%84%E4%BB%B6/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/java/%E7%BB%84%E4%BB%B6/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="组件介绍：Quartz"><a href="#组件介绍：Quartz" class="headerlink" title="组件介绍：Quartz"></a>组件介绍：Quartz</h2><h3 id="Quartz的作用"><a href="#Quartz的作用" class="headerlink" title="Quartz的作用"></a>Quartz的作用</h3><blockquote><p>实现任务调度：任务调度就是我们系统中创建了多个任务，每个任务都有指定的时间进行执行，而这种多任务的执行策略就是任务调度。<br>Quartz就是基于java实现的任务调度框架</p></blockquote><h3 id="组件核心"><a href="#组件核心" class="headerlink" title="组件核心"></a>组件核心</h3><blockquote><ul><li>任务 Job<blockquote><p>表示要执行的具体工作或者被调度的任务。任务类实现该接口，重写execute方法来定义任务的执行逻辑</p></blockquote></li><li>可执行的调度程序 JobDetail<blockquote><p>表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略</p></blockquote></li><li>触发器 Trigger<blockquote><p>调度任务的时间规则，在yaml中使用corn表达式配置任务调度的时间规则</p></blockquote></li><li>调度器 Scheduler<blockquote><p>一个调度容器中可以注册多个JobDetail和Trigger。当Trigger与JobDetail组合，就可以被Scheduler容器调度了</p></blockquote></li></ul></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>引入依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务启动后执行方法</title>
      <link href="/java/%E6%B3%A8%E8%A7%A3/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/"/>
      <url>/java/%E6%B3%A8%E8%A7%A3/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="PostConstruct注解"><a href="#PostConstruct注解" class="headerlink" title="@PostConstruct注解"></a>@PostConstruct注解</h3><blockquote><p>作用在方法上，@PostConstruct注解的方法<code>在项目启动的时候</code>执行这个方法，也可以理解为在spring容器启动的时候执行，可作为一些数据的常规化加载，比如数据字典之类的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">init</span> &#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;执行方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationRunner接口"><a href="#ApplicationRunner接口" class="headerlink" title="ApplicationRunner接口"></a>ApplicationRunner接口</h3><blockquote><p>实现springBoot的ApplicationRunner接口,<code>在项目启动完成后</code>执行这个方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;执行方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CommandLineRunner接口"><a href="#CommandLineRunner接口" class="headerlink" title="CommandLineRunner接口"></a>CommandLineRunner接口</h3><blockquote><p>实现springBoot的CommandLineRunner接口,<code>在项目启动完成后</code>执行这个方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineRunnerImpl</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;执行方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果同时implements <code>ApplicationRunner</code>和<code>CommandLineRunner</code>两个接口，<code>ApplicationRunner</code>接口的方法先执行,<code>CommandLineRunner</code>后执行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中调用腾讯云COS上传文件</title>
      <link href="/java/%E8%85%BE%E8%AE%AF%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91COS%E9%85%8D%E7%BD%AE/"/>
      <url>/java/%E8%85%BE%E8%AE%AF%E4%BA%91/%E8%85%BE%E8%AE%AF%E4%BA%91COS%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>在腾讯云官网注册账号，并创建Secret ID和Secret Key。</li><li>创建一个COS bucket用于存储文件。创建bucket时，需要选择bucket的地域和命名规则等相关设置。</li><li>引入依赖<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.qcloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cos_api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.6</span><span class="number">.27</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>实现示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qcloud.cos.COSClient;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.ClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.BasicCOSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.COSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.region.Region;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">COSUploadUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;your_secret_key&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY</span> <span class="operator">=</span> <span class="string">&quot;your_access_key&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;your_bucket_name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">COSCredentials</span> <span class="variable">cred</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCOSCredentials</span>(ACCESS_KEY, SECRET_KEY);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Region</span> <span class="variable">region</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Region</span>(<span class="string">&quot;ap-guangzhou&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClientConfig</span> <span class="variable">clientConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfig</span>(region);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">uploadFileToCos</span><span class="params">(String key, File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建COS客户端</span></span><br><span class="line">        <span class="type">COSClient</span> <span class="variable">cosClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">COSClient</span>(cred, clientConfig);</span><br><span class="line">        <span class="comment">// 构造PutObjectRequest对象</span></span><br><span class="line">        <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(BUCKET_NAME, key, file);</span><br><span class="line">        <span class="comment">// 上传文件到COS</span></span><br><span class="line">        <span class="type">PutObjectResult</span> <span class="variable">putObjectResult</span> <span class="operator">=</span> cosClient.putObject(putObjectRequest);</span><br><span class="line">        <span class="comment">// 打印上传结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;上传结果：&quot;</span> + putObjectResult.getETag());</span><br><span class="line">        <span class="comment">// 关闭COS客户端</span></span><br><span class="line">        cosClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中调用阿里云OSS上传文件</title>
      <link href="/java/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E9%85%8D%E7%BD%AE/"/>
      <url>/java/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>在阿里云官网注册账号，并创建Access Key ID和Access Key Secret。</li><li>在阿里云OSS控制台创建Bucket，获取Bucket所在的Endpoint信息。</li><li>引入依赖<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.10</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>使用Access Key ID和Access Key Secret初始化OSSClient对象。</li><li>创建PutObjectRequest对象，设置上传文件的信息（包括Bucket名称、Object名称、上传文件流等）。</li><li>调用OSSClient对象的putObject方法，将文件上传至OSS。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunOssUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 以下两个参数需要替换成自己的Access Key ID和Access Key Secret</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY_ID</span> <span class="operator">=</span> <span class="string">&quot;your_access_key_id&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY_SECRET</span> <span class="operator">=</span> <span class="string">&quot;your_access_key_secret&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bucket名称，需要在阿里云OSS控制台创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;your_bucket_name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bucket所在的Endpoint信息，需要在阿里云OSS控制台查看</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENDPOINT</span> <span class="operator">=</span> <span class="string">&quot;http://your_endpoint&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(File file, String objectName)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化OSS客户端</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(ENDPOINT, ACCESS_KEY_ID, ACCESS_KEY_SECRET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建上传请求对象</span></span><br><span class="line">        <span class="type">PutObjectRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(BUCKET_NAME, objectName, file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件至OSS</span></span><br><span class="line">        <span class="type">PutObjectResult</span> <span class="variable">result</span> <span class="operator">=</span> ossClient.putObject(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印上传结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭OSS客户端</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 待上传的本地文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;local_file_path&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传到OSS的Object名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;remote_object_name&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件至OSS</span></span><br><span class="line">        AliyunOssUtil.uploadFile(file, objectName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中调用阿里云服务进行通用翻译</title>
      <link href="/java/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91%E9%80%9A%E7%94%A8%E7%BF%BB%E8%AF%91%E9%85%8D%E7%BD%AE/"/>
      <url>/java/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91%E9%80%9A%E7%94%A8%E7%BF%BB%E8%AF%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>在阿里云控制台开通MTS服务，并创建Access Key ID和Access Key Secret。</li><li>引入依赖<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;alimt20181012&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tea-openapi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.2</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>使用Access Key ID和Access Key Secret初始化Client对象。</li><li>创建TranslateGeneralRequest对象，设置待翻译的文本、源语言和目标语言。</li><li>调用Client对象的translateGeneralWithOptions方法，发送翻译请求。</li><li>实现代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyun.alimt20181012.Client;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.alimt20181012.models.TranslateGeneralRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.alimt20181012.models.TranslateGeneralResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.teaopenapi.models.Config;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.teautil.models.RuntimeOptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunTranslateUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;mt.cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;your_access_key_id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">accessSecret</span> <span class="operator">=</span> <span class="string">&quot;your_access_key_secret&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">formatType</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="string">&quot;general&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(AliyunTranslateUtil.translate(<span class="string">&quot;翻译内容&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">translate</span><span class="params">(String sourceText)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化Client</span></span><br><span class="line">            <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> createClient(accessKey, accessSecret);</span><br><span class="line">            <span class="comment">// 创建翻译请求对象</span></span><br><span class="line">            <span class="type">TranslateGeneralRequest</span> <span class="variable">translateGeneralRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TranslateGeneralRequest</span>();</span><br><span class="line">            translateGeneralRequest.setFormatType(formatType);</span><br><span class="line">            translateGeneralRequest.setScene(scene);</span><br><span class="line">            translateGeneralRequest.setSourceLanguage(sourceLanguage);</span><br><span class="line">            translateGeneralRequest.setSourceText(sourceText);</span><br><span class="line">            translateGeneralRequest.setTargetLanguage(targetLanguage);</span><br><span class="line">            <span class="type">RuntimeOptions</span> <span class="variable">runtime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeOptions</span>();</span><br><span class="line">            <span class="comment">// 发送翻译请求</span></span><br><span class="line">            <span class="type">TranslateGeneralResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.translateGeneralWithOptions(translateGeneralRequest,runtime);</span><br><span class="line">            <span class="keyword">if</span> (response.body.getCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析翻译结果</span></span><br><span class="line">                <span class="keyword">return</span> response.body.getData().translated;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;翻译失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;翻译失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title function_">createClient</span><span class="params">(String accessKeyId, String accessKeySecret)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>()</span><br><span class="line">            <span class="comment">// 您的 AccessKey ID</span></span><br><span class="line">            .setAccessKeyId(accessKeyId)</span><br><span class="line">            <span class="comment">// 您的 AccessKey Secret</span></span><br><span class="line">            .setAccessKeySecret(accessKeySecret);</span><br><span class="line">        <span class="comment">// 访问的域名</span></span><br><span class="line">        config.endpoint = endpoint;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Client</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何控制el-select下拉框</title>
      <link href="/vue/Element/%E4%B8%8B%E6%8B%89%E6%A1%86%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/"/>
      <url>/vue/Element/%E4%B8%8B%E6%8B%89%E6%A1%86%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用ElementUI的<a href="https://element.eleme.cn/#/zh-CN/component/select">el-select</a>下拉框时，默认的：下拉框获得焦点就展开下拉框，失去焦点或选择事件发生后收起下拉框，但是有些场景需要我们人为的去控制下拉框。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="property">visible</span> = <span class="title function_">boolean</span>(<span class="literal">true</span>为显示、<span class="literal">false</span>为隐藏)</span><br></pre></td></tr></table></figure><blockquote><p>展开下拉框</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="title function_">toggleMenu</span>()</span><br></pre></td></tr></table></figure><blockquote><p>触发选择器的失去焦点事件收起下拉框</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="title function_">blur</span>() </span><br></pre></td></tr></table></figure><blockquote><p>展示下拉框时选项框位置偏移或距离下拉框较远</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用属性【:popper-append-to-body=<span class="string">&quot;false&quot;</span>】</span><br><span class="line">.el-scrollbar &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入法为中文时进行过滤搜索，按下回车键后下拉框距离输入框较远<br>解决办法：使用 <code>filter</code>配合<code>filter-method</code>自定义过滤方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意tempList需在初始化时使用深拷贝赋值</span></span><br><span class="line"><span class="title function_">filterMethod</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">tempList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">label</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(e.<span class="title function_">toLowerCase</span>()) !== -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-dialog的弹出框阴影遮盖问题</title>
      <link href="/vue/Element/%E5%BC%B9%E5%87%BA%E6%A1%86%E9%98%B4%E5%BD%B1/"/>
      <url>/vue/Element/%E5%BC%B9%E5%87%BA%E6%A1%86%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p>在使用ElementUI的<a href="https://element.eleme.cn/#/zh-CN/component/dialog">el-dialog</a>弹出框时，有可能会有阴影遮盖导致弹出框中的表单无法输入的问题。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>这种问题常常出现在弹出框层级嵌套上，上层的阴影图层在下层弹出框上导致的覆盖问题。</p></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modal-append-to-body = <span class="string">&quot;false&quot;</span></span><br><span class="line">或</span><br><span class="line">append-to-body = “<span class="literal">true</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-autocomplete输入建议远程获取列表下拉框的使用</title>
      <link href="/vue/Element/%E8%BF%9C%E7%A8%8B%E6%90%9C%E7%B4%A2%E5%BB%BA%E8%AE%AE/"/>
      <url>/vue/Element/%E8%BF%9C%E7%A8%8B%E6%90%9C%E7%B4%A2%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用下拉框时，很多场景需要用到远程搜索获取列表结果，并进行输入提示，这就可以用到<a href="https://element.eleme.cn/#/zh-CN/component/input">el-autocomplete</a></p></blockquote><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-autocomplete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:fetch-suggestions</span>=<span class="string">&quot;searchChange&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;placeholder&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;function&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">select</span>=<span class="string">&quot;handleSelect&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">clearable</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">suffix-icon</span>=<span class="string">&quot;el-icon-search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-autocomplete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">searchChange</span>(<span class="params">query, done</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (query.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    <span class="title class_">Param</span>: query,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">getList</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        _this.<span class="property">list</span>= response.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        <span class="title function_">done</span>(_this.<span class="property">list</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue二维码生成工具vue-qr</title>
      <link href="/vue/%E5%B7%A5%E5%85%B7/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/vue/%E5%B7%A5%E5%85%B7/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装vue-qr插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-qr --save</span><br></pre></td></tr></table></figure><blockquote><p>引入vue-qr插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vueQr <span class="keyword">from</span> <span class="string">&#x27;vue-qr&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vue-qr</span> <span class="attr">:text</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-qr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性详见：<a href="https://www.npmjs.com/package/vue-qr">vue-qr</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data中的数据更新后视图不更新</title>
      <link href="/vue/%E8%AF%AD%E6%B3%95/data%E7%BB%91%E5%AE%9A%E6%95%B0%E6%8D%AE/"/>
      <url>/vue/%E8%AF%AD%E6%B3%95/data%E7%BB%91%E5%AE%9A%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>在进行数据处理时，我们对data中已经声明的数据做了更新处理，但与之相对应的视图却未更新。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>数据嵌套层数过多导致的。</li><li>当vue的data里面声明或者已经赋值过的对象或数组（包含对象值），向对象里面添加新的属性和更新这个新属性的值，页面视图是不会更新的。</li></ul><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>方法一：使用Object.assign(target, …sources)。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">obj</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure><blockquote><p>方法二：使用this.$set(obj,key,value)。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(obj,’key’,temp);</span><br></pre></td></tr></table></figure><p>使用以上两种方法为对象添加属性，对象上会增加get&#x2F;set方法，再次操作该数据时就会引起数据的更新。</p><blockquote><p>方法三： 使用this.$forceUpdate() 强制刷新数据</p></blockquote><blockquote><p>方法四：使用watch监听数据变化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;obj&#x27;</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.$forceUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>方法五： 使用:key属性， 加入一个键保证每次数据刷新都会重新渲染视图</p></blockquote><p>给要重新渲染的组件提供一个:key属性，以便 Vue 知道特定的组件与特定的数据片段相关联。如果key保持不变，则不会更改组件，但是如果key发生更改，Vue 就会删除旧组件并创建新组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-card</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;this.message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;旧消息&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;新消息&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">key</span> += <span class="number">1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vue中使用:class，在不同条件下使用不同样式</title>
      <link href="/vue/%E8%AF%AD%E6%B3%95/%E5%8A%A8%E6%80%81%E6%A0%B7%E5%BC%8F/"/>
      <url>/vue/%E8%AF%AD%E6%B3%95/%E5%8A%A8%E6%80%81%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>记录一下自己常用的两种动态样式绑定方式</p><blockquote><p>三元表达式判断,适用于需求较为简单的动态样式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class=&quot;status ? &#x27;css1&#x27; : &#x27;css2&#x27;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在单独的组件中，我们也可以使用类名拼接的方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class=&quot;[`color-$&#123;config&#125;`]&quot;</span><br></pre></td></tr></table></figure><blockquote><p>类名数组，适用于复杂的动态样式，例如在公共组件中使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class = &quot;[&#x27;css&#x27;,&#123;css1:(条件1),css2:(条件2)&#125;]&quot;</span><br></pre></td></tr></table></figure><blockquote><p>当需求过于复杂时，可以考虑结合过滤器实现</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:class=&quot;item.List | className&quot;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">  <span class="title function_">className</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_.<span class="title function_">isEmpty</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = data;</span><br><span class="line">    <span class="keyword">let</span> className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line">    className = <span class="string">&#x27;class1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">2</span>) &#123;</span><br><span class="line">    className = <span class="string">&#x27;class2&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    className = <span class="string">&#x27;class3&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> className;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据赋值给新变量后，新变量会随原数据的改变而改变</title>
      <link href="/vue/%E8%AF%AD%E6%B3%95/%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/"/>
      <url>/vue/%E8%AF%AD%E6%B3%95/%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>在进行数据操作时，我们常常需要一个临时变量存储原数据来防止原数据丢失，或在某些事件处理时需还原原数据。</p><p>但是在实际操作时会发现，给新变量赋值后未对新变量进行处理，但新变量仍然会受原数据的影响而改变（和java中的引用传递相似）。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>在js中具有两种数据类型：原始值和对象。</p></blockquote><ul><li>原始值：number、string、boolean、null、undefined、symbol（ES6）</li><li>对象：object、function（函数实际也是对象）<blockquote><p>使用this.obj2 &#x3D; this.obj1 的方式赋值是浅复制，只是复制了栈内存中的对象地址，并不是这个对象的实际值。</p></blockquote></li></ul><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>深复制：JSON.parse配合JSON.stringify，赋值时先将obj转成json再转回obj(此方法不适用于function)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">obj2</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">obj1</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element UI 表单的自定义校验</title>
      <link href="/vue/Element/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/"/>
      <url>/vue/Element/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="代码实例-以el-input-el-select为例"><a href="#代码实例-以el-input-el-select为例" class="headerlink" title="代码实例(以el-input+el-select为例)"></a>代码实例(以el-input+el-select为例)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:rules</span>=<span class="string">&quot;rule&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ref&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;下拉框&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;select&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">remote</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">filterable</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">valid</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;message&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">rule</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: [</span><br><span class="line">        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请填写名称&quot;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">select</span>: [</span><br><span class="line">        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: valid, <span class="attr">trigger</span>: [<span class="string">&#x27;blur&#x27;</span>, <span class="string">&#x27;change&#x27;</span>]&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断表单校验是否全部通过</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>指定表单进行校验</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="title function_">validateField</span>(<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>清空校验消息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="title function_">clearValidate</span>();</span><br></pre></td></tr></table></figure><blockquote><p>重置表单内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;name&#x27;</span>].<span class="title function_">resetField</span>();</span><br><span class="line">或</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>.<span class="title function_">resetFields</span>();</span><br></pre></td></tr></table></figure><blockquote><p>表单校验失效问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问题：</span><br><span class="line">数据已成功回显，但表单校验仍然未通过</span><br><span class="line">可能导致的原因：</span><br><span class="line">对from表单的某个指定字段未进行初始化操作，在赋值过程中改变了该字段的类型，使得校验字段与校验值类型不一致，从而导致校验无法监测到数据</span><br></pre></td></tr></table></figure><blockquote><p>除了上述方法可进行表单校验外，还存在一种自定义的校验方法，即在el-from-item中使用<code>:error=&#39;errMsg&#39;</code>,的方法,该方法中errMsg为空即不显示校验提示。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实现自定义全局弹出框</title>
      <link href="/vue/%E5%B7%A5%E5%85%B7/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%B9%E5%87%BA%E6%A1%86/"/>
      <url>/vue/%E5%B7%A5%E5%85%B7/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%BC%B9%E5%87%BA%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在components文件夹下创建ErrorDialog文件<br><img src="/"></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error-dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-popup</span> <span class="attr">v-model</span>=<span class="string">&quot;showDialog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; i18n(&#x27;提示&#x27;, &#x27;Reminder&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;showDialog = false&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;closeable&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon-close&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDialog = false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog-content&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;buttonText ? &#x27;hasButton&#x27; : &#x27;notButton&#x27;&quot;</span>&gt;</span>&#123;&#123;errorMsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;buttonText&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;button-default first&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;onConfirmClick&quot;</span> &gt;</span></span><br><span class="line">          &#123;&#123; buttonText &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$showErrorDialog()    默认加载</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$showErrorDialog(&#123;errorMsg: &#x27;msg&#x27;, buttonText: &#x27;button&#x27;, confirmFn: () =&gt; &#123;function()&#125;&#125;) 按钮点击事件</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$showErrorDialog(&#123;errorMsg: &#x27;msg&#x27;, buttonText: &#x27;button&#x27;, confirmFn: () =&gt; &#123;&#125; duration: 5000,&#125;) 定时关闭</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$showErrorDialog()    // 隐藏</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">errorMsg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="string">&#x27;Error&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">buttonText</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">confirmFn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Function</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">showDialog</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">closeable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showDialog</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, value);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    $route() &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">dialogClass</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">title</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">buttonText</span>) <span class="keyword">return</span> <span class="string">&#x27;__pure-message&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">title</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">buttonText</span>) <span class="keyword">return</span> <span class="string">&#x27;__with-button&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">title</span>) <span class="keyword">return</span> <span class="string">&#x27;__with-title&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onConfirmClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">confirmFn</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.root</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.van-overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&#x27;@activity/styles/mixins.scss&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.error-dialog</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.dialog</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="built_in">px2rem</span>(<span class="number">319</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="built_in">px2rem</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">37.6%</span>;</span></span><br><span class="line"><span class="language-css">    &amp;-<span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid $border-color;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: $font-weight-bold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: $default-main-theme-color;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.icon-close</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="built_in">px2rem</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">~@activity/assets/images/icon-close.svg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-size</span>: <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    &amp;-<span class="attribute">content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="built_in">px2rem</span>(<span class="number">16</span>) <span class="built_in">px2rem</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="built_in">px2rem</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: $font-weight-regular;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: $font-color;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="built_in">px2rem</span>(<span class="number">24</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">      // <span class="attribute">word-wrap</span>: break-word;</span></span><br><span class="line"><span class="language-css">      // <span class="attribute">word-break</span>:break-all;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.notButton</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-bottom</span>: <span class="built_in">px2rem</span>(<span class="number">58</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btns</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="built_in">px2rem</span>(<span class="number">24</span>) <span class="built_in">px2rem</span>(<span class="number">30</span>) <span class="built_in">px2rem</span>(<span class="number">28</span>) <span class="built_in">px2rem</span>(<span class="number">30</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.button-default</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="built_in">px2rem</span>(<span class="number">44</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="built_in">px2rem</span>(<span class="number">25</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: $font-color-light-light;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="built_in">px2rem</span>(<span class="number">14</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: $default-main-theme-color;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.not-first</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="built_in">px2rem</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorDialog</span> <span class="keyword">from</span> <span class="string">&#x27;./errorDialog.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dialog</span> = &#123;&#125;;   <span class="comment">// 定义插件对象</span></span><br><span class="line"><span class="comment">// Vue的install方法，用于定义vue插件</span></span><br><span class="line"><span class="title class_">Dialog</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用Vue构造器，创建“子类”</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DialogConstructor</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">ErrorDialog</span>);</span><br><span class="line">    <span class="comment">// 实例化</span></span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">DialogConstructor</span>();</span><br><span class="line">    <span class="comment">// el官方注解：</span></span><br><span class="line">    <span class="comment">// 提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</span></span><br><span class="line">    <span class="comment">// 在实例挂载之后，元素可以用 vm.$el 访问。</span></span><br><span class="line">    <span class="comment">// 如果在实例化时存在这个选项，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译</span></span><br><span class="line">    <span class="comment">// 提供的元素只能作为挂载点。所有的挂载元素会被 Vue 生成的 DOM 替换。因此不推荐挂载 root 实例到 &lt;html&gt; 或者 &lt;body&gt; 上。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 挂载到元素上;$el访问元素并插入到body中</span></span><br><span class="line">    instance.$mount(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(instance.<span class="property">$el</span>)</span><br><span class="line">    <span class="comment">// Vue原型上添加显示方法，以便全局调用</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$showErrorDialog</span> = <span class="function">(<span class="params">options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dialogTimer</span>) <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">dialogTimer</span>);</span><br><span class="line">        <span class="comment">// 通过传入的props改变组件中的属性来显示不同提示效果以及显示时间</span></span><br><span class="line">        instance.<span class="property">title</span> = options.<span class="property">title</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        instance.<span class="property">show</span> = options.<span class="property">show</span> !== <span class="literal">false</span></span><br><span class="line">        instance.<span class="property">icon</span> = options.<span class="property">icon</span> || <span class="string">&#x27;loading&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogTimer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            instance.<span class="property">showDialog</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;, options.<span class="property">duration</span> || <span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Vue原型添加隐藏方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$hideErrorDialog</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        instance.<span class="property">showDialog</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Dialog</span>;</span><br></pre></td></tr></table></figure><blockquote><p>main.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Dialog</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/ErrorDialog/index.js&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Dialog</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期钩子函数及watch数据监听的执行时机</title>
      <link href="/vue/%E8%AF%AD%E6%B3%95/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/vue/%E8%AF%AD%E6%B3%95/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue生命周期图示"></p><ul><li>执行顺序<blockquote><p>beforeRouteEnter(路由跳转前) -&gt; BeforeCreate(创建前) -&gt; create(创建后) -&gt; beforeMount(加载前) -&gt; mounted(加载后) -&gt; beforeUpdate(更新前) -&gt; updated(更新后) -&gt; beforeDestory(销毁前) -&gt; destoryed(销毁后) -&gt; activated(组件激活) -&gt; deactivated(组件未激活) -&gt; errorCaptured(错误调用)</p></blockquote></li><li>钩子函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">from</span>.<span class="property">name</span> !== <span class="string">&#x27;route-name&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="function">(<span class="params">vm</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Function</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="watch监听"><a href="#watch监听" class="headerlink" title="watch监听"></a>watch监听</h3><blockquote><p>在生命周期的图示中，init reactivity是晚于beforeCreate但是早于created的。<br>watch加了immediate: true，应当同init reactivity周期一同执行，会早于created执行。<br>而正常的watch，则是mounted周期后触发data changes的周期执行，晚于created。</p></blockquote><ul><li>immediate</li></ul><p>watch 的一个特点是，默认最初绑定的时候是不会执行的，要等到值改变时才执行监听计算。<br>设置immediate为true后，被监听值初始化的时候就会执行监听函数，也就页面上的数据还未变化的时候</p><ul><li>deep</li></ul><p>当需要监听对象的改变时，此时就需要设置deep为true，不论其被嵌套多深，改变对象中的属性值能够触发监听，改变整个监听值也会触发。</p><p>deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler。</p><p>优化，我们可以是使用字符串形式监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;obj.a&#x27;</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newName, oldName</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj.a changed&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// deep: true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
